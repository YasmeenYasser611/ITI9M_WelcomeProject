
test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002f1a  00002fae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800168  00800168  000030b6  2**0
                  ALLOC
  3 .stab         00002904  00000000  00000000  000030b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001148  00000000  00000000  000059bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000092a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a627  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b800  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bcb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c624  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__vector_9>
      28:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__vector_10>
      2c:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 37       	cpi	r26, 0x72	; 114
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e1       	ldi	r30, 0x1A	; 26
      78:	ff e2       	ldi	r31, 0x2F	; 47
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 34 16 	call	0x2c68	; 0x2c68 <main>
      8a:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Dc_Motor_Init>:
 */

#include"Dc_Motors.h"
#include"DIO.h"
void Dc_Motor_Init()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

	//DIO_VidSetPortDirection(DC_MOTOR_PORT , DIO_ALL_OUTPUT);
	DIO_VidSetPinDirection(DC_MOTOR_PORT,ENA_PIN, DIO_OUTPUT );
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	63 e0       	ldi	r22, 0x03	; 3
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>

	DIO_VidSetPinDirection(DC_MOTOR_PORT,IN1_PIN, DIO_OUTPUT );
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT,IN2_PIN, DIO_OUTPUT );
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT,IN3_PIN, DIO_OUTPUT );
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	62 e0       	ldi	r22, 0x02	; 2
     e58:	41 e0       	ldi	r20, 0x01	; 1
     e5a:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT,IN4_PIN, DIO_OUTPUT );
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	64 e0       	ldi	r22, 0x04	; 4
     e62:	41 e0       	ldi	r20, 0x01	; 1
     e64:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>

}
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <DC_MOTOR_MoveForward>:
void DC_MOTOR_MoveForward()
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_HIGH );
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_HIGH );
	Timer0_VidTimer0SetOCR_FASRPWM(Timer0_OCR0);
     e76:	8d e7       	ldi	r24, 0x7D	; 125
     e78:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <Timer0_VidTimer0SetOCR_FASRPWM>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_HIGH );
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_LOW );
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	61 e0       	ldi	r22, 0x01	; 1
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_HIGH );
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	62 e0       	ldi	r22, 0x02	; 2
     e94:	41 e0       	ldi	r20, 0x01	; 1
     e96:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_LOW );
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	64 e0       	ldi	r22, 0x04	; 4
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>

}
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <DC_MOTOR_Movebackward>:
void DC_MOTOR_Movebackward()
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_HIGH );
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_HIGH );
	Timer0_VidTimer0SetOCR_FASRPWM(Timer0_OCR0);
     eb2:	8d e7       	ldi	r24, 0x7D	; 125
     eb4:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <Timer0_VidTimer0SetOCR_FASRPWM>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_LOW );
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_HIGH );
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	41 e0       	ldi	r20, 0x01	; 1
     ec8:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_LOW );
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	62 e0       	ldi	r22, 0x02	; 2
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_HIGH );
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	64 e0       	ldi	r22, 0x04	; 4
     eda:	41 e0       	ldi	r20, 0x01	; 1
     edc:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>


}
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <DC_MOTOR_MoveForwardRight>:
void DC_MOTOR_MoveForwardRight()
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_HIGH );
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_HIGH );
	Timer0_VidTimer0SetOCR_FASRPWM(Timer0_OCR0);
     eee:	8d e7       	ldi	r24, 0x7D	; 125
     ef0:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <Timer0_VidTimer0SetOCR_FASRPWM>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_HIGH );
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_LOW );
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_LOW );
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	62 e0       	ldi	r22, 0x02	; 2
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_HIGH );
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	64 e0       	ldi	r22, 0x04	; 4
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>



}
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <DC_MOTOR_MoveForwardLeft>:
void DC_MOTOR_MoveForwardLeft()
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_HIGH );
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_HIGH );
	Timer0_VidTimer0SetOCR_FASRPWM(Timer0_OCR0);
     f2a:	8d e7       	ldi	r24, 0x7D	; 125
     f2c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <Timer0_VidTimer0SetOCR_FASRPWM>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_LOW );
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_HIGH);
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_HIGH );
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	62 e0       	ldi	r22, 0x02	; 2
     f48:	41 e0       	ldi	r20, 0x01	; 1
     f4a:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_LOW );
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	64 e0       	ldi	r22, 0x04	; 4
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>


}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <DC_MOTOR_MovebackwardRight>:
void DC_MOTOR_MovebackwardRight()
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_HIGH );
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_HIGH );
	Timer0_VidTimer0SetOCR_FASRPWM(Timer0_OCR0);
     f66:	8d e7       	ldi	r24, 0x7D	; 125
     f68:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <Timer0_VidTimer0SetOCR_FASRPWM>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_LOW );
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_HIGH);
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	41 e0       	ldi	r20, 0x01	; 1
     f7c:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_HIGH );
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	62 e0       	ldi	r22, 0x02	; 2
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_LOW );
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	64 e0       	ldi	r22, 0x04	; 4
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>


}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <DC_MOTOR_MovebackwardLeft>:
void DC_MOTOR_MovebackwardLeft()
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_HIGH );
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_HIGH );
	Timer0_VidTimer0SetOCR_FASRPWM(Timer0_OCR0);
     fa2:	8d e7       	ldi	r24, 0x7D	; 125
     fa4:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <Timer0_VidTimer0SetOCR_FASRPWM>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_HIGH);
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_LOW);
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	61 e0       	ldi	r22, 0x01	; 1
     fb6:	40 e0       	ldi	r20, 0x00	; 0
     fb8:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_LOW );
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	62 e0       	ldi	r22, 0x02	; 2
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_HIGH);
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	64 e0       	ldi	r22, 0x04	; 4
     fca:	41 e0       	ldi	r20, 0x01	; 1
     fcc:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>

}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <DC_MOTOR_Stop>:
void DC_MOTOR_Stop()
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_LOW );
	//DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_LOW );
	Timer0_VidTimer0SetOCR_FASRPWM(Timer0_OCR0);
     fde:	8d e7       	ldi	r24, 0x7D	; 125
     fe0:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <Timer0_VidTimer0SetOCR_FASRPWM>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_LOW );
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_LOW );
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_LOW );
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	62 e0       	ldi	r22, 0x02	; 2
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_LOW );
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	64 e0       	ldi	r22, 0x04	; 4
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>

}
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <DIO_VidSetPinDirection>:
#include"DIO.h"

//function for direction
void DIO_VidSetPinDirection( u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Direction)    //preph name_returntype_funcName
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	29 97       	sbiw	r28, 0x09	; 9
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	6a 83       	std	Y+2, r22	; 0x02
    102a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_U8Direction)
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	39 87       	std	Y+9, r19	; 0x09
    1034:	28 87       	std	Y+8, r18	; 0x08
    1036:	88 85       	ldd	r24, Y+8	; 0x08
    1038:	99 85       	ldd	r25, Y+9	; 0x09
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	39 f0       	breq	.+14     	; 0x104c <DIO_VidSetPinDirection+0x3a>
    103e:	28 85       	ldd	r18, Y+8	; 0x08
    1040:	39 85       	ldd	r19, Y+9	; 0x09
    1042:	21 30       	cpi	r18, 0x01	; 1
    1044:	31 05       	cpc	r19, r1
    1046:	09 f4       	brne	.+2      	; 0x104a <DIO_VidSetPinDirection+0x38>
    1048:	75 c0       	rjmp	.+234    	; 0x1134 <DIO_VidSetPinDirection+0x122>
    104a:	e2 c0       	rjmp	.+452    	; 0x1210 <DIO_VidSetPinDirection+0x1fe>
	{
	    case DIO_INPUT:
	      switch(Copy_U8Port)
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3f 83       	std	Y+7, r19	; 0x07
    1054:	2e 83       	std	Y+6, r18	; 0x06
    1056:	8e 81       	ldd	r24, Y+6	; 0x06
    1058:	9f 81       	ldd	r25, Y+7	; 0x07
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	91 05       	cpc	r25, r1
    105e:	59 f1       	breq	.+86     	; 0x10b6 <DIO_VidSetPinDirection+0xa4>
    1060:	2e 81       	ldd	r18, Y+6	; 0x06
    1062:	3f 81       	ldd	r19, Y+7	; 0x07
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	31 05       	cpc	r19, r1
    1068:	2c f4       	brge	.+10     	; 0x1074 <DIO_VidSetPinDirection+0x62>
    106a:	8e 81       	ldd	r24, Y+6	; 0x06
    106c:	9f 81       	ldd	r25, Y+7	; 0x07
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	69 f0       	breq	.+26     	; 0x108c <DIO_VidSetPinDirection+0x7a>
    1072:	ce c0       	rjmp	.+412    	; 0x1210 <DIO_VidSetPinDirection+0x1fe>
    1074:	2e 81       	ldd	r18, Y+6	; 0x06
    1076:	3f 81       	ldd	r19, Y+7	; 0x07
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	89 f1       	breq	.+98     	; 0x10e0 <DIO_VidSetPinDirection+0xce>
    107e:	8e 81       	ldd	r24, Y+6	; 0x06
    1080:	9f 81       	ldd	r25, Y+7	; 0x07
    1082:	83 30       	cpi	r24, 0x03	; 3
    1084:	91 05       	cpc	r25, r1
    1086:	09 f4       	brne	.+2      	; 0x108a <DIO_VidSetPinDirection+0x78>
    1088:	40 c0       	rjmp	.+128    	; 0x110a <DIO_VidSetPinDirection+0xf8>
    108a:	c2 c0       	rjmp	.+388    	; 0x1210 <DIO_VidSetPinDirection+0x1fe>
	      {
	    	case DIO_PORTA:
	    		CLR_BIT( DDRA , Copy_U8Pin);
    108c:	aa e3       	ldi	r26, 0x3A	; 58
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ea e3       	ldi	r30, 0x3A	; 58
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_VidSetPinDirection+0x98>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_VidSetPinDirection+0x94>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	ad c0       	rjmp	.+346    	; 0x1210 <DIO_VidSetPinDirection+0x1fe>
	    		break;
	    	case DIO_PORTB:
	    		CLR_BIT( DDRB , Copy_U8Pin);
    10b6:	a7 e3       	ldi	r26, 0x37	; 55
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e7 e3       	ldi	r30, 0x37	; 55
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_VidSetPinDirection+0xc2>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_VidSetPinDirection+0xbe>
    10d8:	80 95       	com	r24
    10da:	84 23       	and	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	98 c0       	rjmp	.+304    	; 0x1210 <DIO_VidSetPinDirection+0x1fe>
	    		break;
	    	case DIO_PORTC:
	    		CLR_BIT( DDRC , Copy_U8Pin);
    10e0:	a4 e3       	ldi	r26, 0x34	; 52
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e4 e3       	ldi	r30, 0x34	; 52
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_VidSetPinDirection+0xec>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_VidSetPinDirection+0xe8>
    1102:	80 95       	com	r24
    1104:	84 23       	and	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	83 c0       	rjmp	.+262    	; 0x1210 <DIO_VidSetPinDirection+0x1fe>
	    	    break;
	    	case DIO_PORTD:
	    		CLR_BIT( DDRD , Copy_U8Pin);
    110a:	a1 e3       	ldi	r26, 0x31	; 49
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e1 e3       	ldi	r30, 0x31	; 49
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_VidSetPinDirection+0x116>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_VidSetPinDirection+0x112>
    112c:	80 95       	com	r24
    112e:	84 23       	and	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	6e c0       	rjmp	.+220    	; 0x1210 <DIO_VidSetPinDirection+0x1fe>
	    	    break;

	      }
	      break;
	    case DIO_OUTPUT:
	    	switch(Copy_U8Port)
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3d 83       	std	Y+5, r19	; 0x05
    113c:	2c 83       	std	Y+4, r18	; 0x04
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	49 f1       	breq	.+82     	; 0x119a <DIO_VidSetPinDirection+0x188>
    1148:	2c 81       	ldd	r18, Y+4	; 0x04
    114a:	3d 81       	ldd	r19, Y+5	; 0x05
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	2c f4       	brge	.+10     	; 0x115c <DIO_VidSetPinDirection+0x14a>
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	61 f0       	breq	.+24     	; 0x1172 <DIO_VidSetPinDirection+0x160>
    115a:	5a c0       	rjmp	.+180    	; 0x1210 <DIO_VidSetPinDirection+0x1fe>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	71 f1       	breq	.+92     	; 0x11c2 <DIO_VidSetPinDirection+0x1b0>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	91 05       	cpc	r25, r1
    116e:	e9 f1       	breq	.+122    	; 0x11ea <DIO_VidSetPinDirection+0x1d8>
    1170:	4f c0       	rjmp	.+158    	; 0x1210 <DIO_VidSetPinDirection+0x1fe>
	    		    {
	    		    	case DIO_PORTA:
	    		    		SET_BIT( DDRA , Copy_U8Pin);
    1172:	aa e3       	ldi	r26, 0x3A	; 58
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	ea e3       	ldi	r30, 0x3A	; 58
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_VidSetPinDirection+0x17e>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_VidSetPinDirection+0x17a>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	3b c0       	rjmp	.+118    	; 0x1210 <DIO_VidSetPinDirection+0x1fe>
	    		    		break;
	    		    	case DIO_PORTB:
	    		    		SET_BIT( DDRB , Copy_U8Pin);
    119a:	a7 e3       	ldi	r26, 0x37	; 55
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e7 e3       	ldi	r30, 0x37	; 55
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_VidSetPinDirection+0x1a6>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_VidSetPinDirection+0x1a2>
    11bc:	84 2b       	or	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	27 c0       	rjmp	.+78     	; 0x1210 <DIO_VidSetPinDirection+0x1fe>
	    		    		break;
	    		    	case DIO_PORTC:
	    		    		SET_BIT( DDRC , Copy_U8Pin);
    11c2:	a4 e3       	ldi	r26, 0x34	; 52
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e4 e3       	ldi	r30, 0x34	; 52
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_VidSetPinDirection+0x1ce>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_VidSetPinDirection+0x1ca>
    11e4:	84 2b       	or	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	13 c0       	rjmp	.+38     	; 0x1210 <DIO_VidSetPinDirection+0x1fe>
	    		    	    break;
	    		    	case DIO_PORTD:
	    		    		SET_BIT( DDRD , Copy_U8Pin);
    11ea:	a1 e3       	ldi	r26, 0x31	; 49
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e1 e3       	ldi	r30, 0x31	; 49
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_VidSetPinDirection+0x1f6>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_VidSetPinDirection+0x1f2>
    120c:	84 2b       	or	r24, r20
    120e:	8c 93       	st	X, r24
	    		    	    break;
	    		    }
	    	break;
	}
}
    1210:	29 96       	adiw	r28, 0x09	; 9
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <DIO_VidSetPinValue>:
//function for value
void DIO_VidSetPinValue( u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Value)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	29 97       	sbiw	r28, 0x09	; 9
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	6a 83       	std	Y+2, r22	; 0x02
    123a:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_U8Value)
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	39 87       	std	Y+9, r19	; 0x09
    1244:	28 87       	std	Y+8, r18	; 0x08
    1246:	88 85       	ldd	r24, Y+8	; 0x08
    1248:	99 85       	ldd	r25, Y+9	; 0x09
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	39 f0       	breq	.+14     	; 0x125c <DIO_VidSetPinValue+0x3a>
    124e:	28 85       	ldd	r18, Y+8	; 0x08
    1250:	39 85       	ldd	r19, Y+9	; 0x09
    1252:	21 30       	cpi	r18, 0x01	; 1
    1254:	31 05       	cpc	r19, r1
    1256:	09 f4       	brne	.+2      	; 0x125a <DIO_VidSetPinValue+0x38>
    1258:	75 c0       	rjmp	.+234    	; 0x1344 <DIO_VidSetPinValue+0x122>
    125a:	e2 c0       	rjmp	.+452    	; 0x1420 <DIO_VidSetPinValue+0x1fe>
	{
	    case DIO_LOW:
	      switch(Copy_U8Port)
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	3f 83       	std	Y+7, r19	; 0x07
    1264:	2e 83       	std	Y+6, r18	; 0x06
    1266:	8e 81       	ldd	r24, Y+6	; 0x06
    1268:	9f 81       	ldd	r25, Y+7	; 0x07
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	91 05       	cpc	r25, r1
    126e:	59 f1       	breq	.+86     	; 0x12c6 <DIO_VidSetPinValue+0xa4>
    1270:	2e 81       	ldd	r18, Y+6	; 0x06
    1272:	3f 81       	ldd	r19, Y+7	; 0x07
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	2c f4       	brge	.+10     	; 0x1284 <DIO_VidSetPinValue+0x62>
    127a:	8e 81       	ldd	r24, Y+6	; 0x06
    127c:	9f 81       	ldd	r25, Y+7	; 0x07
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	69 f0       	breq	.+26     	; 0x129c <DIO_VidSetPinValue+0x7a>
    1282:	ce c0       	rjmp	.+412    	; 0x1420 <DIO_VidSetPinValue+0x1fe>
    1284:	2e 81       	ldd	r18, Y+6	; 0x06
    1286:	3f 81       	ldd	r19, Y+7	; 0x07
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	89 f1       	breq	.+98     	; 0x12f0 <DIO_VidSetPinValue+0xce>
    128e:	8e 81       	ldd	r24, Y+6	; 0x06
    1290:	9f 81       	ldd	r25, Y+7	; 0x07
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	91 05       	cpc	r25, r1
    1296:	09 f4       	brne	.+2      	; 0x129a <DIO_VidSetPinValue+0x78>
    1298:	40 c0       	rjmp	.+128    	; 0x131a <DIO_VidSetPinValue+0xf8>
    129a:	c2 c0       	rjmp	.+388    	; 0x1420 <DIO_VidSetPinValue+0x1fe>
	      {
	    	case DIO_PORTA:
	    		CLR_BIT( PORTA , Copy_U8Pin);
    129c:	ab e3       	ldi	r26, 0x3B	; 59
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	eb e3       	ldi	r30, 0x3B	; 59
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_VidSetPinValue+0x98>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_VidSetPinValue+0x94>
    12be:	80 95       	com	r24
    12c0:	84 23       	and	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	ad c0       	rjmp	.+346    	; 0x1420 <DIO_VidSetPinValue+0x1fe>
	    		break;
	    	case DIO_PORTB:
	    		CLR_BIT( PORTB , Copy_U8Pin);
    12c6:	a8 e3       	ldi	r26, 0x38	; 56
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e8 e3       	ldi	r30, 0x38	; 56
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_VidSetPinValue+0xc2>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_VidSetPinValue+0xbe>
    12e8:	80 95       	com	r24
    12ea:	84 23       	and	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	98 c0       	rjmp	.+304    	; 0x1420 <DIO_VidSetPinValue+0x1fe>
	    		break;
	    	case DIO_PORTC:
	    		CLR_BIT( PORTC , Copy_U8Pin);
    12f0:	a5 e3       	ldi	r26, 0x35	; 53
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e5 e3       	ldi	r30, 0x35	; 53
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_VidSetPinValue+0xec>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_VidSetPinValue+0xe8>
    1312:	80 95       	com	r24
    1314:	84 23       	and	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	83 c0       	rjmp	.+262    	; 0x1420 <DIO_VidSetPinValue+0x1fe>
	    	    break;
	    	case DIO_PORTD:
	    		CLR_BIT( PORTD , Copy_U8Pin);
    131a:	a2 e3       	ldi	r26, 0x32	; 50
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e2 e3       	ldi	r30, 0x32	; 50
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_VidSetPinValue+0x116>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_VidSetPinValue+0x112>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	6e c0       	rjmp	.+220    	; 0x1420 <DIO_VidSetPinValue+0x1fe>
	    	    break;

	      }
	      break;
	    case DIO_HIGH:
	    	switch(Copy_U8Port)
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	3d 83       	std	Y+5, r19	; 0x05
    134c:	2c 83       	std	Y+4, r18	; 0x04
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	9d 81       	ldd	r25, Y+5	; 0x05
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	91 05       	cpc	r25, r1
    1356:	49 f1       	breq	.+82     	; 0x13aa <DIO_VidSetPinValue+0x188>
    1358:	2c 81       	ldd	r18, Y+4	; 0x04
    135a:	3d 81       	ldd	r19, Y+5	; 0x05
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	2c f4       	brge	.+10     	; 0x136c <DIO_VidSetPinValue+0x14a>
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	61 f0       	breq	.+24     	; 0x1382 <DIO_VidSetPinValue+0x160>
    136a:	5a c0       	rjmp	.+180    	; 0x1420 <DIO_VidSetPinValue+0x1fe>
    136c:	2c 81       	ldd	r18, Y+4	; 0x04
    136e:	3d 81       	ldd	r19, Y+5	; 0x05
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	71 f1       	breq	.+92     	; 0x13d2 <DIO_VidSetPinValue+0x1b0>
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	91 05       	cpc	r25, r1
    137e:	e9 f1       	breq	.+122    	; 0x13fa <DIO_VidSetPinValue+0x1d8>
    1380:	4f c0       	rjmp	.+158    	; 0x1420 <DIO_VidSetPinValue+0x1fe>
	    		    {
	    		    	case DIO_PORTA:
	    		    		SET_BIT( PORTA , Copy_U8Pin);
    1382:	ab e3       	ldi	r26, 0x3B	; 59
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	eb e3       	ldi	r30, 0x3B	; 59
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_VidSetPinValue+0x17e>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_VidSetPinValue+0x17a>
    13a4:	84 2b       	or	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	3b c0       	rjmp	.+118    	; 0x1420 <DIO_VidSetPinValue+0x1fe>
	    		    		break;
	    		    	case DIO_PORTB:
	    		    		SET_BIT( PORTB , Copy_U8Pin);
    13aa:	a8 e3       	ldi	r26, 0x38	; 56
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e8 e3       	ldi	r30, 0x38	; 56
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_VidSetPinValue+0x1a6>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_VidSetPinValue+0x1a2>
    13cc:	84 2b       	or	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	27 c0       	rjmp	.+78     	; 0x1420 <DIO_VidSetPinValue+0x1fe>
	    		    		break;
	    		    	case DIO_PORTC:
	    		    		SET_BIT( PORTC , Copy_U8Pin);
    13d2:	a5 e3       	ldi	r26, 0x35	; 53
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e5 e3       	ldi	r30, 0x35	; 53
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_VidSetPinValue+0x1ce>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_VidSetPinValue+0x1ca>
    13f4:	84 2b       	or	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	13 c0       	rjmp	.+38     	; 0x1420 <DIO_VidSetPinValue+0x1fe>
	    		    	    break;
	    		    	case DIO_PORTD:
	    		    		SET_BIT( PORTD , Copy_U8Pin);
    13fa:	a2 e3       	ldi	r26, 0x32	; 50
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e2 e3       	ldi	r30, 0x32	; 50
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <DIO_VidSetPinValue+0x1f6>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <DIO_VidSetPinValue+0x1f2>
    141c:	84 2b       	or	r24, r20
    141e:	8c 93       	st	X, r24
	    		    	    break;
	    		    }
	    	        break;
	}

}
    1420:	29 96       	adiw	r28, 0x09	; 9
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <DIO_VidSetPortDirection>:


 //function to set port direction
void DIO_VidSetPortDirection(u8 Copy_U8Port , u8 Copy_U8Direction)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <DIO_VidSetPortDirection+0x6>
    1438:	00 d0       	rcall	.+0      	; 0x143a <DIO_VidSetPortDirection+0x8>
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3c 83       	std	Y+4, r19	; 0x04
    144a:	2b 83       	std	Y+3, r18	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	d1 f0       	breq	.+52     	; 0x148a <DIO_VidSetPortDirection+0x58>
    1456:	2b 81       	ldd	r18, Y+3	; 0x03
    1458:	3c 81       	ldd	r19, Y+4	; 0x04
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	2c f4       	brge	.+10     	; 0x146a <DIO_VidSetPortDirection+0x38>
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	61 f0       	breq	.+24     	; 0x1480 <DIO_VidSetPortDirection+0x4e>
    1468:	1e c0       	rjmp	.+60     	; 0x14a6 <DIO_VidSetPortDirection+0x74>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	81 f0       	breq	.+32     	; 0x1494 <DIO_VidSetPortDirection+0x62>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	81 f0       	breq	.+32     	; 0x149e <DIO_VidSetPortDirection+0x6c>
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <DIO_VidSetPortDirection+0x74>
		    {
		    	case DIO_PORTA:
		    		DDRA= Copy_U8Direction;
    1480:	ea e3       	ldi	r30, 0x3A	; 58
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 83       	st	Z, r24
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <DIO_VidSetPortDirection+0x74>
		    		break;
		    	case DIO_PORTB:
		    		DDRB= Copy_U8Direction;
    148a:	e7 e3       	ldi	r30, 0x37	; 55
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	80 83       	st	Z, r24
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <DIO_VidSetPortDirection+0x74>
		    		break;
		    	case DIO_PORTC:
		    		DDRC= Copy_U8Direction;
    1494:	e4 e3       	ldi	r30, 0x34	; 52
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	80 83       	st	Z, r24
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <DIO_VidSetPortDirection+0x74>
		    	    break;
		    	case DIO_PORTD:
		    		DDRD= Copy_U8Direction;
    149e:	e1 e3       	ldi	r30, 0x31	; 49
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	80 83       	st	Z, r24
		    	    break;
		    }

}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <DIO_VidSetPortValue>:
//functio to set the port value
void DIO_VidSetPortValue(u8 Copy_U8Port , u8 Copy_U8Value)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <DIO_VidSetPortValue+0x6>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <DIO_VidSetPortValue+0x8>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3c 83       	std	Y+4, r19	; 0x04
    14cc:	2b 83       	std	Y+3, r18	; 0x03
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	91 05       	cpc	r25, r1
    14d6:	d1 f0       	breq	.+52     	; 0x150c <DIO_VidSetPortValue+0x58>
    14d8:	2b 81       	ldd	r18, Y+3	; 0x03
    14da:	3c 81       	ldd	r19, Y+4	; 0x04
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	2c f4       	brge	.+10     	; 0x14ec <DIO_VidSetPortValue+0x38>
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	61 f0       	breq	.+24     	; 0x1502 <DIO_VidSetPortValue+0x4e>
    14ea:	1e c0       	rjmp	.+60     	; 0x1528 <DIO_VidSetPortValue+0x74>
    14ec:	2b 81       	ldd	r18, Y+3	; 0x03
    14ee:	3c 81       	ldd	r19, Y+4	; 0x04
    14f0:	22 30       	cpi	r18, 0x02	; 2
    14f2:	31 05       	cpc	r19, r1
    14f4:	81 f0       	breq	.+32     	; 0x1516 <DIO_VidSetPortValue+0x62>
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	91 05       	cpc	r25, r1
    14fe:	81 f0       	breq	.+32     	; 0x1520 <DIO_VidSetPortValue+0x6c>
    1500:	13 c0       	rjmp	.+38     	; 0x1528 <DIO_VidSetPortValue+0x74>
		    {
		    	case DIO_PORTA:
		    		PORTA= Copy_U8Value;
    1502:	eb e3       	ldi	r30, 0x3B	; 59
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 83       	st	Z, r24
    150a:	0e c0       	rjmp	.+28     	; 0x1528 <DIO_VidSetPortValue+0x74>
		    		break;
		    	case DIO_PORTB:
		    		PORTB= Copy_U8Value;
    150c:	e8 e3       	ldi	r30, 0x38	; 56
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	80 83       	st	Z, r24
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <DIO_VidSetPortValue+0x74>
		    		break;
		    	case DIO_PORTC:
		    		PORTC= Copy_U8Value;
    1516:	e5 e3       	ldi	r30, 0x35	; 53
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	80 83       	st	Z, r24
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <DIO_VidSetPortValue+0x74>
		    	    break;
		    	case DIO_PORTD:
		    		PORTD= Copy_U8Value;
    1520:	e2 e3       	ldi	r30, 0x32	; 50
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	80 83       	st	Z, r24
		    	    break;
		    }

}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <DIO_VidTogglePinValue>:
//function to toggle the pin
void DIO_VidTogglePinValue(u8 Copy_U8Port , u8 Copy_U8Pin)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	00 d0       	rcall	.+0      	; 0x153c <DIO_VidTogglePinValue+0x6>
    153c:	00 d0       	rcall	.+0      	; 0x153e <DIO_VidTogglePinValue+0x8>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	3c 83       	std	Y+4, r19	; 0x04
    154e:	2b 83       	std	Y+3, r18	; 0x03
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	91 05       	cpc	r25, r1
    1558:	49 f1       	breq	.+82     	; 0x15ac <DIO_VidTogglePinValue+0x76>
    155a:	2b 81       	ldd	r18, Y+3	; 0x03
    155c:	3c 81       	ldd	r19, Y+4	; 0x04
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	2c f4       	brge	.+10     	; 0x156e <DIO_VidTogglePinValue+0x38>
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	61 f0       	breq	.+24     	; 0x1584 <DIO_VidTogglePinValue+0x4e>
    156c:	5a c0       	rjmp	.+180    	; 0x1622 <DIO_VidTogglePinValue+0xec>
    156e:	2b 81       	ldd	r18, Y+3	; 0x03
    1570:	3c 81       	ldd	r19, Y+4	; 0x04
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	71 f1       	breq	.+92     	; 0x15d4 <DIO_VidTogglePinValue+0x9e>
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	91 05       	cpc	r25, r1
    1580:	e9 f1       	breq	.+122    	; 0x15fc <DIO_VidTogglePinValue+0xc6>
    1582:	4f c0       	rjmp	.+158    	; 0x1622 <DIO_VidTogglePinValue+0xec>
		    {
		    	case DIO_PORTA:
		    		TOGGLE_BIT(PORTA , Copy_U8Pin);
    1584:	ab e3       	ldi	r26, 0x3B	; 59
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	eb e3       	ldi	r30, 0x3B	; 59
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_VidTogglePinValue+0x6c>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <DIO_VidTogglePinValue+0x68>
    15a6:	84 27       	eor	r24, r20
    15a8:	8c 93       	st	X, r24
    15aa:	3b c0       	rjmp	.+118    	; 0x1622 <DIO_VidTogglePinValue+0xec>
		    		break;
		    	case DIO_PORTB:
		    		TOGGLE_BIT(PORTB , Copy_U8Pin);
    15ac:	a8 e3       	ldi	r26, 0x38	; 56
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e8 e3       	ldi	r30, 0x38	; 56
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_VidTogglePinValue+0x94>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <DIO_VidTogglePinValue+0x90>
    15ce:	84 27       	eor	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	27 c0       	rjmp	.+78     	; 0x1622 <DIO_VidTogglePinValue+0xec>
		    		break;
		    	case DIO_PORTC:
		    		TOGGLE_BIT(PORTC , Copy_U8Pin);
    15d4:	a5 e3       	ldi	r26, 0x35	; 53
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e5 e3       	ldi	r30, 0x35	; 53
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_VidTogglePinValue+0xbc>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_VidTogglePinValue+0xb8>
    15f6:	84 27       	eor	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	13 c0       	rjmp	.+38     	; 0x1622 <DIO_VidTogglePinValue+0xec>
		    	    break;
		    	case DIO_PORTD:
		    		TOGGLE_BIT(PORTD , Copy_U8Pin);
    15fc:	a2 e3       	ldi	r26, 0x32	; 50
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e2 e3       	ldi	r30, 0x32	; 50
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_VidTogglePinValue+0xe4>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_VidTogglePinValue+0xe0>
    161e:	84 27       	eor	r24, r20
    1620:	8c 93       	st	X, r24
		    	    break;
		    }

}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <DIO_U8Get_PinValue>:

u8 DIO_U8Get_PinValue(u8 Copy_U8Port , u8 Copy_U8Pin)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <DIO_U8Get_PinValue+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <DIO_U8Get_PinValue+0x8>
    1638:	0f 92       	push	r0
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	8a 83       	std	Y+2, r24	; 0x02
    1640:	6b 83       	std	Y+3, r22	; 0x03
	u8 read;
	switch(Copy_U8Port)
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	3d 83       	std	Y+5, r19	; 0x05
    164a:	2c 83       	std	Y+4, r18	; 0x04
    164c:	4c 81       	ldd	r20, Y+4	; 0x04
    164e:	5d 81       	ldd	r21, Y+5	; 0x05
    1650:	41 30       	cpi	r20, 0x01	; 1
    1652:	51 05       	cpc	r21, r1
    1654:	41 f1       	breq	.+80     	; 0x16a6 <DIO_U8Get_PinValue+0x76>
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	9d 81       	ldd	r25, Y+5	; 0x05
    165a:	82 30       	cpi	r24, 0x02	; 2
    165c:	91 05       	cpc	r25, r1
    165e:	34 f4       	brge	.+12     	; 0x166c <DIO_U8Get_PinValue+0x3c>
    1660:	2c 81       	ldd	r18, Y+4	; 0x04
    1662:	3d 81       	ldd	r19, Y+5	; 0x05
    1664:	21 15       	cp	r18, r1
    1666:	31 05       	cpc	r19, r1
    1668:	61 f0       	breq	.+24     	; 0x1682 <DIO_U8Get_PinValue+0x52>
    166a:	52 c0       	rjmp	.+164    	; 0x1710 <DIO_U8Get_PinValue+0xe0>
    166c:	4c 81       	ldd	r20, Y+4	; 0x04
    166e:	5d 81       	ldd	r21, Y+5	; 0x05
    1670:	42 30       	cpi	r20, 0x02	; 2
    1672:	51 05       	cpc	r21, r1
    1674:	51 f1       	breq	.+84     	; 0x16ca <DIO_U8Get_PinValue+0x9a>
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	9d 81       	ldd	r25, Y+5	; 0x05
    167a:	83 30       	cpi	r24, 0x03	; 3
    167c:	91 05       	cpc	r25, r1
    167e:	b9 f1       	breq	.+110    	; 0x16ee <DIO_U8Get_PinValue+0xbe>
    1680:	47 c0       	rjmp	.+142    	; 0x1710 <DIO_U8Get_PinValue+0xe0>
			    {
			    	case DIO_PORTA:
			    		read =GET_BIT(PINA , Copy_U8Pin);
    1682:	e9 e3       	ldi	r30, 0x39	; 57
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a9 01       	movw	r20, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_U8Get_PinValue+0x6a>
    1696:	55 95       	asr	r21
    1698:	47 95       	ror	r20
    169a:	8a 95       	dec	r24
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_U8Get_PinValue+0x66>
    169e:	ca 01       	movw	r24, r20
    16a0:	81 70       	andi	r24, 0x01	; 1
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	35 c0       	rjmp	.+106    	; 0x1710 <DIO_U8Get_PinValue+0xe0>
			    		break;
			    	case DIO_PORTB:
			    		read=GET_BIT(PINB , Copy_U8Pin);
    16a6:	e6 e3       	ldi	r30, 0x36	; 54
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	88 2f       	mov	r24, r24
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a9 01       	movw	r20, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <DIO_U8Get_PinValue+0x8e>
    16ba:	55 95       	asr	r21
    16bc:	47 95       	ror	r20
    16be:	8a 95       	dec	r24
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <DIO_U8Get_PinValue+0x8a>
    16c2:	ca 01       	movw	r24, r20
    16c4:	81 70       	andi	r24, 0x01	; 1
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	23 c0       	rjmp	.+70     	; 0x1710 <DIO_U8Get_PinValue+0xe0>
			    		break;
			    	case DIO_PORTC:
			    		read=GET_BIT(PINC , Copy_U8Pin);
    16ca:	e3 e3       	ldi	r30, 0x33	; 51
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a9 01       	movw	r20, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_U8Get_PinValue+0xb2>
    16de:	55 95       	asr	r21
    16e0:	47 95       	ror	r20
    16e2:	8a 95       	dec	r24
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_U8Get_PinValue+0xae>
    16e6:	ca 01       	movw	r24, r20
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	11 c0       	rjmp	.+34     	; 0x1710 <DIO_U8Get_PinValue+0xe0>
			    	    break;
			    	case DIO_PORTD:
			    		read=GET_BIT(PIND , Copy_U8Pin);
    16ee:	e0 e3       	ldi	r30, 0x30	; 48
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a9 01       	movw	r20, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <DIO_U8Get_PinValue+0xd6>
    1702:	55 95       	asr	r21
    1704:	47 95       	ror	r20
    1706:	8a 95       	dec	r24
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <DIO_U8Get_PinValue+0xd2>
    170a:	ca 01       	movw	r24, r20
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	89 83       	std	Y+1, r24	; 0x01
			    	    break;
			    }
	return read;
    1710:	89 81       	ldd	r24, Y+1	; 0x01
}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <IR_init>:
#include "Dc_Motors.h"
#include"avr/delay.h"
//#include"LCD.h"

void IR_init()
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62

	DIO_VidSetPinDirection(IR1_PORT,IR1_PIN,DIO_INPUT);
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	63 e0       	ldi	r22, 0x03	; 3
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(IR1_PORT,IR1_PIN,DIO_HIGH);
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	63 e0       	ldi	r22, 0x03	; 3
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>

	DIO_VidSetPinDirection(IR2_PORT,IR2_PIN,DIO_INPUT);
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	64 e0       	ldi	r22, 0x04	; 4
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(IR2_PORT,IR2_PIN,DIO_HIGH);
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	64 e0       	ldi	r22, 0x04	; 4
    174c:	41 e0       	ldi	r20, 0x01	; 1
    174e:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>

}
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <IR1_read>:

u8 IR1_read()
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	0f 92       	push	r0
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
	u8 read;
	read=DIO_U8Get_PinValue(IR1_PORT,IR1_PIN);
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	63 e0       	ldi	r22, 0x03	; 3
    1766:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_U8Get_PinValue>
    176a:	89 83       	std	Y+1, r24	; 0x01
	return read;
    176c:	89 81       	ldd	r24, Y+1	; 0x01
}
    176e:	0f 90       	pop	r0
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <IR2_read>:

u8 IR2_read()
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	0f 92       	push	r0
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
	u8 read;
	read=DIO_U8Get_PinValue(IR2_PORT,IR2_PIN);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	64 e0       	ldi	r22, 0x04	; 4
    1784:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_U8Get_PinValue>
    1788:	89 83       	std	Y+1, r24	; 0x01
	return read;
    178a:	89 81       	ldd	r24, Y+1	; 0x01
}
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <IR_MakeDecision>:

void IR_MakeDecision()
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	6e 97       	sbiw	r28, 0x1e	; 30
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
	u8 left = IR1_read();
    17a8:	0e 94 ac 0b 	call	0x1758	; 0x1758 <IR1_read>
    17ac:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 right = IR2_read();
    17ae:	0e 94 bb 0b 	call	0x1776	; 0x1776 <IR2_read>
    17b2:	8d 8f       	std	Y+29, r24	; 0x1d
	//let 0 is black(line) , 1 is white
	if(left ==1 && right ==1) // 2 ir see white so go forward
    17b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	31 f4       	brne	.+12     	; 0x17c6 <IR_MakeDecision+0x32>
    17ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	19 f4       	brne	.+6      	; 0x17c6 <IR_MakeDecision+0x32>
	{
		//LCD_SEND_COMMAND(0x01);
		//LCD_VidSendStrig("move forword");
		DC_MOTOR_MoveForward();
    17c0:	0e 94 37 07 	call	0xe6e	; 0xe6e <DC_MOTOR_MoveForward>
    17c4:	fc c0       	rjmp	.+504    	; 0x19be <IR_MakeDecision+0x22a>
		//DC_MOTOR_Stop();

	}
	else if(left ==1 && right ==0) // the right ir see black(line) so car must move forward right
    17c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	09 f0       	breq	.+2      	; 0x17ce <IR_MakeDecision+0x3a>
    17cc:	79 c0       	rjmp	.+242    	; 0x18c0 <IR_MakeDecision+0x12c>
    17ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d0:	88 23       	and	r24, r24
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <IR_MakeDecision+0x42>
    17d4:	75 c0       	rjmp	.+234    	; 0x18c0 <IR_MakeDecision+0x12c>
	{
		//DC_MOTOR_Stop();
		//_delay_ms(100);
		DC_MOTOR_MoveForwardRight();
    17d6:	0e 94 73 07 	call	0xee6	; 0xee6 <DC_MOTOR_MoveForwardRight>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a8 ec       	ldi	r26, 0xC8	; 200
    17e0:	b2 e4       	ldi	r27, 0x42	; 66
    17e2:	89 8f       	std	Y+25, r24	; 0x19
    17e4:	9a 8f       	std	Y+26, r25	; 0x1a
    17e6:	ab 8f       	std	Y+27, r26	; 0x1b
    17e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ea:	69 8d       	ldd	r22, Y+25	; 0x19
    17ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a ef       	ldi	r20, 0xFA	; 250
    17f8:	54 e4       	ldi	r21, 0x44	; 68
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8d 8b       	std	Y+21, r24	; 0x15
    1804:	9e 8b       	std	Y+22, r25	; 0x16
    1806:	af 8b       	std	Y+23, r26	; 0x17
    1808:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    180a:	6d 89       	ldd	r22, Y+21	; 0x15
    180c:	7e 89       	ldd	r23, Y+22	; 0x16
    180e:	8f 89       	ldd	r24, Y+23	; 0x17
    1810:	98 8d       	ldd	r25, Y+24	; 0x18
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    181e:	88 23       	and	r24, r24
    1820:	2c f4       	brge	.+10     	; 0x182c <IR_MakeDecision+0x98>
		__ticks = 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9c 8b       	std	Y+20, r25	; 0x14
    1828:	8b 8b       	std	Y+19, r24	; 0x13
    182a:	3f c0       	rjmp	.+126    	; 0x18aa <IR_MakeDecision+0x116>
	else if (__tmp > 65535)
    182c:	6d 89       	ldd	r22, Y+21	; 0x15
    182e:	7e 89       	ldd	r23, Y+22	; 0x16
    1830:	8f 89       	ldd	r24, Y+23	; 0x17
    1832:	98 8d       	ldd	r25, Y+24	; 0x18
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	3f ef       	ldi	r19, 0xFF	; 255
    1838:	4f e7       	ldi	r20, 0x7F	; 127
    183a:	57 e4       	ldi	r21, 0x47	; 71
    183c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1840:	18 16       	cp	r1, r24
    1842:	4c f5       	brge	.+82     	; 0x1896 <IR_MakeDecision+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1844:	69 8d       	ldd	r22, Y+25	; 0x19
    1846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    184a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e2       	ldi	r20, 0x20	; 32
    1852:	51 e4       	ldi	r21, 0x41	; 65
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9c 8b       	std	Y+20, r25	; 0x14
    186a:	8b 8b       	std	Y+19, r24	; 0x13
    186c:	0f c0       	rjmp	.+30     	; 0x188c <IR_MakeDecision+0xf8>
    186e:	88 ec       	ldi	r24, 0xC8	; 200
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9a 8b       	std	Y+18, r25	; 0x12
    1874:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1876:	89 89       	ldd	r24, Y+17	; 0x11
    1878:	9a 89       	ldd	r25, Y+18	; 0x12
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <IR_MakeDecision+0xe6>
    187e:	9a 8b       	std	Y+18, r25	; 0x12
    1880:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	8b 89       	ldd	r24, Y+19	; 0x13
    1884:	9c 89       	ldd	r25, Y+20	; 0x14
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	9c 8b       	std	Y+20, r25	; 0x14
    188a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188c:	8b 89       	ldd	r24, Y+19	; 0x13
    188e:	9c 89       	ldd	r25, Y+20	; 0x14
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	69 f7       	brne	.-38     	; 0x186e <IR_MakeDecision+0xda>
    1894:	94 c0       	rjmp	.+296    	; 0x19be <IR_MakeDecision+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1896:	6d 89       	ldd	r22, Y+21	; 0x15
    1898:	7e 89       	ldd	r23, Y+22	; 0x16
    189a:	8f 89       	ldd	r24, Y+23	; 0x17
    189c:	98 8d       	ldd	r25, Y+24	; 0x18
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9c 8b       	std	Y+20, r25	; 0x14
    18a8:	8b 8b       	std	Y+19, r24	; 0x13
    18aa:	8b 89       	ldd	r24, Y+19	; 0x13
    18ac:	9c 89       	ldd	r25, Y+20	; 0x14
    18ae:	98 8b       	std	Y+16, r25	; 0x10
    18b0:	8f 87       	std	Y+15, r24	; 0x0f
    18b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b4:	98 89       	ldd	r25, Y+16	; 0x10
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <IR_MakeDecision+0x122>
    18ba:	98 8b       	std	Y+16, r25	; 0x10
    18bc:	8f 87       	std	Y+15, r24	; 0x0f
    18be:	7f c0       	rjmp	.+254    	; 0x19be <IR_MakeDecision+0x22a>
		//IR_MakeDecision();
		//DC_MOTOR_MoveForward();


	}
	else if(left ==0 && right ==1) //the left see the line so car move forward left
    18c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18c2:	88 23       	and	r24, r24
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <IR_MakeDecision+0x134>
    18c6:	79 c0       	rjmp	.+242    	; 0x19ba <IR_MakeDecision+0x226>
    18c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <IR_MakeDecision+0x13c>
    18ce:	75 c0       	rjmp	.+234    	; 0x19ba <IR_MakeDecision+0x226>
	{
		//DC_MOTOR_Stop();
		//_delay_ms(100);
		DC_MOTOR_MoveForwardLeft();
    18d0:	0e 94 91 07 	call	0xf22	; 0xf22 <DC_MOTOR_MoveForwardLeft>
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	a8 ec       	ldi	r26, 0xC8	; 200
    18da:	b2 e4       	ldi	r27, 0x42	; 66
    18dc:	8b 87       	std	Y+11, r24	; 0x0b
    18de:	9c 87       	std	Y+12, r25	; 0x0c
    18e0:	ad 87       	std	Y+13, r26	; 0x0d
    18e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	4a ef       	ldi	r20, 0xFA	; 250
    18f2:	54 e4       	ldi	r21, 0x44	; 68
    18f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	8f 83       	std	Y+7, r24	; 0x07
    18fe:	98 87       	std	Y+8, r25	; 0x08
    1900:	a9 87       	std	Y+9, r26	; 0x09
    1902:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1904:	6f 81       	ldd	r22, Y+7	; 0x07
    1906:	78 85       	ldd	r23, Y+8	; 0x08
    1908:	89 85       	ldd	r24, Y+9	; 0x09
    190a:	9a 85       	ldd	r25, Y+10	; 0x0a
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e8       	ldi	r20, 0x80	; 128
    1912:	5f e3       	ldi	r21, 0x3F	; 63
    1914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1918:	88 23       	and	r24, r24
    191a:	2c f4       	brge	.+10     	; 0x1926 <IR_MakeDecision+0x192>
		__ticks = 1;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	3f c0       	rjmp	.+126    	; 0x19a4 <IR_MakeDecision+0x210>
	else if (__tmp > 65535)
    1926:	6f 81       	ldd	r22, Y+7	; 0x07
    1928:	78 85       	ldd	r23, Y+8	; 0x08
    192a:	89 85       	ldd	r24, Y+9	; 0x09
    192c:	9a 85       	ldd	r25, Y+10	; 0x0a
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	3f ef       	ldi	r19, 0xFF	; 255
    1932:	4f e7       	ldi	r20, 0x7F	; 127
    1934:	57 e4       	ldi	r21, 0x47	; 71
    1936:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    193a:	18 16       	cp	r1, r24
    193c:	4c f5       	brge	.+82     	; 0x1990 <IR_MakeDecision+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1940:	7c 85       	ldd	r23, Y+12	; 0x0c
    1942:	8d 85       	ldd	r24, Y+13	; 0x0d
    1944:	9e 85       	ldd	r25, Y+14	; 0x0e
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e2       	ldi	r20, 0x20	; 32
    194c:	51 e4       	ldi	r21, 0x41	; 65
    194e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	9e 83       	std	Y+6, r25	; 0x06
    1964:	8d 83       	std	Y+5, r24	; 0x05
    1966:	0f c0       	rjmp	.+30     	; 0x1986 <IR_MakeDecision+0x1f2>
    1968:	88 ec       	ldi	r24, 0xC8	; 200
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	9c 83       	std	Y+4, r25	; 0x04
    196e:	8b 83       	std	Y+3, r24	; 0x03
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <IR_MakeDecision+0x1e0>
    1978:	9c 83       	std	Y+4, r25	; 0x04
    197a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
    197e:	9e 81       	ldd	r25, Y+6	; 0x06
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	69 f7       	brne	.-38     	; 0x1968 <IR_MakeDecision+0x1d4>
    198e:	17 c0       	rjmp	.+46     	; 0x19be <IR_MakeDecision+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1990:	6f 81       	ldd	r22, Y+7	; 0x07
    1992:	78 85       	ldd	r23, Y+8	; 0x08
    1994:	89 85       	ldd	r24, Y+9	; 0x09
    1996:	9a 85       	ldd	r25, Y+10	; 0x0a
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	9e 81       	ldd	r25, Y+6	; 0x06
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <IR_MakeDecision+0x21c>
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <IR_MakeDecision+0x22a>
		//IR_MakeDecision();
		//DC_MOTOR_MoveForward();
	}
	else
	{
		DC_MOTOR_MoveForward();
    19ba:	0e 94 37 07 	call	0xe6e	; 0xe6e <DC_MOTOR_MoveForward>
		//DC_MOTOR_Stop();
	}

}
    19be:	6e 96       	adiw	r28, 0x1e	; 30
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <LCD_SEND_COMMAND>:
#include"LCD.h"
void LCD_SEND_COMMAND(u8 Copy_U8LcdCommand)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	69 97       	sbiw	r28, 0x19	; 25
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
    19e6:	83 e0       	ldi	r24, 0x03	; 3
    19e8:	63 e0       	ldi	r22, 0x03	; 3
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    19f0:	83 e0       	ldi	r24, 0x03	; 3
    19f2:	62 e0       	ldi	r22, 0x02	; 2
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8LcdCommand);
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	69 8d       	ldd	r22, Y+25	; 0x19
    19fe:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_HIGH);
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	62 e0       	ldi	r22, 0x02	; 2
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	a0 e8       	ldi	r26, 0x80	; 128
    1a12:	bf e3       	ldi	r27, 0x3F	; 63
    1a14:	8d 8b       	std	Y+21, r24	; 0x15
    1a16:	9e 8b       	std	Y+22, r25	; 0x16
    1a18:	af 8b       	std	Y+23, r26	; 0x17
    1a1a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a20:	8f 89       	ldd	r24, Y+23	; 0x17
    1a22:	98 8d       	ldd	r25, Y+24	; 0x18
    1a24:	2b ea       	ldi	r18, 0xAB	; 171
    1a26:	3a ea       	ldi	r19, 0xAA	; 170
    1a28:	4a e2       	ldi	r20, 0x2A	; 42
    1a2a:	50 e4       	ldi	r21, 0x40	; 64
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	89 8b       	std	Y+17, r24	; 0x11
    1a36:	9a 8b       	std	Y+18, r25	; 0x12
    1a38:	ab 8b       	std	Y+19, r26	; 0x13
    1a3a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a3c:	69 89       	ldd	r22, Y+17	; 0x11
    1a3e:	7a 89       	ldd	r23, Y+18	; 0x12
    1a40:	8b 89       	ldd	r24, Y+19	; 0x13
    1a42:	9c 89       	ldd	r25, Y+20	; 0x14
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	5f e3       	ldi	r21, 0x3F	; 63
    1a4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	1c f4       	brge	.+6      	; 0x1a5a <LCD_SEND_COMMAND+0x8a>
		__ticks = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	88 8b       	std	Y+16, r24	; 0x10
    1a58:	91 c0       	rjmp	.+290    	; 0x1b7c <LCD_SEND_COMMAND+0x1ac>
	else if (__tmp > 255)
    1a5a:	69 89       	ldd	r22, Y+17	; 0x11
    1a5c:	7a 89       	ldd	r23, Y+18	; 0x12
    1a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a60:	9c 89       	ldd	r25, Y+20	; 0x14
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	53 e4       	ldi	r21, 0x43	; 67
    1a6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	0c f0       	brlt	.+2      	; 0x1a74 <LCD_SEND_COMMAND+0xa4>
    1a72:	7b c0       	rjmp	.+246    	; 0x1b6a <LCD_SEND_COMMAND+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1a74:	6d 89       	ldd	r22, Y+21	; 0x15
    1a76:	7e 89       	ldd	r23, Y+22	; 0x16
    1a78:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4a e7       	ldi	r20, 0x7A	; 122
    1a82:	54 e4       	ldi	r21, 0x44	; 68
    1a84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8c 87       	std	Y+12, r24	; 0x0c
    1a8e:	9d 87       	std	Y+13, r25	; 0x0d
    1a90:	ae 87       	std	Y+14, r26	; 0x0e
    1a92:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a94:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a96:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a98:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4a ef       	ldi	r20, 0xFA	; 250
    1aa2:	54 e4       	ldi	r21, 0x44	; 68
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	88 87       	std	Y+8, r24	; 0x08
    1aae:	99 87       	std	Y+9, r25	; 0x09
    1ab0:	aa 87       	std	Y+10, r26	; 0x0a
    1ab2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ab4:	68 85       	ldd	r22, Y+8	; 0x08
    1ab6:	79 85       	ldd	r23, Y+9	; 0x09
    1ab8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aba:	9b 85       	ldd	r25, Y+11	; 0x0b
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e8       	ldi	r20, 0x80	; 128
    1ac2:	5f e3       	ldi	r21, 0x3F	; 63
    1ac4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac8:	88 23       	and	r24, r24
    1aca:	2c f4       	brge	.+10     	; 0x1ad6 <LCD_SEND_COMMAND+0x106>
		__ticks = 1;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9f 83       	std	Y+7, r25	; 0x07
    1ad2:	8e 83       	std	Y+6, r24	; 0x06
    1ad4:	3f c0       	rjmp	.+126    	; 0x1b54 <LCD_SEND_COMMAND+0x184>
	else if (__tmp > 65535)
    1ad6:	68 85       	ldd	r22, Y+8	; 0x08
    1ad8:	79 85       	ldd	r23, Y+9	; 0x09
    1ada:	8a 85       	ldd	r24, Y+10	; 0x0a
    1adc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	3f ef       	ldi	r19, 0xFF	; 255
    1ae2:	4f e7       	ldi	r20, 0x7F	; 127
    1ae4:	57 e4       	ldi	r21, 0x47	; 71
    1ae6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aea:	18 16       	cp	r1, r24
    1aec:	4c f5       	brge	.+82     	; 0x1b40 <LCD_SEND_COMMAND+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aee:	6c 85       	ldd	r22, Y+12	; 0x0c
    1af0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1af2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1af4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e2       	ldi	r20, 0x20	; 32
    1afc:	51 e4       	ldi	r21, 0x41	; 65
    1afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	bc 01       	movw	r22, r24
    1b08:	cd 01       	movw	r24, r26
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9f 83       	std	Y+7, r25	; 0x07
    1b14:	8e 83       	std	Y+6, r24	; 0x06
    1b16:	0f c0       	rjmp	.+30     	; 0x1b36 <LCD_SEND_COMMAND+0x166>
    1b18:	88 ec       	ldi	r24, 0xC8	; 200
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	9d 83       	std	Y+5, r25	; 0x05
    1b1e:	8c 83       	std	Y+4, r24	; 0x04
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <LCD_SEND_COMMAND+0x154>
    1b28:	9d 83       	std	Y+5, r25	; 0x05
    1b2a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	9f 83       	std	Y+7, r25	; 0x07
    1b34:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b36:	8e 81       	ldd	r24, Y+6	; 0x06
    1b38:	9f 81       	ldd	r25, Y+7	; 0x07
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	69 f7       	brne	.-38     	; 0x1b18 <LCD_SEND_COMMAND+0x148>
    1b3e:	24 c0       	rjmp	.+72     	; 0x1b88 <LCD_SEND_COMMAND+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b40:	68 85       	ldd	r22, Y+8	; 0x08
    1b42:	79 85       	ldd	r23, Y+9	; 0x09
    1b44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9f 83       	std	Y+7, r25	; 0x07
    1b52:	8e 83       	std	Y+6, r24	; 0x06
    1b54:	8e 81       	ldd	r24, Y+6	; 0x06
    1b56:	9f 81       	ldd	r25, Y+7	; 0x07
    1b58:	9b 83       	std	Y+3, r25	; 0x03
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <LCD_SEND_COMMAND+0x190>
    1b64:	9b 83       	std	Y+3, r25	; 0x03
    1b66:	8a 83       	std	Y+2, r24	; 0x02
    1b68:	0f c0       	rjmp	.+30     	; 0x1b88 <LCD_SEND_COMMAND+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b6a:	69 89       	ldd	r22, Y+17	; 0x11
    1b6c:	7a 89       	ldd	r23, Y+18	; 0x12
    1b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b70:	9c 89       	ldd	r25, Y+20	; 0x14
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	88 8b       	std	Y+16, r24	; 0x10
    1b7c:	88 89       	ldd	r24, Y+16	; 0x10
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	8a 95       	dec	r24
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD_SEND_COMMAND+0x1b2>
    1b86:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	62 e0       	ldi	r22, 0x02	; 2
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	//_delay_us(1);

}
    1b92:	69 96       	adiw	r28, 0x19	; 25
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <LCD_SEND_Char>:
void LCD_SEND_Char(u8 Copy_U8LcdData) //to send character
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	69 97       	sbiw	r28, 0x19	; 25
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_HIGH);
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	63 e0       	ldi	r22, 0x03	; 3
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	62 e0       	ldi	r22, 0x02	; 2
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8LcdData);
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_HIGH);
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	62 e0       	ldi	r22, 0x02	; 2
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 e8       	ldi	r26, 0x80	; 128
    1be6:	bf e3       	ldi	r27, 0x3F	; 63
    1be8:	8d 8b       	std	Y+21, r24	; 0x15
    1bea:	9e 8b       	std	Y+22, r25	; 0x16
    1bec:	af 8b       	std	Y+23, r26	; 0x17
    1bee:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bf0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf8:	2b ea       	ldi	r18, 0xAB	; 171
    1bfa:	3a ea       	ldi	r19, 0xAA	; 170
    1bfc:	4a e2       	ldi	r20, 0x2A	; 42
    1bfe:	50 e4       	ldi	r21, 0x40	; 64
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	89 8b       	std	Y+17, r24	; 0x11
    1c0a:	9a 8b       	std	Y+18, r25	; 0x12
    1c0c:	ab 8b       	std	Y+19, r26	; 0x13
    1c0e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c10:	69 89       	ldd	r22, Y+17	; 0x11
    1c12:	7a 89       	ldd	r23, Y+18	; 0x12
    1c14:	8b 89       	ldd	r24, Y+19	; 0x13
    1c16:	9c 89       	ldd	r25, Y+20	; 0x14
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	1c f4       	brge	.+6      	; 0x1c2e <LCD_SEND_Char+0x8a>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	88 8b       	std	Y+16, r24	; 0x10
    1c2c:	91 c0       	rjmp	.+290    	; 0x1d50 <LCD_SEND_Char+0x1ac>
	else if (__tmp > 255)
    1c2e:	69 89       	ldd	r22, Y+17	; 0x11
    1c30:	7a 89       	ldd	r23, Y+18	; 0x12
    1c32:	8b 89       	ldd	r24, Y+19	; 0x13
    1c34:	9c 89       	ldd	r25, Y+20	; 0x14
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	4f e7       	ldi	r20, 0x7F	; 127
    1c3c:	53 e4       	ldi	r21, 0x43	; 67
    1c3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	0c f0       	brlt	.+2      	; 0x1c48 <LCD_SEND_Char+0xa4>
    1c46:	7b c0       	rjmp	.+246    	; 0x1d3e <LCD_SEND_Char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1c48:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a e7       	ldi	r20, 0x7A	; 122
    1c56:	54 e4       	ldi	r21, 0x44	; 68
    1c58:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	8c 87       	std	Y+12, r24	; 0x0c
    1c62:	9d 87       	std	Y+13, r25	; 0x0d
    1c64:	ae 87       	std	Y+14, r26	; 0x0e
    1c66:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c68:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c6a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	4a ef       	ldi	r20, 0xFA	; 250
    1c76:	54 e4       	ldi	r21, 0x44	; 68
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	88 87       	std	Y+8, r24	; 0x08
    1c82:	99 87       	std	Y+9, r25	; 0x09
    1c84:	aa 87       	std	Y+10, r26	; 0x0a
    1c86:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c88:	68 85       	ldd	r22, Y+8	; 0x08
    1c8a:	79 85       	ldd	r23, Y+9	; 0x09
    1c8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e8       	ldi	r20, 0x80	; 128
    1c96:	5f e3       	ldi	r21, 0x3F	; 63
    1c98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c9c:	88 23       	and	r24, r24
    1c9e:	2c f4       	brge	.+10     	; 0x1caa <LCD_SEND_Char+0x106>
		__ticks = 1;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9f 83       	std	Y+7, r25	; 0x07
    1ca6:	8e 83       	std	Y+6, r24	; 0x06
    1ca8:	3f c0       	rjmp	.+126    	; 0x1d28 <LCD_SEND_Char+0x184>
	else if (__tmp > 65535)
    1caa:	68 85       	ldd	r22, Y+8	; 0x08
    1cac:	79 85       	ldd	r23, Y+9	; 0x09
    1cae:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	3f ef       	ldi	r19, 0xFF	; 255
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	57 e4       	ldi	r21, 0x47	; 71
    1cba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cbe:	18 16       	cp	r1, r24
    1cc0:	4c f5       	brge	.+82     	; 0x1d14 <LCD_SEND_Char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cc4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e2       	ldi	r20, 0x20	; 32
    1cd0:	51 e4       	ldi	r21, 0x41	; 65
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9f 83       	std	Y+7, r25	; 0x07
    1ce8:	8e 83       	std	Y+6, r24	; 0x06
    1cea:	0f c0       	rjmp	.+30     	; 0x1d0a <LCD_SEND_Char+0x166>
    1cec:	88 ec       	ldi	r24, 0xC8	; 200
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9d 83       	std	Y+5, r25	; 0x05
    1cf2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <LCD_SEND_Char+0x154>
    1cfc:	9d 83       	std	Y+5, r25	; 0x05
    1cfe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d00:	8e 81       	ldd	r24, Y+6	; 0x06
    1d02:	9f 81       	ldd	r25, Y+7	; 0x07
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	9f 83       	std	Y+7, r25	; 0x07
    1d08:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	69 f7       	brne	.-38     	; 0x1cec <LCD_SEND_Char+0x148>
    1d12:	24 c0       	rjmp	.+72     	; 0x1d5c <LCD_SEND_Char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d14:	68 85       	ldd	r22, Y+8	; 0x08
    1d16:	79 85       	ldd	r23, Y+9	; 0x09
    1d18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9f 83       	std	Y+7, r25	; 0x07
    1d26:	8e 83       	std	Y+6, r24	; 0x06
    1d28:	8e 81       	ldd	r24, Y+6	; 0x06
    1d2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d2c:	9b 83       	std	Y+3, r25	; 0x03
    1d2e:	8a 83       	std	Y+2, r24	; 0x02
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <LCD_SEND_Char+0x190>
    1d38:	9b 83       	std	Y+3, r25	; 0x03
    1d3a:	8a 83       	std	Y+2, r24	; 0x02
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <LCD_SEND_Char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d3e:	69 89       	ldd	r22, Y+17	; 0x11
    1d40:	7a 89       	ldd	r23, Y+18	; 0x12
    1d42:	8b 89       	ldd	r24, Y+19	; 0x13
    1d44:	9c 89       	ldd	r25, Y+20	; 0x14
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	88 8b       	std	Y+16, r24	; 0x10
    1d50:	88 89       	ldd	r24, Y+16	; 0x10
    1d52:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	8a 95       	dec	r24
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_SEND_Char+0x1b2>
    1d5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	62 e0       	ldi	r22, 0x02	; 2
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	//_delay_us(1);

}
    1d66:	69 96       	adiw	r28, 0x19	; 25
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <LCD_VidInit>:
void LCD_VidInit(void)
{
    1d78:	0f 93       	push	r16
    1d7a:	1f 93       	push	r17
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	cc 54       	subi	r28, 0x4C	; 76
    1d86:	d0 40       	sbci	r29, 0x00	; 0
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_DATA_PORT,DIO_ALL_OUTPUT);
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	6f ef       	ldi	r22, 0xFF	; 255
    1d96:	0e 94 19 0a 	call	0x1432	; 0x1432 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_OUTPUT);
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	62 e0       	ldi	r22, 0x02	; 2
    1d9e:	41 e0       	ldi	r20, 0x01	; 1
    1da0:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	62 e0       	ldi	r22, 0x02	; 2
    1da8:	41 e0       	ldi	r20, 0x01	; 1
    1daa:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1dae:	83 e0       	ldi	r24, 0x03	; 3
    1db0:	63 e0       	ldi	r22, 0x03	; 3
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>
    1db8:	fe 01       	movw	r30, r28
    1dba:	e7 5b       	subi	r30, 0xB7	; 183
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	ac e0       	ldi	r26, 0x0C	; 12
    1dc4:	b2 e4       	ldi	r27, 0x42	; 66
    1dc6:	80 83       	st	Z, r24
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	a2 83       	std	Z+2, r26	; 0x02
    1dcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	8e 01       	movw	r16, r28
    1dd0:	0b 5b       	subi	r16, 0xBB	; 187
    1dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e7 5b       	subi	r30, 0xB7	; 183
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	4a ef       	ldi	r20, 0xFA	; 250
    1de8:	54 e4       	ldi	r21, 0x44	; 68
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	f8 01       	movw	r30, r16
    1df4:	80 83       	st	Z, r24
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	a2 83       	std	Z+2, r26	; 0x02
    1dfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	eb 5b       	subi	r30, 0xBB	; 187
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	44 f4       	brge	.+16     	; 0x1e2a <LCD_VidInit+0xb2>
		__ticks = 1;
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ed 5b       	subi	r30, 0xBD	; 189
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	80 83       	st	Z, r24
    1e28:	64 c0       	rjmp	.+200    	; 0x1ef2 <LCD_VidInit+0x17a>
	else if (__tmp > 65535)
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	eb 5b       	subi	r30, 0xBB	; 187
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	0c f0       	brlt	.+2      	; 0x1e4a <LCD_VidInit+0xd2>
    1e48:	43 c0       	rjmp	.+134    	; 0x1ed0 <LCD_VidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e7 5b       	subi	r30, 0xB7	; 183
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	8e 01       	movw	r16, r28
    1e6a:	0d 5b       	subi	r16, 0xBD	; 189
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	91 83       	std	Z+1, r25	; 0x01
    1e7e:	80 83       	st	Z, r24
    1e80:	1f c0       	rjmp	.+62     	; 0x1ec0 <LCD_VidInit+0x148>
    1e82:	fe 01       	movw	r30, r28
    1e84:	ef 5b       	subi	r30, 0xBF	; 191
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	88 ec       	ldi	r24, 0xC8	; 200
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e90:	fe 01       	movw	r30, r28
    1e92:	ef 5b       	subi	r30, 0xBF	; 191
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_VidInit+0x122>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	ef 5b       	subi	r30, 0xBF	; 191
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	de 01       	movw	r26, r28
    1eaa:	ad 5b       	subi	r26, 0xBD	; 189
    1eac:	bf 4f       	sbci	r27, 0xFF	; 255
    1eae:	fe 01       	movw	r30, r28
    1eb0:	ed 5b       	subi	r30, 0xBD	; 189
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	11 96       	adiw	r26, 0x01	; 1
    1ebc:	9c 93       	st	X, r25
    1ebe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	ed 5b       	subi	r30, 0xBD	; 189
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	d1 f6       	brne	.-76     	; 0x1e82 <LCD_VidInit+0x10a>
    1ece:	24 c0       	rjmp	.+72     	; 0x1f18 <LCD_VidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed0:	8e 01       	movw	r16, r28
    1ed2:	0d 5b       	subi	r16, 0xBD	; 189
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	eb 5b       	subi	r30, 0xBB	; 187
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	f8 01       	movw	r30, r16
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	80 83       	st	Z, r24
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	ed 5b       	subi	r30, 0xBD	; 189
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	80 81       	ld	r24, Z
    1efa:	91 81       	ldd	r25, Z+1	; 0x01
    1efc:	fe 01       	movw	r30, r28
    1efe:	ff 96       	adiw	r30, 0x3f	; 63
    1f00:	91 83       	std	Z+1, r25	; 0x01
    1f02:	80 83       	st	Z, r24
    1f04:	fe 01       	movw	r30, r28
    1f06:	ff 96       	adiw	r30, 0x3f	; 63
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <LCD_VidInit+0x194>
    1f10:	fe 01       	movw	r30, r28
    1f12:	ff 96       	adiw	r30, 0x3f	; 63
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	80 83       	st	Z, r24
	//DELAY MORE THAN 30 MS
	_delay_ms(35);

	LCD_SEND_COMMAND(0b00111000); //0011NFXX ,    N=HOW MANY LINES YOU WANT TO USE(1)  ,   F= FONT SIZE(0=5*7)
    1f18:	88 e3       	ldi	r24, 0x38	; 56
    1f1a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LCD_SEND_COMMAND>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a8 e4       	ldi	r26, 0x48	; 72
    1f24:	b2 e4       	ldi	r27, 0x42	; 66
    1f26:	8b af       	std	Y+59, r24	; 0x3b
    1f28:	9c af       	std	Y+60, r25	; 0x3c
    1f2a:	ad af       	std	Y+61, r26	; 0x3d
    1f2c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f2e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f30:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f32:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f34:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f36:	2b ea       	ldi	r18, 0xAB	; 171
    1f38:	3a ea       	ldi	r19, 0xAA	; 170
    1f3a:	4a e2       	ldi	r20, 0x2A	; 42
    1f3c:	50 e4       	ldi	r21, 0x40	; 64
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	8f ab       	std	Y+55, r24	; 0x37
    1f48:	98 af       	std	Y+56, r25	; 0x38
    1f4a:	a9 af       	std	Y+57, r26	; 0x39
    1f4c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1f4e:	6f a9       	ldd	r22, Y+55	; 0x37
    1f50:	78 ad       	ldd	r23, Y+56	; 0x38
    1f52:	89 ad       	ldd	r24, Y+57	; 0x39
    1f54:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e8       	ldi	r20, 0x80	; 128
    1f5c:	5f e3       	ldi	r21, 0x3F	; 63
    1f5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f62:	88 23       	and	r24, r24
    1f64:	1c f4       	brge	.+6      	; 0x1f6c <LCD_VidInit+0x1f4>
		__ticks = 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	8e ab       	std	Y+54, r24	; 0x36
    1f6a:	91 c0       	rjmp	.+290    	; 0x208e <LCD_VidInit+0x316>
	else if (__tmp > 255)
    1f6c:	6f a9       	ldd	r22, Y+55	; 0x37
    1f6e:	78 ad       	ldd	r23, Y+56	; 0x38
    1f70:	89 ad       	ldd	r24, Y+57	; 0x39
    1f72:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	53 e4       	ldi	r21, 0x43	; 67
    1f7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	0c f0       	brlt	.+2      	; 0x1f86 <LCD_VidInit+0x20e>
    1f84:	7b c0       	rjmp	.+246    	; 0x207c <LCD_VidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1f86:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f88:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	4a e7       	ldi	r20, 0x7A	; 122
    1f94:	54 e4       	ldi	r21, 0x44	; 68
    1f96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	8a ab       	std	Y+50, r24	; 0x32
    1fa0:	9b ab       	std	Y+51, r25	; 0x33
    1fa2:	ac ab       	std	Y+52, r26	; 0x34
    1fa4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa6:	6a a9       	ldd	r22, Y+50	; 0x32
    1fa8:	7b a9       	ldd	r23, Y+51	; 0x33
    1faa:	8c a9       	ldd	r24, Y+52	; 0x34
    1fac:	9d a9       	ldd	r25, Y+53	; 0x35
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	4a ef       	ldi	r20, 0xFA	; 250
    1fb4:	54 e4       	ldi	r21, 0x44	; 68
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	8e a7       	std	Y+46, r24	; 0x2e
    1fc0:	9f a7       	std	Y+47, r25	; 0x2f
    1fc2:	a8 ab       	std	Y+48, r26	; 0x30
    1fc4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1fc6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fc8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fca:	88 a9       	ldd	r24, Y+48	; 0x30
    1fcc:	99 a9       	ldd	r25, Y+49	; 0x31
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	2c f4       	brge	.+10     	; 0x1fe8 <LCD_VidInit+0x270>
		__ticks = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9d a7       	std	Y+45, r25	; 0x2d
    1fe4:	8c a7       	std	Y+44, r24	; 0x2c
    1fe6:	3f c0       	rjmp	.+126    	; 0x2066 <LCD_VidInit+0x2ee>
	else if (__tmp > 65535)
    1fe8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fea:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fec:	88 a9       	ldd	r24, Y+48	; 0x30
    1fee:	99 a9       	ldd	r25, Y+49	; 0x31
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	4c f5       	brge	.+82     	; 0x2052 <LCD_VidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2000:	6a a9       	ldd	r22, Y+50	; 0x32
    2002:	7b a9       	ldd	r23, Y+51	; 0x33
    2004:	8c a9       	ldd	r24, Y+52	; 0x34
    2006:	9d a9       	ldd	r25, Y+53	; 0x35
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e2       	ldi	r20, 0x20	; 32
    200e:	51 e4       	ldi	r21, 0x41	; 65
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	9d a7       	std	Y+45, r25	; 0x2d
    2026:	8c a7       	std	Y+44, r24	; 0x2c
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <LCD_VidInit+0x2d0>
    202a:	88 ec       	ldi	r24, 0xC8	; 200
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9b a7       	std	Y+43, r25	; 0x2b
    2030:	8a a7       	std	Y+42, r24	; 0x2a
    2032:	8a a5       	ldd	r24, Y+42	; 0x2a
    2034:	9b a5       	ldd	r25, Y+43	; 0x2b
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <LCD_VidInit+0x2be>
    203a:	9b a7       	std	Y+43, r25	; 0x2b
    203c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2040:	9d a5       	ldd	r25, Y+45	; 0x2d
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	9d a7       	std	Y+45, r25	; 0x2d
    2046:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2048:	8c a5       	ldd	r24, Y+44	; 0x2c
    204a:	9d a5       	ldd	r25, Y+45	; 0x2d
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	69 f7       	brne	.-38     	; 0x202a <LCD_VidInit+0x2b2>
    2050:	24 c0       	rjmp	.+72     	; 0x209a <LCD_VidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2052:	6e a5       	ldd	r22, Y+46	; 0x2e
    2054:	7f a5       	ldd	r23, Y+47	; 0x2f
    2056:	88 a9       	ldd	r24, Y+48	; 0x30
    2058:	99 a9       	ldd	r25, Y+49	; 0x31
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9d a7       	std	Y+45, r25	; 0x2d
    2064:	8c a7       	std	Y+44, r24	; 0x2c
    2066:	8c a5       	ldd	r24, Y+44	; 0x2c
    2068:	9d a5       	ldd	r25, Y+45	; 0x2d
    206a:	99 a7       	std	Y+41, r25	; 0x29
    206c:	88 a7       	std	Y+40, r24	; 0x28
    206e:	88 a5       	ldd	r24, Y+40	; 0x28
    2070:	99 a5       	ldd	r25, Y+41	; 0x29
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <LCD_VidInit+0x2fa>
    2076:	99 a7       	std	Y+41, r25	; 0x29
    2078:	88 a7       	std	Y+40, r24	; 0x28
    207a:	0f c0       	rjmp	.+30     	; 0x209a <LCD_VidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    207c:	6f a9       	ldd	r22, Y+55	; 0x37
    207e:	78 ad       	ldd	r23, Y+56	; 0x38
    2080:	89 ad       	ldd	r24, Y+57	; 0x39
    2082:	9a ad       	ldd	r25, Y+58	; 0x3a
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	8e ab       	std	Y+54, r24	; 0x36
    208e:	8e a9       	ldd	r24, Y+54	; 0x36
    2090:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2092:	8f a1       	ldd	r24, Y+39	; 0x27
    2094:	8a 95       	dec	r24
    2096:	f1 f7       	brne	.-4      	; 0x2094 <LCD_VidInit+0x31c>
    2098:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50); // DELAY MORE THAN 39 MICRO SEC
	LCD_SEND_COMMAND(0b00001100);  //00001DCB , C = LIKE FLAF WHEN TO STOP(OFF) , B= BLANKING , D= DISPLAY
    209a:	8c e0       	ldi	r24, 0x0C	; 12
    209c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LCD_SEND_COMMAND>
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	a8 e4       	ldi	r26, 0x48	; 72
    20a6:	b2 e4       	ldi	r27, 0x42	; 66
    20a8:	8b a3       	std	Y+35, r24	; 0x23
    20aa:	9c a3       	std	Y+36, r25	; 0x24
    20ac:	ad a3       	std	Y+37, r26	; 0x25
    20ae:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20b0:	6b a1       	ldd	r22, Y+35	; 0x23
    20b2:	7c a1       	ldd	r23, Y+36	; 0x24
    20b4:	8d a1       	ldd	r24, Y+37	; 0x25
    20b6:	9e a1       	ldd	r25, Y+38	; 0x26
    20b8:	2b ea       	ldi	r18, 0xAB	; 171
    20ba:	3a ea       	ldi	r19, 0xAA	; 170
    20bc:	4a e2       	ldi	r20, 0x2A	; 42
    20be:	50 e4       	ldi	r21, 0x40	; 64
    20c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	8f 8f       	std	Y+31, r24	; 0x1f
    20ca:	98 a3       	std	Y+32, r25	; 0x20
    20cc:	a9 a3       	std	Y+33, r26	; 0x21
    20ce:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    20d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20d2:	78 a1       	ldd	r23, Y+32	; 0x20
    20d4:	89 a1       	ldd	r24, Y+33	; 0x21
    20d6:	9a a1       	ldd	r25, Y+34	; 0x22
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e4:	88 23       	and	r24, r24
    20e6:	1c f4       	brge	.+6      	; 0x20ee <LCD_VidInit+0x376>
		__ticks = 1;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	8e 8f       	std	Y+30, r24	; 0x1e
    20ec:	91 c0       	rjmp	.+290    	; 0x2210 <LCD_VidInit+0x498>
	else if (__tmp > 255)
    20ee:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20f0:	78 a1       	ldd	r23, Y+32	; 0x20
    20f2:	89 a1       	ldd	r24, Y+33	; 0x21
    20f4:	9a a1       	ldd	r25, Y+34	; 0x22
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	53 e4       	ldi	r21, 0x43	; 67
    20fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	0c f0       	brlt	.+2      	; 0x2108 <LCD_VidInit+0x390>
    2106:	7b c0       	rjmp	.+246    	; 0x21fe <LCD_VidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    2108:	6b a1       	ldd	r22, Y+35	; 0x23
    210a:	7c a1       	ldd	r23, Y+36	; 0x24
    210c:	8d a1       	ldd	r24, Y+37	; 0x25
    210e:	9e a1       	ldd	r25, Y+38	; 0x26
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a e7       	ldi	r20, 0x7A	; 122
    2116:	54 e4       	ldi	r21, 0x44	; 68
    2118:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8a 8f       	std	Y+26, r24	; 0x1a
    2122:	9b 8f       	std	Y+27, r25	; 0x1b
    2124:	ac 8f       	std	Y+28, r26	; 0x1c
    2126:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	6a 8d       	ldd	r22, Y+26	; 0x1a
    212a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    212c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    212e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a ef       	ldi	r20, 0xFA	; 250
    2136:	54 e4       	ldi	r21, 0x44	; 68
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8e 8b       	std	Y+22, r24	; 0x16
    2142:	9f 8b       	std	Y+23, r25	; 0x17
    2144:	a8 8f       	std	Y+24, r26	; 0x18
    2146:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2148:	6e 89       	ldd	r22, Y+22	; 0x16
    214a:	7f 89       	ldd	r23, Y+23	; 0x17
    214c:	88 8d       	ldd	r24, Y+24	; 0x18
    214e:	99 8d       	ldd	r25, Y+25	; 0x19
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    215c:	88 23       	and	r24, r24
    215e:	2c f4       	brge	.+10     	; 0x216a <LCD_VidInit+0x3f2>
		__ticks = 1;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9d 8b       	std	Y+21, r25	; 0x15
    2166:	8c 8b       	std	Y+20, r24	; 0x14
    2168:	3f c0       	rjmp	.+126    	; 0x21e8 <LCD_VidInit+0x470>
	else if (__tmp > 65535)
    216a:	6e 89       	ldd	r22, Y+22	; 0x16
    216c:	7f 89       	ldd	r23, Y+23	; 0x17
    216e:	88 8d       	ldd	r24, Y+24	; 0x18
    2170:	99 8d       	ldd	r25, Y+25	; 0x19
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	4c f5       	brge	.+82     	; 0x21d4 <LCD_VidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2184:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2186:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2188:	9d 8d       	ldd	r25, Y+29	; 0x1d
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e2       	ldi	r20, 0x20	; 32
    2190:	51 e4       	ldi	r21, 0x41	; 65
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9d 8b       	std	Y+21, r25	; 0x15
    21a8:	8c 8b       	std	Y+20, r24	; 0x14
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <LCD_VidInit+0x452>
    21ac:	88 ec       	ldi	r24, 0xC8	; 200
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9b 8b       	std	Y+19, r25	; 0x13
    21b2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21b4:	8a 89       	ldd	r24, Y+18	; 0x12
    21b6:	9b 89       	ldd	r25, Y+19	; 0x13
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <LCD_VidInit+0x440>
    21bc:	9b 8b       	std	Y+19, r25	; 0x13
    21be:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	8c 89       	ldd	r24, Y+20	; 0x14
    21c2:	9d 89       	ldd	r25, Y+21	; 0x15
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	9d 8b       	std	Y+21, r25	; 0x15
    21c8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	8c 89       	ldd	r24, Y+20	; 0x14
    21cc:	9d 89       	ldd	r25, Y+21	; 0x15
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	69 f7       	brne	.-38     	; 0x21ac <LCD_VidInit+0x434>
    21d2:	24 c0       	rjmp	.+72     	; 0x221c <LCD_VidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d4:	6e 89       	ldd	r22, Y+22	; 0x16
    21d6:	7f 89       	ldd	r23, Y+23	; 0x17
    21d8:	88 8d       	ldd	r24, Y+24	; 0x18
    21da:	99 8d       	ldd	r25, Y+25	; 0x19
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9d 8b       	std	Y+21, r25	; 0x15
    21e6:	8c 8b       	std	Y+20, r24	; 0x14
    21e8:	8c 89       	ldd	r24, Y+20	; 0x14
    21ea:	9d 89       	ldd	r25, Y+21	; 0x15
    21ec:	99 8b       	std	Y+17, r25	; 0x11
    21ee:	88 8b       	std	Y+16, r24	; 0x10
    21f0:	88 89       	ldd	r24, Y+16	; 0x10
    21f2:	99 89       	ldd	r25, Y+17	; 0x11
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <LCD_VidInit+0x47c>
    21f8:	99 8b       	std	Y+17, r25	; 0x11
    21fa:	88 8b       	std	Y+16, r24	; 0x10
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <LCD_VidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2200:	78 a1       	ldd	r23, Y+32	; 0x20
    2202:	89 a1       	ldd	r24, Y+33	; 0x21
    2204:	9a a1       	ldd	r25, Y+34	; 0x22
    2206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8e 8f       	std	Y+30, r24	; 0x1e
    2210:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2212:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2214:	8f 85       	ldd	r24, Y+15	; 0x0f
    2216:	8a 95       	dec	r24
    2218:	f1 f7       	brne	.-4      	; 0x2216 <LCD_VidInit+0x49e>
    221a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_SEND_COMMAND(0b00000001);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LCD_SEND_COMMAND>
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	a0 e0       	ldi	r26, 0x00	; 0
    2228:	b0 e4       	ldi	r27, 0x40	; 64
    222a:	8b 87       	std	Y+11, r24	; 0x0b
    222c:	9c 87       	std	Y+12, r25	; 0x0c
    222e:	ad 87       	std	Y+13, r26	; 0x0d
    2230:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2232:	6b 85       	ldd	r22, Y+11	; 0x0b
    2234:	7c 85       	ldd	r23, Y+12	; 0x0c
    2236:	8d 85       	ldd	r24, Y+13	; 0x0d
    2238:	9e 85       	ldd	r25, Y+14	; 0x0e
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	4a ef       	ldi	r20, 0xFA	; 250
    2240:	54 e4       	ldi	r21, 0x44	; 68
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	8f 83       	std	Y+7, r24	; 0x07
    224c:	98 87       	std	Y+8, r25	; 0x08
    224e:	a9 87       	std	Y+9, r26	; 0x09
    2250:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2252:	6f 81       	ldd	r22, Y+7	; 0x07
    2254:	78 85       	ldd	r23, Y+8	; 0x08
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e8       	ldi	r20, 0x80	; 128
    2260:	5f e3       	ldi	r21, 0x3F	; 63
    2262:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2266:	88 23       	and	r24, r24
    2268:	2c f4       	brge	.+10     	; 0x2274 <LCD_VidInit+0x4fc>
		__ticks = 1;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	3f c0       	rjmp	.+126    	; 0x22f2 <LCD_VidInit+0x57a>
	else if (__tmp > 65535)
    2274:	6f 81       	ldd	r22, Y+7	; 0x07
    2276:	78 85       	ldd	r23, Y+8	; 0x08
    2278:	89 85       	ldd	r24, Y+9	; 0x09
    227a:	9a 85       	ldd	r25, Y+10	; 0x0a
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	3f ef       	ldi	r19, 0xFF	; 255
    2280:	4f e7       	ldi	r20, 0x7F	; 127
    2282:	57 e4       	ldi	r21, 0x47	; 71
    2284:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2288:	18 16       	cp	r1, r24
    228a:	4c f5       	brge	.+82     	; 0x22de <LCD_VidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	6b 85       	ldd	r22, Y+11	; 0x0b
    228e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2290:	8d 85       	ldd	r24, Y+13	; 0x0d
    2292:	9e 85       	ldd	r25, Y+14	; 0x0e
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e2       	ldi	r20, 0x20	; 32
    229a:	51 e4       	ldi	r21, 0x41	; 65
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
    22b4:	0f c0       	rjmp	.+30     	; 0x22d4 <LCD_VidInit+0x55c>
    22b6:	88 ec       	ldi	r24, 0xC8	; 200
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9c 83       	std	Y+4, r25	; 0x04
    22bc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <LCD_VidInit+0x54a>
    22c6:	9c 83       	std	Y+4, r25	; 0x04
    22c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ca:	8d 81       	ldd	r24, Y+5	; 0x05
    22cc:	9e 81       	ldd	r25, Y+6	; 0x06
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	8d 81       	ldd	r24, Y+5	; 0x05
    22d6:	9e 81       	ldd	r25, Y+6	; 0x06
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	69 f7       	brne	.-38     	; 0x22b6 <LCD_VidInit+0x53e>
    22dc:	14 c0       	rjmp	.+40     	; 0x2306 <LCD_VidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	9a 81       	ldd	r25, Y+2	; 0x02
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_VidInit+0x586>
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // delay more than 1.5 ms
	LCD_SEND_COMMAND(0b00000110); //write from left to right
    2306:	86 e0       	ldi	r24, 0x06	; 6
    2308:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LCD_SEND_COMMAND>

}
    230c:	c4 5b       	subi	r28, 0xB4	; 180
    230e:	df 4f       	sbci	r29, 0xFF	; 255
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	08 95       	ret

00002324 <LCD_VidSendStrig>:

void LCD_VidSendStrig(u8 * Copy_Pu8String)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <LCD_VidSendStrig+0x6>
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	0a c0       	rjmp	.+20     	; 0x2348 <LCD_VidSendStrig+0x24>

	while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
	{
		LCD_SEND_Char(*Copy_Pu8String);
    2334:	e9 81       	ldd	r30, Y+1	; 0x01
    2336:	fa 81       	ldd	r31, Y+2	; 0x02
    2338:	80 81       	ld	r24, Z
    233a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_SEND_Char>
		Copy_Pu8String++;
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	9a 81       	ldd	r25, Y+2	; 0x02
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	9a 83       	std	Y+2, r25	; 0x02
    2346:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_VidSendStrig(u8 * Copy_Pu8String)
{

	while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
    2348:	e9 81       	ldd	r30, Y+1	; 0x01
    234a:	fa 81       	ldd	r31, Y+2	; 0x02
    234c:	80 81       	ld	r24, Z
    234e:	88 23       	and	r24, r24
    2350:	89 f7       	brne	.-30     	; 0x2334 <LCD_VidSendStrig+0x10>
	{
		LCD_SEND_Char(*Copy_Pu8String);
		Copy_Pu8String++;

	}
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <LCD_VidGoTOLocation>:

void LCD_VidGoTOLocation(u8 Copy_U8RowNumber  , u8 Copy_U8ColNumber)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	62 97       	sbiw	r28, 0x12	; 18
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	8f 87       	std	Y+15, r24	; 0x0f
    2372:	68 8b       	std	Y+16, r22	; 0x10
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a0 e0       	ldi	r26, 0x00	; 0
    237a:	b0 e4       	ldi	r27, 0x40	; 64
    237c:	8b 87       	std	Y+11, r24	; 0x0b
    237e:	9c 87       	std	Y+12, r25	; 0x0c
    2380:	ad 87       	std	Y+13, r26	; 0x0d
    2382:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2384:	6b 85       	ldd	r22, Y+11	; 0x0b
    2386:	7c 85       	ldd	r23, Y+12	; 0x0c
    2388:	8d 85       	ldd	r24, Y+13	; 0x0d
    238a:	9e 85       	ldd	r25, Y+14	; 0x0e
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	4a ef       	ldi	r20, 0xFA	; 250
    2392:	54 e4       	ldi	r21, 0x44	; 68
    2394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	8f 83       	std	Y+7, r24	; 0x07
    239e:	98 87       	std	Y+8, r25	; 0x08
    23a0:	a9 87       	std	Y+9, r26	; 0x09
    23a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a4:	6f 81       	ldd	r22, Y+7	; 0x07
    23a6:	78 85       	ldd	r23, Y+8	; 0x08
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e8       	ldi	r20, 0x80	; 128
    23b2:	5f e3       	ldi	r21, 0x3F	; 63
    23b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b8:	88 23       	and	r24, r24
    23ba:	2c f4       	brge	.+10     	; 0x23c6 <LCD_VidGoTOLocation+0x6a>
		__ticks = 1;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	8d 83       	std	Y+5, r24	; 0x05
    23c4:	3f c0       	rjmp	.+126    	; 0x2444 <LCD_VidGoTOLocation+0xe8>
	else if (__tmp > 65535)
    23c6:	6f 81       	ldd	r22, Y+7	; 0x07
    23c8:	78 85       	ldd	r23, Y+8	; 0x08
    23ca:	89 85       	ldd	r24, Y+9	; 0x09
    23cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	3f ef       	ldi	r19, 0xFF	; 255
    23d2:	4f e7       	ldi	r20, 0x7F	; 127
    23d4:	57 e4       	ldi	r21, 0x47	; 71
    23d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23da:	18 16       	cp	r1, r24
    23dc:	4c f5       	brge	.+82     	; 0x2430 <LCD_VidGoTOLocation+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23de:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e2       	ldi	r20, 0x20	; 32
    23ec:	51 e4       	ldi	r21, 0x41	; 65
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	bc 01       	movw	r22, r24
    23f8:	cd 01       	movw	r24, r26
    23fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
    2406:	0f c0       	rjmp	.+30     	; 0x2426 <LCD_VidGoTOLocation+0xca>
    2408:	88 ec       	ldi	r24, 0xC8	; 200
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9c 83       	std	Y+4, r25	; 0x04
    240e:	8b 83       	std	Y+3, r24	; 0x03
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	9c 81       	ldd	r25, Y+4	; 0x04
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <LCD_VidGoTOLocation+0xb8>
    2418:	9c 83       	std	Y+4, r25	; 0x04
    241a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241c:	8d 81       	ldd	r24, Y+5	; 0x05
    241e:	9e 81       	ldd	r25, Y+6	; 0x06
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	9e 83       	std	Y+6, r25	; 0x06
    2424:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	69 f7       	brne	.-38     	; 0x2408 <LCD_VidGoTOLocation+0xac>
    242e:	14 c0       	rjmp	.+40     	; 0x2458 <LCD_VidGoTOLocation+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2430:	6f 81       	ldd	r22, Y+7	; 0x07
    2432:	78 85       	ldd	r23, Y+8	; 0x08
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	9e 81       	ldd	r25, Y+6	; 0x06
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	9a 81       	ldd	r25, Y+2	; 0x02
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <LCD_VidGoTOLocation+0xf4>
    2454:	9a 83       	std	Y+2, r25	; 0x02
    2456:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	switch(Copy_U8RowNumber)
    2458:	8f 85       	ldd	r24, Y+15	; 0x0f
    245a:	28 2f       	mov	r18, r24
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	3a 8b       	std	Y+18, r19	; 0x12
    2460:	29 8b       	std	Y+17, r18	; 0x11
    2462:	89 89       	ldd	r24, Y+17	; 0x11
    2464:	9a 89       	ldd	r25, Y+18	; 0x12
    2466:	81 30       	cpi	r24, 0x01	; 1
    2468:	91 05       	cpc	r25, r1
    246a:	31 f0       	breq	.+12     	; 0x2478 <LCD_VidGoTOLocation+0x11c>
    246c:	29 89       	ldd	r18, Y+17	; 0x11
    246e:	3a 89       	ldd	r19, Y+18	; 0x12
    2470:	22 30       	cpi	r18, 0x02	; 2
    2472:	31 05       	cpc	r19, r1
    2474:	31 f0       	breq	.+12     	; 0x2482 <LCD_VidGoTOLocation+0x126>
    2476:	09 c0       	rjmp	.+18     	; 0x248a <LCD_VidGoTOLocation+0x12e>
		{

		    case LCD_RowOne: LCD_SEND_COMMAND(LCD_RowOneStart+ Copy_U8ColNumber);
    2478:	88 89       	ldd	r24, Y+16	; 0x10
    247a:	80 58       	subi	r24, 0x80	; 128
    247c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LCD_SEND_COMMAND>
    2480:	04 c0       	rjmp	.+8      	; 0x248a <LCD_VidGoTOLocation+0x12e>
		                     break;
		    case LCD_RowTwo: LCD_SEND_COMMAND(LCD_RowTwoStart + Copy_U8ColNumber);
    2482:	88 89       	ldd	r24, Y+16	; 0x10
    2484:	80 54       	subi	r24, 0x40	; 64
    2486:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <LCD_SEND_COMMAND>
		                     break;
		}

}
    248a:	62 96       	adiw	r28, 0x12	; 18
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <LCD_VidSendNumber>:

void LCD_VidSendNumber(u32 Copy_U32Number)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	2c 97       	sbiw	r28, 0x0c	; 12
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	69 87       	std	Y+9, r22	; 0x09
    24b2:	7a 87       	std	Y+10, r23	; 0x0a
    24b4:	8b 87       	std	Y+11, r24	; 0x0b
    24b6:	9c 87       	std	Y+12, r25	; 0x0c
	/*u8 nums[32];
	itoa(Copy_U32Number, nums , 10);  //convert integer data type to string datatype ,10 (base-DEC)
	LCD_VidSendStrig(nums);*/

	u32 Local_u32Counter=1 , Local_u32Digit=0;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a0 e0       	ldi	r26, 0x00	; 0
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	8d 83       	std	Y+5, r24	; 0x05
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	af 83       	std	Y+7, r26	; 0x07
    24c6:	b8 87       	std	Y+8, r27	; 0x08
    24c8:	19 82       	std	Y+1, r1	; 0x01
    24ca:	1a 82       	std	Y+2, r1	; 0x02
    24cc:	1b 82       	std	Y+3, r1	; 0x03
    24ce:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_U32Number == 0)
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    24d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	a1 05       	cpc	r26, r1
    24dc:	b1 05       	cpc	r27, r1
    24de:	b1 f4       	brne	.+44     	; 0x250c <LCD_VidSendNumber+0x70>
	{
		LCD_SEND_Char('0');
    24e0:	80 e3       	ldi	r24, 0x30	; 48
    24e2:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_SEND_Char>
    24e6:	7a c0       	rjmp	.+244    	; 0x25dc <LCD_VidSendNumber+0x140>
	}
	else
	{
		while (Copy_U32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	af 81       	ldd	r26, Y+7	; 0x07
    24ee:	b8 85       	ldd	r27, Y+8	; 0x08
    24f0:	2a e0       	ldi	r18, 0x0A	; 10
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e0       	ldi	r20, 0x00	; 0
    24f6:	50 e0       	ldi	r21, 0x00	; 0
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsi3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	af 83       	std	Y+7, r26	; 0x07
    250a:	b8 87       	std	Y+8, r27	; 0x08
	{
		LCD_SEND_Char('0');
	}
	else
	{
		while (Copy_U32Number/Local_u32Counter != 0)
    250c:	89 85       	ldd	r24, Y+9	; 0x09
    250e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2510:	ab 85       	ldd	r26, Y+11	; 0x0b
    2512:	bc 85       	ldd	r27, Y+12	; 0x0c
    2514:	2d 81       	ldd	r18, Y+5	; 0x05
    2516:	3e 81       	ldd	r19, Y+6	; 0x06
    2518:	4f 81       	ldd	r20, Y+7	; 0x07
    251a:	58 85       	ldd	r21, Y+8	; 0x08
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
    2524:	da 01       	movw	r26, r20
    2526:	c9 01       	movw	r24, r18
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	a1 05       	cpc	r26, r1
    252c:	b1 05       	cpc	r27, r1
    252e:	e1 f6       	brne	.-72     	; 0x24e8 <LCD_VidSendNumber+0x4c>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	af 81       	ldd	r26, Y+7	; 0x07
    2536:	b8 85       	ldd	r27, Y+8	; 0x08
    2538:	2a e0       	ldi	r18, 0x0A	; 10
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
    2548:	da 01       	movw	r26, r20
    254a:	c9 01       	movw	r24, r18
    254c:	8d 83       	std	Y+5, r24	; 0x05
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	af 83       	std	Y+7, r26	; 0x07
    2552:	b8 87       	std	Y+8, r27	; 0x08
    2554:	3a c0       	rjmp	.+116    	; 0x25ca <LCD_VidSendNumber+0x12e>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_U32Number/Local_u32Counter;
    2556:	89 85       	ldd	r24, Y+9	; 0x09
    2558:	9a 85       	ldd	r25, Y+10	; 0x0a
    255a:	ab 85       	ldd	r26, Y+11	; 0x0b
    255c:	bc 85       	ldd	r27, Y+12	; 0x0c
    255e:	2d 81       	ldd	r18, Y+5	; 0x05
    2560:	3e 81       	ldd	r19, Y+6	; 0x06
    2562:	4f 81       	ldd	r20, Y+7	; 0x07
    2564:	58 85       	ldd	r21, Y+8	; 0x08
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
    256e:	da 01       	movw	r26, r20
    2570:	c9 01       	movw	r24, r18
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	9a 83       	std	Y+2, r25	; 0x02
    2576:	ab 83       	std	Y+3, r26	; 0x03
    2578:	bc 83       	std	Y+4, r27	; 0x04

			LCD_SEND_Char(Local_u32Digit + '0');
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	80 5d       	subi	r24, 0xD0	; 208
    257e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LCD_SEND_Char>

			Copy_U32Number = Copy_U32Number%Local_u32Counter;
    2582:	89 85       	ldd	r24, Y+9	; 0x09
    2584:	9a 85       	ldd	r25, Y+10	; 0x0a
    2586:	ab 85       	ldd	r26, Y+11	; 0x0b
    2588:	bc 85       	ldd	r27, Y+12	; 0x0c
    258a:	2d 81       	ldd	r18, Y+5	; 0x05
    258c:	3e 81       	ldd	r19, Y+6	; 0x06
    258e:	4f 81       	ldd	r20, Y+7	; 0x07
    2590:	58 85       	ldd	r21, Y+8	; 0x08
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	89 87       	std	Y+9, r24	; 0x09
    25a0:	9a 87       	std	Y+10, r25	; 0x0a
    25a2:	ab 87       	std	Y+11, r26	; 0x0b
    25a4:	bc 87       	std	Y+12, r27	; 0x0c

			Local_u32Counter /= 10;
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	af 81       	ldd	r26, Y+7	; 0x07
    25ac:	b8 85       	ldd	r27, Y+8	; 0x08
    25ae:	2a e0       	ldi	r18, 0x0A	; 10
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	bc 01       	movw	r22, r24
    25b8:	cd 01       	movw	r24, r26
    25ba:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
    25be:	da 01       	movw	r26, r20
    25c0:	c9 01       	movw	r24, r18
    25c2:	8d 83       	std	Y+5, r24	; 0x05
    25c4:	9e 83       	std	Y+6, r25	; 0x06
    25c6:	af 83       	std	Y+7, r26	; 0x07
    25c8:	b8 87       	std	Y+8, r27	; 0x08
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	9e 81       	ldd	r25, Y+6	; 0x06
    25ce:	af 81       	ldd	r26, Y+7	; 0x07
    25d0:	b8 85       	ldd	r27, Y+8	; 0x08
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	a1 05       	cpc	r26, r1
    25d6:	b1 05       	cpc	r27, r1
    25d8:	09 f0       	breq	.+2      	; 0x25dc <LCD_VidSendNumber+0x140>
    25da:	bd cf       	rjmp	.-134    	; 0x2556 <LCD_VidSendNumber+0xba>

			Local_u32Counter /= 10;
		}
	}

}
    25dc:	2c 96       	adiw	r28, 0x0c	; 12
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <Timers_VidTimer0Init>:
/*Step 3 in setting call back --> define Global Pointer to function  */
void (*Timer_PFUN)(void);


void Timers_VidTimer0Init()
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
	//CTC MODE
	CLR_BIT(TCCR0,WGM00);
	SET_BIT(TCCR0,WGM01);
#elif Timer0_Mode_Select == Timer0_FastPWM_Mode
	//FAST PWM MODE
	SET_BIT(TCCR0,WGM00);
    25f6:	a3 e5       	ldi	r26, 0x53	; 83
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e3 e5       	ldi	r30, 0x53	; 83
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	80 64       	ori	r24, 0x40	; 64
    2602:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    2604:	a3 e5       	ldi	r26, 0x53	; 83
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e3 e5       	ldi	r30, 0x53	; 83
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	88 60       	ori	r24, 0x08	; 8
    2610:	8c 93       	st	X, r24

#endif


	//SET ON TOP CLLEAR ON COMPARE MODE ==== FOR CONFIGURE THE HARDWARE PIN FOR FAST PWM
	CLR_BIT(TCCR0,COM00);
    2612:	a3 e5       	ldi	r26, 0x53	; 83
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e3 e5       	ldi	r30, 0x53	; 83
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	8f 7e       	andi	r24, 0xEF	; 239
    261e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    2620:	a3 e5       	ldi	r26, 0x53	; 83
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e3 e5       	ldi	r30, 0x53	; 83
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	80 62       	ori	r24, 0x20	; 32
    262c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM00);
		SET_BIT(TCCR0,COM01);

	/*2-GLOBAL Interrupt enable */
	/*FIRST STEP: GIE ENABLE*/
	SET_BIT(SREG, 7);
    262e:	af e5       	ldi	r26, 0x5F	; 95
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	ef e5       	ldi	r30, 0x5F	; 95
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	80 68       	ori	r24, 0x80	; 128
    263a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TIMER0_PRESCALE_Select == TIMER0_PRESCALE_8
	CLR_BIT(TCCR0, CS00);
    263c:	a3 e5       	ldi	r26, 0x53	; 83
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	e3 e5       	ldi	r30, 0x53	; 83
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	8e 7f       	andi	r24, 0xFE	; 254
    2648:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    264a:	a3 e5       	ldi	r26, 0x53	; 83
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e3 e5       	ldi	r30, 0x53	; 83
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	82 60       	ori	r24, 0x02	; 2
    2656:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    2658:	a3 e5       	ldi	r26, 0x53	; 83
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e3 e5       	ldi	r30, 0x53	; 83
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	8b 7f       	andi	r24, 0xFB	; 251
    2664:	8c 93       	st	X, r24
#elif TIMER0_PRESCALE_Select == TIMER0_PRESCALE_1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <Timer0_SETCallBack>:
/*Step 2 in setting call back --> Implement Function to Recive the function from the main */
void Timer0_SETCallBack(void (*TIMER0_PTR)(void))
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	00 d0       	rcall	.+0      	; 0x2672 <Timer0_SETCallBack+0x6>
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	89 83       	std	Y+1, r24	; 0x01
	/*Step 4 in setting call back --> passing the address of the function to the global pointer  */
	Timer_PFUN=TIMER0_PTR;
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	9a 81       	ldd	r25, Y+2	; 0x02
    267e:	90 93 71 01 	sts	0x0171, r25
    2682:	80 93 70 01 	sts	0x0170, r24
}
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret

00002690 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    2690:	1f 92       	push	r1
    2692:	0f 92       	push	r0
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	0f 92       	push	r0
    2698:	11 24       	eor	r1, r1
    269a:	2f 93       	push	r18
    269c:	3f 93       	push	r19
    269e:	4f 93       	push	r20
    26a0:	5f 93       	push	r21
    26a2:	6f 93       	push	r22
    26a4:	7f 93       	push	r23
    26a6:	8f 93       	push	r24
    26a8:	9f 93       	push	r25
    26aa:	af 93       	push	r26
    26ac:	bf 93       	push	r27
    26ae:	ef 93       	push	r30
    26b0:	ff 93       	push	r31
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_U16Counter=0; //U16 BEC WE WANT TO COUNT 3907 SO U8 IS NOT SUIT
		Local_U16Counter++;
    26ba:	80 91 68 01 	lds	r24, 0x0168
    26be:	90 91 69 01 	lds	r25, 0x0169
    26c2:	01 96       	adiw	r24, 0x01	; 1
    26c4:	90 93 69 01 	sts	0x0169, r25
    26c8:	80 93 68 01 	sts	0x0168, r24
		if(Local_U16Counter==7813)  //7813 for 16 bits
    26cc:	80 91 68 01 	lds	r24, 0x0168
    26d0:	90 91 69 01 	lds	r25, 0x0169
    26d4:	2e e1       	ldi	r18, 0x1E	; 30
    26d6:	85 38       	cpi	r24, 0x85	; 133
    26d8:	92 07       	cpc	r25, r18
    26da:	69 f4       	brne	.+26     	; 0x26f6 <__vector_11+0x66>
		{
			Local_U16Counter=0;
    26dc:	10 92 69 01 	sts	0x0169, r1
    26e0:	10 92 68 01 	sts	0x0168, r1
			TCNT0=128;    //FOR 16 BIT
    26e4:	e2 e5       	ldi	r30, 0x52	; 82
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 e8       	ldi	r24, 0x80	; 128
    26ea:	80 83       	st	Z, r24
			//TCNT0=192;
			Timer_PFUN();
    26ec:	e0 91 70 01 	lds	r30, 0x0170
    26f0:	f0 91 71 01 	lds	r31, 0x0171
    26f4:	09 95       	icall
		}
}
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	ff 91       	pop	r31
    26fc:	ef 91       	pop	r30
    26fe:	bf 91       	pop	r27
    2700:	af 91       	pop	r26
    2702:	9f 91       	pop	r25
    2704:	8f 91       	pop	r24
    2706:	7f 91       	pop	r23
    2708:	6f 91       	pop	r22
    270a:	5f 91       	pop	r21
    270c:	4f 91       	pop	r20
    270e:	3f 91       	pop	r19
    2710:	2f 91       	pop	r18
    2712:	0f 90       	pop	r0
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	0f 90       	pop	r0
    2718:	1f 90       	pop	r1
    271a:	18 95       	reti

0000271c <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    271c:	1f 92       	push	r1
    271e:	0f 92       	push	r0
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	0f 92       	push	r0
    2724:	11 24       	eor	r1, r1
    2726:	2f 93       	push	r18
    2728:	3f 93       	push	r19
    272a:	4f 93       	push	r20
    272c:	5f 93       	push	r21
    272e:	6f 93       	push	r22
    2730:	7f 93       	push	r23
    2732:	8f 93       	push	r24
    2734:	9f 93       	push	r25
    2736:	af 93       	push	r26
    2738:	bf 93       	push	r27
    273a:	ef 93       	push	r30
    273c:	ff 93       	push	r31
    273e:	df 93       	push	r29
    2740:	cf 93       	push	r28
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_U16Counter = 0 ;
	Local_U16Counter++ ;
    2746:	80 91 6a 01 	lds	r24, 0x016A
    274a:	90 91 6b 01 	lds	r25, 0x016B
    274e:	01 96       	adiw	r24, 0x01	; 1
    2750:	90 93 6b 01 	sts	0x016B, r25
    2754:	80 93 6a 01 	sts	0x016A, r24

	if( Local_U16Counter == 20000 )
    2758:	80 91 6a 01 	lds	r24, 0x016A
    275c:	90 91 6b 01 	lds	r25, 0x016B
    2760:	2e e4       	ldi	r18, 0x4E	; 78
    2762:	80 32       	cpi	r24, 0x20	; 32
    2764:	92 07       	cpc	r25, r18
    2766:	49 f4       	brne	.+18     	; 0x277a <__vector_10+0x5e>
	{
		Local_U16Counter = 0 ;
    2768:	10 92 6b 01 	sts	0x016B, r1
    276c:	10 92 6a 01 	sts	0x016A, r1

		Timer_PFUN();
    2770:	e0 91 70 01 	lds	r30, 0x0170
    2774:	f0 91 71 01 	lds	r31, 0x0171
    2778:	09 95       	icall
	}
}
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	ff 91       	pop	r31
    2780:	ef 91       	pop	r30
    2782:	bf 91       	pop	r27
    2784:	af 91       	pop	r26
    2786:	9f 91       	pop	r25
    2788:	8f 91       	pop	r24
    278a:	7f 91       	pop	r23
    278c:	6f 91       	pop	r22
    278e:	5f 91       	pop	r21
    2790:	4f 91       	pop	r20
    2792:	3f 91       	pop	r19
    2794:	2f 91       	pop	r18
    2796:	0f 90       	pop	r0
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	0f 90       	pop	r0
    279c:	1f 90       	pop	r1
    279e:	18 95       	reti

000027a0 <Timer0_VidTimer0SetOCR_FASRPWM>:

//FOR FAST PWM
void Timer0_VidTimer0SetOCR_FASRPWM(u8 copy_u8OCR_FASRPWMValue)
{
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	0f 92       	push	r0
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	89 83       	std	Y+1, r24	; 0x01
	OCR0=copy_u8OCR_FASRPWMValue;
    27ac:	ec e5       	ldi	r30, 0x5C	; 92
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	80 83       	st	Z, r24
}
    27b4:	0f 90       	pop	r0
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <USART_VIDInit>:

#include"UART.h"


void USART_VIDInit()
{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <USART_VIDInit+0x6>
    27c2:	0f 92       	push	r0
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_U8UCSRC_VALUE=0b10000000;
    27c8:	80 e8       	ldi	r24, 0x80	; 128
    27ca:	8b 83       	std	Y+3, r24	; 0x03

	u16 Loc_U16BaudRate=BAUD_RATE;
    27cc:	83 e3       	ldi	r24, 0x33	; 51
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	89 83       	std	Y+1, r24	; 0x01
	//TO SET UP THE BAUD RATE TO 9600 at frequency 8MHz
	UBRRL=(u8)Loc_U16BaudRate;
    27d4:	e9 e2       	ldi	r30, 0x29	; 41
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	80 83       	st	Z, r24
	UBRRH=(u8)(Loc_U16BaudRate>>8);
    27dc:	e0 e4       	ldi	r30, 0x40	; 64
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	89 2f       	mov	r24, r25
    27e6:	99 27       	eor	r25, r25
    27e8:	80 83       	st	Z, r24

	//1-UCSRA REGISTER
	//normal speed NOT DOUBLE
	CLR_BIT(UCSRA,U2X);
    27ea:	ab e2       	ldi	r26, 0x2B	; 43
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	eb e2       	ldi	r30, 0x2B	; 43
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	8d 7f       	andi	r24, 0xFD	; 253
    27f6:	8c 93       	st	X, r24
	//DISABLE MULTI PROCESSOR MODE
	CLR_BIT(UCSRA,MPCM);
    27f8:	ab e2       	ldi	r26, 0x2B	; 43
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	eb e2       	ldi	r30, 0x2B	; 43
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	8e 7f       	andi	r24, 0xFE	; 254
    2804:	8c 93       	st	X, r24
	                    //----------------------------
	//2-UCSRB  register
	//WE USE POLLING SYSTEM NOT INTERRUT (IN case of useage interrupt we need to use the GIA)
	//Rx and TX ENABLE
	SET_BIT(UCSRB,RXEN);
    2806:	aa e2       	ldi	r26, 0x2A	; 42
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	ea e2       	ldi	r30, 0x2A	; 42
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	80 61       	ori	r24, 0x10	; 16
    2812:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    2814:	aa e2       	ldi	r26, 0x2A	; 42
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	ea e2       	ldi	r30, 0x2A	; 42
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	88 60       	ori	r24, 0x08	; 8
    2820:	8c 93       	st	X, r24

	//TO SELECT CHAR SIZE (8 BIT)
	CLR_BIT(UCSRB,UCSZ2);
    2822:	aa e2       	ldi	r26, 0x2A	; 42
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	ea e2       	ldi	r30, 0x2A	; 42
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	8b 7f       	andi	r24, 0xFB	; 251
    282e:	8c 93       	st	X, r24
	SET_BIT(Loc_U8UCSRC_VALUE,UCSZ0);
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	82 60       	ori	r24, 0x02	; 2
    2834:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Loc_U8UCSRC_VALUE,UCSZ1);
    2836:	8b 81       	ldd	r24, Y+3	; 0x03
    2838:	84 60       	ori	r24, 0x04	; 4
    283a:	8b 83       	std	Y+3, r24	; 0x03
	           //------------------------------
	//3-UCSAC REGISTER VALUE
	//SELECT ASYNCH
	CLR_BIT(Loc_U8UCSRC_VALUE,UMSEL);
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	8f 7b       	andi	r24, 0xBF	; 191
    2840:	8b 83       	std	Y+3, r24	; 0x03
	//DISABLE PARITY
	CLR_BIT(Loc_U8UCSRC_VALUE,UPM0);
    2842:	8b 81       	ldd	r24, Y+3	; 0x03
    2844:	8f 7e       	andi	r24, 0xEF	; 239
    2846:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Loc_U8UCSRC_VALUE,UPM1);
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	8f 7d       	andi	r24, 0xDF	; 223
    284c:	8b 83       	std	Y+3, r24	; 0x03
	//TWO STOP BITS
	SET_BIT(Loc_U8UCSRC_VALUE,USBS);
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	88 60       	ori	r24, 0x08	; 8
    2852:	8b 83       	std	Y+3, r24	; 0x03

	//UPDATE UCSRC REGISTER
	UCSRC=Loc_U8UCSRC_VALUE;
    2854:	e0 e4       	ldi	r30, 0x40	; 64
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	80 83       	st	Z, r24

}
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <USART_VIDSendChar>:

void USART_VIDSendChar(u8 copy_u8char)
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	0f 92       	push	r0
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	89 83       	std	Y+1, r24	; 0x01
	//check if the UDR register is ready to send
	while(GET_BIT(UCSRA,UDRE)==0);  //POLLINR waiting for the flag the register is ready
    2874:	eb e2       	ldi	r30, 0x2B	; 43
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	82 95       	swap	r24
    287c:	86 95       	lsr	r24
    287e:	87 70       	andi	r24, 0x07	; 7
    2880:	88 2f       	mov	r24, r24
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	81 70       	andi	r24, 0x01	; 1
    2886:	90 70       	andi	r25, 0x00	; 0
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	a1 f3       	breq	.-24     	; 0x2874 <USART_VIDSendChar+0xc>
	UDR=copy_u8char; //PUT THE 8BITS in the UDR register
    288c:	ec e2       	ldi	r30, 0x2C	; 44
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	80 83       	st	Z, r24

}
    2894:	0f 90       	pop	r0
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <USART_U8RECIEVEChar>:

u8 USART_U8RECIEVEChar()
{
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <USART_U8RECIEVEChar+0x6>
    28a2:	0f 92       	push	r0
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_U8character;
	u16 counter = 2000;
    28a8:	80 ed       	ldi	r24, 0xD0	; 208
    28aa:	97 e0       	ldi	r25, 0x07	; 7
    28ac:	9a 83       	std	Y+2, r25	; 0x02
    28ae:	89 83       	std	Y+1, r24	; 0x01
    28b0:	09 c0       	rjmp	.+18     	; 0x28c4 <USART_U8RECIEVEChar+0x28>
	//check if the receive operation is complete (once the end bit reaches )
	while(GET_BIT(UCSRA,RXC)==0) //POLLINR waiting for tHE receive OPERATION IS COMPLETE
	{
		if (counter == 0)
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	51 f0       	breq	.+20     	; 0x28ce <USART_U8RECIEVEChar+0x32>
			break;
		else
			counter-- ;
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	9a 81       	ldd	r25, Y+2	; 0x02
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	9a 83       	std	Y+2, r25	; 0x02
    28c2:	89 83       	std	Y+1, r24	; 0x01
u8 USART_U8RECIEVEChar()
{
	u8 Loc_U8character;
	u16 counter = 2000;
	//check if the receive operation is complete (once the end bit reaches )
	while(GET_BIT(UCSRA,RXC)==0) //POLLINR waiting for tHE receive OPERATION IS COMPLETE
    28c4:	eb e2       	ldi	r30, 0x2B	; 43
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	88 23       	and	r24, r24
    28cc:	94 f7       	brge	.-28     	; 0x28b2 <USART_U8RECIEVEChar+0x16>
		if (counter == 0)
			break;
		else
			counter-- ;
	}
	Loc_U8character=UDR;
    28ce:	ec e2       	ldi	r30, 0x2C	; 44
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	8b 83       	std	Y+3, r24	; 0x03
	return Loc_U8character;
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03

}
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <__vector_9>:
#include "ULTRASONIC.h"

u32 TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
    28e4:	1f 92       	push	r1
    28e6:	0f 92       	push	r0
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	0f 92       	push	r0
    28ec:	11 24       	eor	r1, r1
    28ee:	8f 93       	push	r24
    28f0:	9f 93       	push	r25
    28f2:	af 93       	push	r26
    28f4:	bf 93       	push	r27
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
	TimerOverflow++;	/* Increment Timer Overflow count */
    28fe:	80 91 6c 01 	lds	r24, 0x016C
    2902:	90 91 6d 01 	lds	r25, 0x016D
    2906:	a0 91 6e 01 	lds	r26, 0x016E
    290a:	b0 91 6f 01 	lds	r27, 0x016F
    290e:	01 96       	adiw	r24, 0x01	; 1
    2910:	a1 1d       	adc	r26, r1
    2912:	b1 1d       	adc	r27, r1
    2914:	80 93 6c 01 	sts	0x016C, r24
    2918:	90 93 6d 01 	sts	0x016D, r25
    291c:	a0 93 6e 01 	sts	0x016E, r26
    2920:	b0 93 6f 01 	sts	0x016F, r27
}
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	bf 91       	pop	r27
    292a:	af 91       	pop	r26
    292c:	9f 91       	pop	r25
    292e:	8f 91       	pop	r24
    2930:	0f 90       	pop	r0
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	0f 90       	pop	r0
    2936:	1f 90       	pop	r1
    2938:	18 95       	reti

0000293a <ULSONIC_VIDInit>:

void ULSONIC_VIDInit()
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(DIO_PORTA, DIO_PIN0, DIO_OUTPUT);
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	60 e0       	ldi	r22, 0x00	; 0
    2946:	41 e0       	ldi	r20, 0x01	; 1
    2948:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(DIO_PORTD,DIO_PIN6, DIO_OUTPUT);
    294c:	83 e0       	ldi	r24, 0x03	; 3
    294e:	66 e0       	ldi	r22, 0x06	; 6
    2950:	41 e0       	ldi	r20, 0x01	; 1
    2952:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
	sei();			            /* Enable global interrupt */
    2956:	78 94       	sei
	SET_BIT(TIMSK, TOIE1);  	/* Enable Timer1 overflow interrupts */
    2958:	a9 e5       	ldi	r26, 0x59	; 89
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e9 e5       	ldi	r30, 0x59	; 89
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	84 60       	ori	r24, 0x04	; 4
    2964:	8c 93       	st	X, r24
	TCCR1A = 0;		            /* Set all bit to zero Normal operation */
    2966:	ef e4       	ldi	r30, 0x4F	; 79
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	10 82       	st	Z, r1
}
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <ULSONIC_U32GetDistance>:

u32 ULSONIC_U32GetDistance()
{
    2972:	ef 92       	push	r14
    2974:	ff 92       	push	r15
    2976:	0f 93       	push	r16
    2978:	1f 93       	push	r17
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	a0 97       	sbiw	r28, 0x20	; 32
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
	u32 distance ;
	u32 count;
	/* Give 10us trigger pulse on trig. pin to HC-SR04 */
	SET_BIT(PORTA,TRIG_PIN);
    298e:	ab e3       	ldi	r26, 0x3B	; 59
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	eb e3       	ldi	r30, 0x3B	; 59
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	81 60       	ori	r24, 0x01	; 1
    299a:	8c 93       	st	X, r24
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	a0 e2       	ldi	r26, 0x20	; 32
    29a2:	b1 e4       	ldi	r27, 0x41	; 65
    29a4:	8d 8b       	std	Y+21, r24	; 0x15
    29a6:	9e 8b       	std	Y+22, r25	; 0x16
    29a8:	af 8b       	std	Y+23, r26	; 0x17
    29aa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29ac:	6d 89       	ldd	r22, Y+21	; 0x15
    29ae:	7e 89       	ldd	r23, Y+22	; 0x16
    29b0:	8f 89       	ldd	r24, Y+23	; 0x17
    29b2:	98 8d       	ldd	r25, Y+24	; 0x18
    29b4:	2b ea       	ldi	r18, 0xAB	; 171
    29b6:	3a ea       	ldi	r19, 0xAA	; 170
    29b8:	4a e2       	ldi	r20, 0x2A	; 42
    29ba:	50 e4       	ldi	r21, 0x40	; 64
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	89 8b       	std	Y+17, r24	; 0x11
    29c6:	9a 8b       	std	Y+18, r25	; 0x12
    29c8:	ab 8b       	std	Y+19, r26	; 0x13
    29ca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    29cc:	69 89       	ldd	r22, Y+17	; 0x11
    29ce:	7a 89       	ldd	r23, Y+18	; 0x12
    29d0:	8b 89       	ldd	r24, Y+19	; 0x13
    29d2:	9c 89       	ldd	r25, Y+20	; 0x14
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e8       	ldi	r20, 0x80	; 128
    29da:	5f e3       	ldi	r21, 0x3F	; 63
    29dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	1c f4       	brge	.+6      	; 0x29ea <ULSONIC_U32GetDistance+0x78>
		__ticks = 1;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	88 8b       	std	Y+16, r24	; 0x10
    29e8:	91 c0       	rjmp	.+290    	; 0x2b0c <ULSONIC_U32GetDistance+0x19a>
	else if (__tmp > 255)
    29ea:	69 89       	ldd	r22, Y+17	; 0x11
    29ec:	7a 89       	ldd	r23, Y+18	; 0x12
    29ee:	8b 89       	ldd	r24, Y+19	; 0x13
    29f0:	9c 89       	ldd	r25, Y+20	; 0x14
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	53 e4       	ldi	r21, 0x43	; 67
    29fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	0c f0       	brlt	.+2      	; 0x2a04 <ULSONIC_U32GetDistance+0x92>
    2a02:	7b c0       	rjmp	.+246    	; 0x2afa <ULSONIC_U32GetDistance+0x188>
	{
		_delay_ms(__us / 1000.0);
    2a04:	6d 89       	ldd	r22, Y+21	; 0x15
    2a06:	7e 89       	ldd	r23, Y+22	; 0x16
    2a08:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	4a e7       	ldi	r20, 0x7A	; 122
    2a12:	54 e4       	ldi	r21, 0x44	; 68
    2a14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	8c 87       	std	Y+12, r24	; 0x0c
    2a1e:	9d 87       	std	Y+13, r25	; 0x0d
    2a20:	ae 87       	std	Y+14, r26	; 0x0e
    2a22:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a24:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a26:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a28:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	4a ef       	ldi	r20, 0xFA	; 250
    2a32:	54 e4       	ldi	r21, 0x44	; 68
    2a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	88 87       	std	Y+8, r24	; 0x08
    2a3e:	99 87       	std	Y+9, r25	; 0x09
    2a40:	aa 87       	std	Y+10, r26	; 0x0a
    2a42:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a44:	68 85       	ldd	r22, Y+8	; 0x08
    2a46:	79 85       	ldd	r23, Y+9	; 0x09
    2a48:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e8       	ldi	r20, 0x80	; 128
    2a52:	5f e3       	ldi	r21, 0x3F	; 63
    2a54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a58:	88 23       	and	r24, r24
    2a5a:	2c f4       	brge	.+10     	; 0x2a66 <ULSONIC_U32GetDistance+0xf4>
		__ticks = 1;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	9f 83       	std	Y+7, r25	; 0x07
    2a62:	8e 83       	std	Y+6, r24	; 0x06
    2a64:	3f c0       	rjmp	.+126    	; 0x2ae4 <ULSONIC_U32GetDistance+0x172>
	else if (__tmp > 65535)
    2a66:	68 85       	ldd	r22, Y+8	; 0x08
    2a68:	79 85       	ldd	r23, Y+9	; 0x09
    2a6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	3f ef       	ldi	r19, 0xFF	; 255
    2a72:	4f e7       	ldi	r20, 0x7F	; 127
    2a74:	57 e4       	ldi	r21, 0x47	; 71
    2a76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a7a:	18 16       	cp	r1, r24
    2a7c:	4c f5       	brge	.+82     	; 0x2ad0 <ULSONIC_U32GetDistance+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a80:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a82:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a84:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e2       	ldi	r20, 0x20	; 32
    2a8c:	51 e4       	ldi	r21, 0x41	; 65
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	bc 01       	movw	r22, r24
    2a98:	cd 01       	movw	r24, r26
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9f 83       	std	Y+7, r25	; 0x07
    2aa4:	8e 83       	std	Y+6, r24	; 0x06
    2aa6:	0f c0       	rjmp	.+30     	; 0x2ac6 <ULSONIC_U32GetDistance+0x154>
    2aa8:	88 ec       	ldi	r24, 0xC8	; 200
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	9d 83       	std	Y+5, r25	; 0x05
    2aae:	8c 83       	std	Y+4, r24	; 0x04
    2ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <ULSONIC_U32GetDistance+0x142>
    2ab8:	9d 83       	std	Y+5, r25	; 0x05
    2aba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abc:	8e 81       	ldd	r24, Y+6	; 0x06
    2abe:	9f 81       	ldd	r25, Y+7	; 0x07
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	9f 83       	std	Y+7, r25	; 0x07
    2ac4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac8:	9f 81       	ldd	r25, Y+7	; 0x07
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	69 f7       	brne	.-38     	; 0x2aa8 <ULSONIC_U32GetDistance+0x136>
    2ace:	24 c0       	rjmp	.+72     	; 0x2b18 <ULSONIC_U32GetDistance+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad0:	68 85       	ldd	r22, Y+8	; 0x08
    2ad2:	79 85       	ldd	r23, Y+9	; 0x09
    2ad4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ad6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	9f 83       	std	Y+7, r25	; 0x07
    2ae2:	8e 83       	std	Y+6, r24	; 0x06
    2ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ae8:	9b 83       	std	Y+3, r25	; 0x03
    2aea:	8a 83       	std	Y+2, r24	; 0x02
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	9b 81       	ldd	r25, Y+3	; 0x03
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <ULSONIC_U32GetDistance+0x17e>
    2af4:	9b 83       	std	Y+3, r25	; 0x03
    2af6:	8a 83       	std	Y+2, r24	; 0x02
    2af8:	0f c0       	rjmp	.+30     	; 0x2b18 <ULSONIC_U32GetDistance+0x1a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2afa:	69 89       	ldd	r22, Y+17	; 0x11
    2afc:	7a 89       	ldd	r23, Y+18	; 0x12
    2afe:	8b 89       	ldd	r24, Y+19	; 0x13
    2b00:	9c 89       	ldd	r25, Y+20	; 0x14
    2b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	88 8b       	std	Y+16, r24	; 0x10
    2b0c:	88 89       	ldd	r24, Y+16	; 0x10
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	8a 95       	dec	r24
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <ULSONIC_U32GetDistance+0x1a0>
    2b16:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	CLR_BIT(PORTA, TRIG_PIN);
    2b18:	ab e3       	ldi	r26, 0x3B	; 59
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	eb e3       	ldi	r30, 0x3B	; 59
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	8e 7f       	andi	r24, 0xFE	; 254
    2b24:	8c 93       	st	X, r24

	TCNT1 = 0;	/* Clear Timer counter */
    2b26:	ec e4       	ldi	r30, 0x4C	; 76
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	11 82       	std	Z+1, r1	; 0x01
    2b2c:	10 82       	st	Z, r1
	SET_BIT(TIFR,ICF1);	/* Clear ICP flag (Input Capture flag) */
    2b2e:	a8 e5       	ldi	r26, 0x58	; 88
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	e8 e5       	ldi	r30, 0x58	; 88
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	80 62       	ori	r24, 0x20	; 32
    2b3a:	8c 93       	st	X, r24
	SET_BIT(TIFR,TOV1);	/* Clear Timer Overflow flag */
    2b3c:	a8 e5       	ldi	r26, 0x58	; 88
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	e8 e5       	ldi	r30, 0x58	; 88
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	84 60       	ori	r24, 0x04	; 4
    2b48:	8c 93       	st	X, r24
	TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
    2b4a:	ee e4       	ldi	r30, 0x4E	; 78
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	81 e4       	ldi	r24, 0x41	; 65
    2b50:	80 83       	st	Z, r24


	/*Calculate width of Echo by Input Capture (ICP) */

	while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
    2b52:	e8 e5       	ldi	r30, 0x58	; 88
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	88 2f       	mov	r24, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	80 72       	andi	r24, 0x20	; 32
    2b5e:	90 70       	andi	r25, 0x00	; 0
    2b60:	00 97       	sbiw	r24, 0x00	; 0
    2b62:	b9 f3       	breq	.-18     	; 0x2b52 <ULSONIC_U32GetDistance+0x1e0>
	TCNT1 = 0;	/* Clear Timer counter */
    2b64:	ec e4       	ldi	r30, 0x4C	; 76
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	11 82       	std	Z+1, r1	; 0x01
    2b6a:	10 82       	st	Z, r1
	SET_BIT(TIFR,ICF1);	/* Clear ICP flag (Input Capture flag) */
    2b6c:	a8 e5       	ldi	r26, 0x58	; 88
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e8 e5       	ldi	r30, 0x58	; 88
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	80 62       	ori	r24, 0x20	; 32
    2b78:	8c 93       	st	X, r24
	SET_BIT(TIFR,TOV1);	/* Clear Timer Overflow flag */
    2b7a:	a8 e5       	ldi	r26, 0x58	; 88
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e8 e5       	ldi	r30, 0x58	; 88
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	84 60       	ori	r24, 0x04	; 4
    2b86:	8c 93       	st	X, r24
	TimerOverflow = 0;/* Clear Timer overflow count */
    2b88:	10 92 6c 01 	sts	0x016C, r1
    2b8c:	10 92 6d 01 	sts	0x016D, r1
    2b90:	10 92 6e 01 	sts	0x016E, r1
    2b94:	10 92 6f 01 	sts	0x016F, r1
	TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
    2b98:	ee e4       	ldi	r30, 0x4E	; 78
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	80 83       	st	Z, r24

	while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
    2ba0:	e8 e5       	ldi	r30, 0x58	; 88
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	88 2f       	mov	r24, r24
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	80 72       	andi	r24, 0x20	; 32
    2bac:	90 70       	andi	r25, 0x00	; 0
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	b9 f3       	breq	.-18     	; 0x2ba0 <ULSONIC_U32GetDistance+0x22e>
	count = ICR1 + (65535 * TimerOverflow);	/* Take count */
    2bb2:	e6 e4       	ldi	r30, 0x46	; 70
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	7c 01       	movw	r14, r24
    2bbc:	00 e0       	ldi	r16, 0x00	; 0
    2bbe:	10 e0       	ldi	r17, 0x00	; 0
    2bc0:	80 91 6c 01 	lds	r24, 0x016C
    2bc4:	90 91 6d 01 	lds	r25, 0x016D
    2bc8:	a0 91 6e 01 	lds	r26, 0x016E
    2bcc:	b0 91 6f 01 	lds	r27, 0x016F
    2bd0:	2f ef       	ldi	r18, 0xFF	; 255
    2bd2:	3f ef       	ldi	r19, 0xFF	; 255
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cd 01       	movw	r24, r26
    2bdc:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsi3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	8e 0d       	add	r24, r14
    2be6:	9f 1d       	adc	r25, r15
    2be8:	a0 1f       	adc	r26, r16
    2bea:	b1 1f       	adc	r27, r17
    2bec:	89 8f       	std	Y+25, r24	; 0x19
    2bee:	9a 8f       	std	Y+26, r25	; 0x1a
    2bf0:	ab 8f       	std	Y+27, r26	; 0x1b
    2bf2:	bc 8f       	std	Y+28, r27	; 0x1c
	/* 8MHz Timer freq, sound speed =343 m/s */
	distance = (double)count / 466.47;
    2bf4:	69 8d       	ldd	r22, Y+25	; 0x19
    2bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bfc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	bc 01       	movw	r22, r24
    2c06:	cd 01       	movw	r24, r26
    2c08:	29 e2       	ldi	r18, 0x29	; 41
    2c0a:	3c e3       	ldi	r19, 0x3C	; 60
    2c0c:	49 ee       	ldi	r20, 0xE9	; 233
    2c0e:	53 e4       	ldi	r21, 0x43	; 67
    2c10:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	bc 01       	movw	r22, r24
    2c1a:	cd 01       	movw	r24, r26
    2c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	8d 8f       	std	Y+29, r24	; 0x1d
    2c26:	9e 8f       	std	Y+30, r25	; 0x1e
    2c28:	af 8f       	std	Y+31, r26	; 0x1f
    2c2a:	b8 a3       	std	Y+32, r27	; 0x20
	distance++;
    2c2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c30:	af 8d       	ldd	r26, Y+31	; 0x1f
    2c32:	b8 a1       	ldd	r27, Y+32	; 0x20
    2c34:	01 96       	adiw	r24, 0x01	; 1
    2c36:	a1 1d       	adc	r26, r1
    2c38:	b1 1d       	adc	r27, r1
    2c3a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c3e:	af 8f       	std	Y+31, r26	; 0x1f
    2c40:	b8 a3       	std	Y+32, r27	; 0x20
	return distance;
    2c42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c46:	af 8d       	ldd	r26, Y+31	; 0x1f
    2c48:	b8 a1       	ldd	r27, Y+32	; 0x20

}
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	a0 96       	adiw	r28, 0x20	; 32
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	1f 91       	pop	r17
    2c60:	0f 91       	pop	r16
    2c62:	ff 90       	pop	r15
    2c64:	ef 90       	pop	r14
    2c66:	08 95       	ret

00002c68 <main>:
#include "Timer.h"
#include "avr/interrupt.h"
#include"IR.h"

void main(void)
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	64 97       	sbiw	r28, 0x14	; 20
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	cd bf       	out	0x3d, r28	; 61
	u8 x=0;
    2c7c:	1c 8a       	std	Y+20, r1	; 0x14
	u8 control = 0;
    2c7e:	1b 8a       	std	Y+19, r1	; 0x13
	u32 read ;

	//USART_VIDInit();
	Timers_VidTimer0Init();
    2c80:	0e 94 f7 12 	call	0x25ee	; 0x25ee <Timers_VidTimer0Init>
	Dc_Motor_Init();
    2c84:	0e 94 17 07 	call	0xe2e	; 0xe2e <Dc_Motor_Init>
	ULSONIC_VIDInit();
    2c88:	0e 94 9d 14 	call	0x293a	; 0x293a <ULSONIC_VIDInit>
	USART_VIDInit();
    2c8c:	0e 94 de 13 	call	0x27bc	; 0x27bc <USART_VIDInit>
	IR_init();
    2c90:	0e 94 91 0b 	call	0x1722	; 0x1722 <IR_init>
	/*lED FOR TESTING*/
	//DIO_VidSetPinDirection(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
	//DIO_VidSetPinValue(DIO_PORTA,DIO_PIN3,DIO_LOW);

	/*FOR UART INITILIZATION AS PIN0 INPUT FOR RECIVING & PIN1 FOR TRANSMITTING*/
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT);
    2c94:	83 e0       	ldi	r24, 0x03	; 3
    2c96:	60 e0       	ldi	r22, 0x00	; 0
    2c98:	40 e0       	ldi	r20, 0x00	; 0
    2c9a:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);
    2c9e:	83 e0       	ldi	r24, 0x03	; 3
    2ca0:	61 e0       	ldi	r22, 0x01	; 1
    2ca2:	41 e0       	ldi	r20, 0x01	; 1
    2ca4:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>


	DIO_VidSetPinDirection(DIO_PORTC,DIO_PIN6, DIO_OUTPUT);
    2ca8:	82 e0       	ldi	r24, 0x02	; 2
    2caa:	66 e0       	ldi	r22, 0x06	; 6
    2cac:	41 e0       	ldi	r20, 0x01	; 1
    2cae:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTC,DIO_PIN7, DIO_OUTPUT);
    2cb2:	82 e0       	ldi	r24, 0x02	; 2
    2cb4:	67 e0       	ldi	r22, 0x07	; 7
    2cb6:	41 e0       	ldi	r20, 0x01	; 1
    2cb8:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPinDirection>


	while(1)
	{
		/*READING DISTANCE FROM ULTRASONIC*/
		read =  ULSONIC_U32GetDistance();
    2cbc:	0e 94 b9 14 	call	0x2972	; 0x2972 <ULSONIC_U32GetDistance>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	8f 87       	std	Y+15, r24	; 0x0f
    2cc6:	98 8b       	std	Y+16, r25	; 0x10
    2cc8:	a9 8b       	std	Y+17, r26	; 0x11
    2cca:	ba 8b       	std	Y+18, r27	; 0x12


    	if(read>=30)
    2ccc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cce:	98 89       	ldd	r25, Y+16	; 0x10
    2cd0:	a9 89       	ldd	r26, Y+17	; 0x11
    2cd2:	ba 89       	ldd	r27, Y+18	; 0x12
    2cd4:	8e 31       	cpi	r24, 0x1E	; 30
    2cd6:	91 05       	cpc	r25, r1
    2cd8:	a1 05       	cpc	r26, r1
    2cda:	b1 05       	cpc	r27, r1
    2cdc:	08 f4       	brcc	.+2      	; 0x2ce0 <main+0x78>
    2cde:	9b c0       	rjmp	.+310    	; 0x2e16 <main+0x1ae>
    	{

    		DIO_VidSetPinValue(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	67 e0       	ldi	r22, 0x07	; 7
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
    		x=USART_U8RECIEVEChar();
    2cea:	0e 94 4e 14 	call	0x289c	; 0x289c <USART_U8RECIEVEChar>
    2cee:	8c 8b       	std	Y+20, r24	; 0x14
    		if (x=='1' || x== '2')
    2cf0:	8c 89       	ldd	r24, Y+20	; 0x14
    2cf2:	81 33       	cpi	r24, 0x31	; 49
    2cf4:	19 f0       	breq	.+6      	; 0x2cfc <main+0x94>
    2cf6:	8c 89       	ldd	r24, Y+20	; 0x14
    2cf8:	82 33       	cpi	r24, 0x32	; 50
    2cfa:	11 f4       	brne	.+4      	; 0x2d00 <main+0x98>
    		{
    			control = x;
    2cfc:	8c 89       	ldd	r24, Y+20	; 0x14
    2cfe:	8b 8b       	std	Y+19, r24	; 0x13
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	a8 e4       	ldi	r26, 0x48	; 72
    2d06:	b3 e4       	ldi	r27, 0x43	; 67
    2d08:	8b 87       	std	Y+11, r24	; 0x0b
    2d0a:	9c 87       	std	Y+12, r25	; 0x0c
    2d0c:	ad 87       	std	Y+13, r26	; 0x0d
    2d0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	4a ef       	ldi	r20, 0xFA	; 250
    2d1e:	54 e4       	ldi	r21, 0x44	; 68
    2d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	8f 83       	std	Y+7, r24	; 0x07
    2d2a:	98 87       	std	Y+8, r25	; 0x08
    2d2c:	a9 87       	std	Y+9, r26	; 0x09
    2d2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d30:	6f 81       	ldd	r22, Y+7	; 0x07
    2d32:	78 85       	ldd	r23, Y+8	; 0x08
    2d34:	89 85       	ldd	r24, Y+9	; 0x09
    2d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e8       	ldi	r20, 0x80	; 128
    2d3e:	5f e3       	ldi	r21, 0x3F	; 63
    2d40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d44:	88 23       	and	r24, r24
    2d46:	2c f4       	brge	.+10     	; 0x2d52 <main+0xea>
		__ticks = 1;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	9e 83       	std	Y+6, r25	; 0x06
    2d4e:	8d 83       	std	Y+5, r24	; 0x05
    2d50:	3f c0       	rjmp	.+126    	; 0x2dd0 <main+0x168>
	else if (__tmp > 65535)
    2d52:	6f 81       	ldd	r22, Y+7	; 0x07
    2d54:	78 85       	ldd	r23, Y+8	; 0x08
    2d56:	89 85       	ldd	r24, Y+9	; 0x09
    2d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	3f ef       	ldi	r19, 0xFF	; 255
    2d5e:	4f e7       	ldi	r20, 0x7F	; 127
    2d60:	57 e4       	ldi	r21, 0x47	; 71
    2d62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d66:	18 16       	cp	r1, r24
    2d68:	4c f5       	brge	.+82     	; 0x2dbc <main+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	40 e2       	ldi	r20, 0x20	; 32
    2d78:	51 e4       	ldi	r21, 0x41	; 65
    2d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	bc 01       	movw	r22, r24
    2d84:	cd 01       	movw	r24, r26
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	9e 83       	std	Y+6, r25	; 0x06
    2d90:	8d 83       	std	Y+5, r24	; 0x05
    2d92:	0f c0       	rjmp	.+30     	; 0x2db2 <main+0x14a>
    2d94:	88 ec       	ldi	r24, 0xC8	; 200
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	9c 83       	std	Y+4, r25	; 0x04
    2d9a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	f1 f7       	brne	.-4      	; 0x2da0 <main+0x138>
    2da4:	9c 83       	std	Y+4, r25	; 0x04
    2da6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da8:	8d 81       	ldd	r24, Y+5	; 0x05
    2daa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	9e 83       	std	Y+6, r25	; 0x06
    2db0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db2:	8d 81       	ldd	r24, Y+5	; 0x05
    2db4:	9e 81       	ldd	r25, Y+6	; 0x06
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	69 f7       	brne	.-38     	; 0x2d94 <main+0x12c>
    2dba:	14 c0       	rjmp	.+40     	; 0x2de4 <main+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbe:	78 85       	ldd	r23, Y+8	; 0x08
    2dc0:	89 85       	ldd	r24, Y+9	; 0x09
    2dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	9e 83       	std	Y+6, r25	; 0x06
    2dce:	8d 83       	std	Y+5, r24	; 0x05
    2dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd4:	9a 83       	std	Y+2, r25	; 0x02
    2dd6:	89 83       	std	Y+1, r24	; 0x01
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	9a 81       	ldd	r25, Y+2	; 0x02
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	f1 f7       	brne	.-4      	; 0x2ddc <main+0x174>
    2de0:	9a 83       	std	Y+2, r25	; 0x02
    2de2:	89 83       	std	Y+1, r24	; 0x01
    		}
    		else{
  			  //DC_MOTOR_Stop();
    		}
    		_delay_ms(200);
    		if(control=='1')
    2de4:	8b 89       	ldd	r24, Y+19	; 0x13
    2de6:	81 33       	cpi	r24, 0x31	; 49
    2de8:	51 f4       	brne	.+20     	; 0x2dfe <main+0x196>
    		{
    			//LCD_SEND_COMMAND(0x01);
    			DIO_VidSetPinValue(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    2dea:	82 e0       	ldi	r24, 0x02	; 2
    2dec:	66 e0       	ldi	r22, 0x06	; 6
    2dee:	41 e0       	ldi	r20, 0x01	; 1
    2df0:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
    			DC_MOTOR_MoveForward();
    2df4:	0e 94 37 07 	call	0xe6e	; 0xe6e <DC_MOTOR_MoveForward>
    			IR_MakeDecision();
    2df8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <IR_MakeDecision>
    2dfc:	5f cf       	rjmp	.-322    	; 0x2cbc <main+0x54>

    		}
    		else if (control== '2')
    2dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2e00:	82 33       	cpi	r24, 0x32	; 50
    2e02:	09 f0       	breq	.+2      	; 0x2e06 <main+0x19e>
    2e04:	5b cf       	rjmp	.-330    	; 0x2cbc <main+0x54>
    		{
    		   DIO_VidSetPinValue(DIO_PORTC, DIO_PIN6, DIO_LOW);
    2e06:	82 e0       	ldi	r24, 0x02	; 2
    2e08:	66 e0       	ldi	r22, 0x06	; 6
    2e0a:	40 e0       	ldi	r20, 0x00	; 0
    2e0c:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
			   //DC_MOTOR_Stop();
			  // _delay_ms(1000);
    		   //DC_MOTOR_MoveForwardRight();
    		   //IR_MakeDecision();
    		   DC_MOTOR_Stop();
    2e10:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <DC_MOTOR_Stop>
    2e14:	53 cf       	rjmp	.-346    	; 0x2cbc <main+0x54>

    	}
    	else
    		{

    		DIO_VidSetPinValue(DIO_PORTC, DIO_PIN7, DIO_LOW);
    2e16:	82 e0       	ldi	r24, 0x02	; 2
    2e18:	67 e0       	ldi	r22, 0x07	; 7
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	0e 94 11 09 	call	0x1222	; 0x1222 <DIO_VidSetPinValue>
            DC_MOTOR_Stop();
    2e20:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <DC_MOTOR_Stop>
    2e24:	4b cf       	rjmp	.-362    	; 0x2cbc <main+0x54>

00002e26 <__mulsi3>:
    2e26:	62 9f       	mul	r22, r18
    2e28:	d0 01       	movw	r26, r0
    2e2a:	73 9f       	mul	r23, r19
    2e2c:	f0 01       	movw	r30, r0
    2e2e:	82 9f       	mul	r24, r18
    2e30:	e0 0d       	add	r30, r0
    2e32:	f1 1d       	adc	r31, r1
    2e34:	64 9f       	mul	r22, r20
    2e36:	e0 0d       	add	r30, r0
    2e38:	f1 1d       	adc	r31, r1
    2e3a:	92 9f       	mul	r25, r18
    2e3c:	f0 0d       	add	r31, r0
    2e3e:	83 9f       	mul	r24, r19
    2e40:	f0 0d       	add	r31, r0
    2e42:	74 9f       	mul	r23, r20
    2e44:	f0 0d       	add	r31, r0
    2e46:	65 9f       	mul	r22, r21
    2e48:	f0 0d       	add	r31, r0
    2e4a:	99 27       	eor	r25, r25
    2e4c:	72 9f       	mul	r23, r18
    2e4e:	b0 0d       	add	r27, r0
    2e50:	e1 1d       	adc	r30, r1
    2e52:	f9 1f       	adc	r31, r25
    2e54:	63 9f       	mul	r22, r19
    2e56:	b0 0d       	add	r27, r0
    2e58:	e1 1d       	adc	r30, r1
    2e5a:	f9 1f       	adc	r31, r25
    2e5c:	bd 01       	movw	r22, r26
    2e5e:	cf 01       	movw	r24, r30
    2e60:	11 24       	eor	r1, r1
    2e62:	08 95       	ret

00002e64 <__udivmodsi4>:
    2e64:	a1 e2       	ldi	r26, 0x21	; 33
    2e66:	1a 2e       	mov	r1, r26
    2e68:	aa 1b       	sub	r26, r26
    2e6a:	bb 1b       	sub	r27, r27
    2e6c:	fd 01       	movw	r30, r26
    2e6e:	0d c0       	rjmp	.+26     	; 0x2e8a <__udivmodsi4_ep>

00002e70 <__udivmodsi4_loop>:
    2e70:	aa 1f       	adc	r26, r26
    2e72:	bb 1f       	adc	r27, r27
    2e74:	ee 1f       	adc	r30, r30
    2e76:	ff 1f       	adc	r31, r31
    2e78:	a2 17       	cp	r26, r18
    2e7a:	b3 07       	cpc	r27, r19
    2e7c:	e4 07       	cpc	r30, r20
    2e7e:	f5 07       	cpc	r31, r21
    2e80:	20 f0       	brcs	.+8      	; 0x2e8a <__udivmodsi4_ep>
    2e82:	a2 1b       	sub	r26, r18
    2e84:	b3 0b       	sbc	r27, r19
    2e86:	e4 0b       	sbc	r30, r20
    2e88:	f5 0b       	sbc	r31, r21

00002e8a <__udivmodsi4_ep>:
    2e8a:	66 1f       	adc	r22, r22
    2e8c:	77 1f       	adc	r23, r23
    2e8e:	88 1f       	adc	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	1a 94       	dec	r1
    2e94:	69 f7       	brne	.-38     	; 0x2e70 <__udivmodsi4_loop>
    2e96:	60 95       	com	r22
    2e98:	70 95       	com	r23
    2e9a:	80 95       	com	r24
    2e9c:	90 95       	com	r25
    2e9e:	9b 01       	movw	r18, r22
    2ea0:	ac 01       	movw	r20, r24
    2ea2:	bd 01       	movw	r22, r26
    2ea4:	cf 01       	movw	r24, r30
    2ea6:	08 95       	ret

00002ea8 <__prologue_saves__>:
    2ea8:	2f 92       	push	r2
    2eaa:	3f 92       	push	r3
    2eac:	4f 92       	push	r4
    2eae:	5f 92       	push	r5
    2eb0:	6f 92       	push	r6
    2eb2:	7f 92       	push	r7
    2eb4:	8f 92       	push	r8
    2eb6:	9f 92       	push	r9
    2eb8:	af 92       	push	r10
    2eba:	bf 92       	push	r11
    2ebc:	cf 92       	push	r12
    2ebe:	df 92       	push	r13
    2ec0:	ef 92       	push	r14
    2ec2:	ff 92       	push	r15
    2ec4:	0f 93       	push	r16
    2ec6:	1f 93       	push	r17
    2ec8:	cf 93       	push	r28
    2eca:	df 93       	push	r29
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	ca 1b       	sub	r28, r26
    2ed2:	db 0b       	sbc	r29, r27
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	09 94       	ijmp

00002ee0 <__epilogue_restores__>:
    2ee0:	2a 88       	ldd	r2, Y+18	; 0x12
    2ee2:	39 88       	ldd	r3, Y+17	; 0x11
    2ee4:	48 88       	ldd	r4, Y+16	; 0x10
    2ee6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ee8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eea:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eec:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eee:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ef0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ef2:	b9 84       	ldd	r11, Y+9	; 0x09
    2ef4:	c8 84       	ldd	r12, Y+8	; 0x08
    2ef6:	df 80       	ldd	r13, Y+7	; 0x07
    2ef8:	ee 80       	ldd	r14, Y+6	; 0x06
    2efa:	fd 80       	ldd	r15, Y+5	; 0x05
    2efc:	0c 81       	ldd	r16, Y+4	; 0x04
    2efe:	1b 81       	ldd	r17, Y+3	; 0x03
    2f00:	aa 81       	ldd	r26, Y+2	; 0x02
    2f02:	b9 81       	ldd	r27, Y+1	; 0x01
    2f04:	ce 0f       	add	r28, r30
    2f06:	d1 1d       	adc	r29, r1
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	de bf       	out	0x3e, r29	; 62
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	ed 01       	movw	r28, r26
    2f14:	08 95       	ret

00002f16 <_exit>:
    2f16:	f8 94       	cli

00002f18 <__stop_program>:
    2f18:	ff cf       	rjmp	.-2      	; 0x2f18 <__stop_program>
