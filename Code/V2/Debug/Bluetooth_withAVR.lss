
Bluetooth_withAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017e  00800060  000030fa  0000318e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008001de  008001de  0000330c  2**0
                  ALLOC
  3 .stab         0000297c  00000000  00000000  0000330c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000104b  00000000  00000000  00005c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007065  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009470  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a7f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b9cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bb8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000be82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3e       	cpi	r26, 0xE2	; 226
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 15 	call	0x2b04	; 0x2b04 <main>
      8a:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 44 18 	jmp	0x3088	; 0x3088 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ed       	ldi	r26, 0xD6	; 214
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 44 18 	jmp	0x3088	; 0x3088 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ed       	ldi	r24, 0xD6	; 214
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 ed       	ldi	r22, 0xD6	; 214
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 52       	subi	r30, 0x22	; 34
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Dc_Motor_Init>:
 */

#include"Dc_Motors.h"
#include"DIO.h"
void Dc_Motor_Init()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

	DIO_VidSetPortDirection(DC_MOTOR_PORT , DIO_ALL_OUTPUT);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	6f ef       	ldi	r22, 0xFF	; 255
     e3a:	0e 94 35 0a 	call	0x146a	; 0x146a <DIO_VidSetPortDirection>
}
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <DC_MOTOR_MoveForward>:
void DC_MOTOR_MoveForward()
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_HIGH );
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_HIGH );
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	65 e0       	ldi	r22, 0x05	; 5
     e5a:	41 e0       	ldi	r20, 0x01	; 1
     e5c:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_HIGH );
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_LOW );
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	62 e0       	ldi	r22, 0x02	; 2
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_HIGH );
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	63 e0       	ldi	r22, 0x03	; 3
     e78:	41 e0       	ldi	r20, 0x01	; 1
     e7a:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_LOW );
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	64 e0       	ldi	r22, 0x04	; 4
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>

}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <DC_MOTOR_Movebackward>:
void DC_MOTOR_Movebackward()
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_HIGH );
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	41 e0       	ldi	r20, 0x01	; 1
     e9c:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_HIGH );
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	65 e0       	ldi	r22, 0x05	; 5
     ea4:	41 e0       	ldi	r20, 0x01	; 1
     ea6:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_LOW );
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_HIGH );
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	62 e0       	ldi	r22, 0x02	; 2
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_LOW );
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	63 e0       	ldi	r22, 0x03	; 3
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_HIGH );
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	64 e0       	ldi	r22, 0x04	; 4
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>


}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <DC_MOTOR_MoveForwardRight>:
void DC_MOTOR_MoveForwardRight()
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_HIGH );
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	41 e0       	ldi	r20, 0x01	; 1
     ee6:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_HIGH );
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	65 e0       	ldi	r22, 0x05	; 5
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_HIGH );
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_LOW );
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	62 e0       	ldi	r22, 0x02	; 2
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_LOW );
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	63 e0       	ldi	r22, 0x03	; 3
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_HIGH );
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	64 e0       	ldi	r22, 0x04	; 4
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>



}
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <DC_MOTOR_MoveForwardLeft>:
void DC_MOTOR_MoveForwardLeft()
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_HIGH );
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_HIGH );
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	65 e0       	ldi	r22, 0x05	; 5
     f38:	41 e0       	ldi	r20, 0x01	; 1
     f3a:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_LOW );
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_HIGH);
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	62 e0       	ldi	r22, 0x02	; 2
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_HIGH );
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	63 e0       	ldi	r22, 0x03	; 3
     f56:	41 e0       	ldi	r20, 0x01	; 1
     f58:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_LOW );
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	64 e0       	ldi	r22, 0x04	; 4
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>


}
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <DC_MOTOR_MovebackwardRight>:
void DC_MOTOR_MovebackwardRight()
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_HIGH );
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	41 e0       	ldi	r20, 0x01	; 1
     f7a:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_HIGH );
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	65 e0       	ldi	r22, 0x05	; 5
     f82:	41 e0       	ldi	r20, 0x01	; 1
     f84:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_LOW );
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_HIGH);
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	62 e0       	ldi	r22, 0x02	; 2
     f96:	41 e0       	ldi	r20, 0x01	; 1
     f98:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_HIGH );
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	63 e0       	ldi	r22, 0x03	; 3
     fa0:	41 e0       	ldi	r20, 0x01	; 1
     fa2:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_LOW );
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	64 e0       	ldi	r22, 0x04	; 4
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>


}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <DC_MOTOR_MovebackwardLeft>:
void DC_MOTOR_MovebackwardLeft()
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_HIGH );
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_HIGH );
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	65 e0       	ldi	r22, 0x05	; 5
     fcc:	41 e0       	ldi	r20, 0x01	; 1
     fce:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_HIGH);
     fd2:	82 e0       	ldi	r24, 0x02	; 2
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	41 e0       	ldi	r20, 0x01	; 1
     fd8:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_LOW);
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	62 e0       	ldi	r22, 0x02	; 2
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_LOW );
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	63 e0       	ldi	r22, 0x03	; 3
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_HIGH);
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	64 e0       	ldi	r22, 0x04	; 4
     ff4:	41 e0       	ldi	r20, 0x01	; 1
     ff6:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>

}
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <DC_MOTOR_Stop>:
void DC_MOTOR_Stop()
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENA_PIN , DIO_LOW );
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,ENB_PIN , DIO_LOW );
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	65 e0       	ldi	r22, 0x05	; 5
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>

	DIO_VidSetPinValue(DC_MOTOR_PORT,IN1_PIN , DIO_LOW );
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN2_PIN , DIO_LOW );
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	62 e0       	ldi	r22, 0x02	; 2
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN3_PIN , DIO_LOW );
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	63 e0       	ldi	r22, 0x03	; 3
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT,IN4_PIN , DIO_LOW );
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	64 e0       	ldi	r22, 0x04	; 4
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>

}
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <DIO_VidSetPinDirection>:
#include"DIO.h"

//function for direction
void DIO_VidSetPinDirection( u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Direction)    //preph name_returntype_funcName
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	29 97       	sbiw	r28, 0x09	; 9
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	6a 83       	std	Y+2, r22	; 0x02
    1062:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_U8Direction)
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	39 87       	std	Y+9, r19	; 0x09
    106c:	28 87       	std	Y+8, r18	; 0x08
    106e:	88 85       	ldd	r24, Y+8	; 0x08
    1070:	99 85       	ldd	r25, Y+9	; 0x09
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	39 f0       	breq	.+14     	; 0x1084 <DIO_VidSetPinDirection+0x3a>
    1076:	28 85       	ldd	r18, Y+8	; 0x08
    1078:	39 85       	ldd	r19, Y+9	; 0x09
    107a:	21 30       	cpi	r18, 0x01	; 1
    107c:	31 05       	cpc	r19, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <DIO_VidSetPinDirection+0x38>
    1080:	75 c0       	rjmp	.+234    	; 0x116c <DIO_VidSetPinDirection+0x122>
    1082:	e2 c0       	rjmp	.+452    	; 0x1248 <DIO_VidSetPinDirection+0x1fe>
	{
	    case DIO_INPUT:
	      switch(Copy_U8Port)
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	3f 83       	std	Y+7, r19	; 0x07
    108c:	2e 83       	std	Y+6, r18	; 0x06
    108e:	8e 81       	ldd	r24, Y+6	; 0x06
    1090:	9f 81       	ldd	r25, Y+7	; 0x07
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	91 05       	cpc	r25, r1
    1096:	59 f1       	breq	.+86     	; 0x10ee <DIO_VidSetPinDirection+0xa4>
    1098:	2e 81       	ldd	r18, Y+6	; 0x06
    109a:	3f 81       	ldd	r19, Y+7	; 0x07
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	2c f4       	brge	.+10     	; 0x10ac <DIO_VidSetPinDirection+0x62>
    10a2:	8e 81       	ldd	r24, Y+6	; 0x06
    10a4:	9f 81       	ldd	r25, Y+7	; 0x07
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	69 f0       	breq	.+26     	; 0x10c4 <DIO_VidSetPinDirection+0x7a>
    10aa:	ce c0       	rjmp	.+412    	; 0x1248 <DIO_VidSetPinDirection+0x1fe>
    10ac:	2e 81       	ldd	r18, Y+6	; 0x06
    10ae:	3f 81       	ldd	r19, Y+7	; 0x07
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	89 f1       	breq	.+98     	; 0x1118 <DIO_VidSetPinDirection+0xce>
    10b6:	8e 81       	ldd	r24, Y+6	; 0x06
    10b8:	9f 81       	ldd	r25, Y+7	; 0x07
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	91 05       	cpc	r25, r1
    10be:	09 f4       	brne	.+2      	; 0x10c2 <DIO_VidSetPinDirection+0x78>
    10c0:	40 c0       	rjmp	.+128    	; 0x1142 <DIO_VidSetPinDirection+0xf8>
    10c2:	c2 c0       	rjmp	.+388    	; 0x1248 <DIO_VidSetPinDirection+0x1fe>
	      {
	    	case DIO_PORTA:
	    		CLR_BIT( DDRA , Copy_U8Pin);
    10c4:	aa e3       	ldi	r26, 0x3A	; 58
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ea e3       	ldi	r30, 0x3A	; 58
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_VidSetPinDirection+0x98>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <DIO_VidSetPinDirection+0x94>
    10e6:	80 95       	com	r24
    10e8:	84 23       	and	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	ad c0       	rjmp	.+346    	; 0x1248 <DIO_VidSetPinDirection+0x1fe>
	    		break;
	    	case DIO_PORTB:
	    		CLR_BIT( DDRB , Copy_U8Pin);
    10ee:	a7 e3       	ldi	r26, 0x37	; 55
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e7 e3       	ldi	r30, 0x37	; 55
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_VidSetPinDirection+0xc2>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_VidSetPinDirection+0xbe>
    1110:	80 95       	com	r24
    1112:	84 23       	and	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	98 c0       	rjmp	.+304    	; 0x1248 <DIO_VidSetPinDirection+0x1fe>
	    		break;
	    	case DIO_PORTC:
	    		CLR_BIT( DDRC , Copy_U8Pin);
    1118:	a4 e3       	ldi	r26, 0x34	; 52
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e4 e3       	ldi	r30, 0x34	; 52
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_VidSetPinDirection+0xec>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_VidSetPinDirection+0xe8>
    113a:	80 95       	com	r24
    113c:	84 23       	and	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	83 c0       	rjmp	.+262    	; 0x1248 <DIO_VidSetPinDirection+0x1fe>
	    	    break;
	    	case DIO_PORTD:
	    		CLR_BIT( DDRD , Copy_U8Pin);
    1142:	a1 e3       	ldi	r26, 0x31	; 49
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e1 e3       	ldi	r30, 0x31	; 49
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_VidSetPinDirection+0x116>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_VidSetPinDirection+0x112>
    1164:	80 95       	com	r24
    1166:	84 23       	and	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	6e c0       	rjmp	.+220    	; 0x1248 <DIO_VidSetPinDirection+0x1fe>
	    	    break;

	      }
	      break;
	    case DIO_OUTPUT:
	    	switch(Copy_U8Port)
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3d 83       	std	Y+5, r19	; 0x05
    1174:	2c 83       	std	Y+4, r18	; 0x04
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	9d 81       	ldd	r25, Y+5	; 0x05
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	49 f1       	breq	.+82     	; 0x11d2 <DIO_VidSetPinDirection+0x188>
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	3d 81       	ldd	r19, Y+5	; 0x05
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	2c f4       	brge	.+10     	; 0x1194 <DIO_VidSetPinDirection+0x14a>
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	61 f0       	breq	.+24     	; 0x11aa <DIO_VidSetPinDirection+0x160>
    1192:	5a c0       	rjmp	.+180    	; 0x1248 <DIO_VidSetPinDirection+0x1fe>
    1194:	2c 81       	ldd	r18, Y+4	; 0x04
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	71 f1       	breq	.+92     	; 0x11fa <DIO_VidSetPinDirection+0x1b0>
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	9d 81       	ldd	r25, Y+5	; 0x05
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	e9 f1       	breq	.+122    	; 0x1222 <DIO_VidSetPinDirection+0x1d8>
    11a8:	4f c0       	rjmp	.+158    	; 0x1248 <DIO_VidSetPinDirection+0x1fe>
	    		    {
	    		    	case DIO_PORTA:
	    		    		SET_BIT( DDRA , Copy_U8Pin);
    11aa:	aa e3       	ldi	r26, 0x3A	; 58
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	ea e3       	ldi	r30, 0x3A	; 58
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_VidSetPinDirection+0x17e>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_VidSetPinDirection+0x17a>
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	3b c0       	rjmp	.+118    	; 0x1248 <DIO_VidSetPinDirection+0x1fe>
	    		    		break;
	    		    	case DIO_PORTB:
	    		    		SET_BIT( DDRB , Copy_U8Pin);
    11d2:	a7 e3       	ldi	r26, 0x37	; 55
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e7 e3       	ldi	r30, 0x37	; 55
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_VidSetPinDirection+0x1a6>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_VidSetPinDirection+0x1a2>
    11f4:	84 2b       	or	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	27 c0       	rjmp	.+78     	; 0x1248 <DIO_VidSetPinDirection+0x1fe>
	    		    		break;
	    		    	case DIO_PORTC:
	    		    		SET_BIT( DDRC , Copy_U8Pin);
    11fa:	a4 e3       	ldi	r26, 0x34	; 52
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e4 e3       	ldi	r30, 0x34	; 52
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_VidSetPinDirection+0x1ce>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_VidSetPinDirection+0x1ca>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	13 c0       	rjmp	.+38     	; 0x1248 <DIO_VidSetPinDirection+0x1fe>
	    		    	    break;
	    		    	case DIO_PORTD:
	    		    		SET_BIT( DDRD , Copy_U8Pin);
    1222:	a1 e3       	ldi	r26, 0x31	; 49
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e1 e3       	ldi	r30, 0x31	; 49
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_VidSetPinDirection+0x1f6>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_VidSetPinDirection+0x1f2>
    1244:	84 2b       	or	r24, r20
    1246:	8c 93       	st	X, r24
	    		    	    break;
	    		    }
	    	break;
	}
}
    1248:	29 96       	adiw	r28, 0x09	; 9
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <DIO_VidSetPinValue>:
//function for value
void DIO_VidSetPinValue( u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Value)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	29 97       	sbiw	r28, 0x09	; 9
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	6a 83       	std	Y+2, r22	; 0x02
    1272:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_U8Value)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	39 87       	std	Y+9, r19	; 0x09
    127c:	28 87       	std	Y+8, r18	; 0x08
    127e:	88 85       	ldd	r24, Y+8	; 0x08
    1280:	99 85       	ldd	r25, Y+9	; 0x09
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	39 f0       	breq	.+14     	; 0x1294 <DIO_VidSetPinValue+0x3a>
    1286:	28 85       	ldd	r18, Y+8	; 0x08
    1288:	39 85       	ldd	r19, Y+9	; 0x09
    128a:	21 30       	cpi	r18, 0x01	; 1
    128c:	31 05       	cpc	r19, r1
    128e:	09 f4       	brne	.+2      	; 0x1292 <DIO_VidSetPinValue+0x38>
    1290:	75 c0       	rjmp	.+234    	; 0x137c <DIO_VidSetPinValue+0x122>
    1292:	e2 c0       	rjmp	.+452    	; 0x1458 <DIO_VidSetPinValue+0x1fe>
	{
	    case DIO_LOW:
	      switch(Copy_U8Port)
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	3f 83       	std	Y+7, r19	; 0x07
    129c:	2e 83       	std	Y+6, r18	; 0x06
    129e:	8e 81       	ldd	r24, Y+6	; 0x06
    12a0:	9f 81       	ldd	r25, Y+7	; 0x07
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	91 05       	cpc	r25, r1
    12a6:	59 f1       	breq	.+86     	; 0x12fe <DIO_VidSetPinValue+0xa4>
    12a8:	2e 81       	ldd	r18, Y+6	; 0x06
    12aa:	3f 81       	ldd	r19, Y+7	; 0x07
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	2c f4       	brge	.+10     	; 0x12bc <DIO_VidSetPinValue+0x62>
    12b2:	8e 81       	ldd	r24, Y+6	; 0x06
    12b4:	9f 81       	ldd	r25, Y+7	; 0x07
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	69 f0       	breq	.+26     	; 0x12d4 <DIO_VidSetPinValue+0x7a>
    12ba:	ce c0       	rjmp	.+412    	; 0x1458 <DIO_VidSetPinValue+0x1fe>
    12bc:	2e 81       	ldd	r18, Y+6	; 0x06
    12be:	3f 81       	ldd	r19, Y+7	; 0x07
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	89 f1       	breq	.+98     	; 0x1328 <DIO_VidSetPinValue+0xce>
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <DIO_VidSetPinValue+0x78>
    12d0:	40 c0       	rjmp	.+128    	; 0x1352 <DIO_VidSetPinValue+0xf8>
    12d2:	c2 c0       	rjmp	.+388    	; 0x1458 <DIO_VidSetPinValue+0x1fe>
	      {
	    	case DIO_PORTA:
	    		CLR_BIT( PORTA , Copy_U8Pin);
    12d4:	ab e3       	ldi	r26, 0x3B	; 59
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	eb e3       	ldi	r30, 0x3B	; 59
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_VidSetPinValue+0x98>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_VidSetPinValue+0x94>
    12f6:	80 95       	com	r24
    12f8:	84 23       	and	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	ad c0       	rjmp	.+346    	; 0x1458 <DIO_VidSetPinValue+0x1fe>
	    		break;
	    	case DIO_PORTB:
	    		CLR_BIT( PORTB , Copy_U8Pin);
    12fe:	a8 e3       	ldi	r26, 0x38	; 56
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e8 e3       	ldi	r30, 0x38	; 56
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_VidSetPinValue+0xc2>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_VidSetPinValue+0xbe>
    1320:	80 95       	com	r24
    1322:	84 23       	and	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	98 c0       	rjmp	.+304    	; 0x1458 <DIO_VidSetPinValue+0x1fe>
	    		break;
	    	case DIO_PORTC:
	    		CLR_BIT( PORTC , Copy_U8Pin);
    1328:	a5 e3       	ldi	r26, 0x35	; 53
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e5 e3       	ldi	r30, 0x35	; 53
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_VidSetPinValue+0xec>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_VidSetPinValue+0xe8>
    134a:	80 95       	com	r24
    134c:	84 23       	and	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	83 c0       	rjmp	.+262    	; 0x1458 <DIO_VidSetPinValue+0x1fe>
	    	    break;
	    	case DIO_PORTD:
	    		CLR_BIT( PORTD , Copy_U8Pin);
    1352:	a2 e3       	ldi	r26, 0x32	; 50
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e2 e3       	ldi	r30, 0x32	; 50
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_VidSetPinValue+0x116>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_VidSetPinValue+0x112>
    1374:	80 95       	com	r24
    1376:	84 23       	and	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	6e c0       	rjmp	.+220    	; 0x1458 <DIO_VidSetPinValue+0x1fe>
	    	    break;

	      }
	      break;
	    case DIO_HIGH:
	    	switch(Copy_U8Port)
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3d 83       	std	Y+5, r19	; 0x05
    1384:	2c 83       	std	Y+4, r18	; 0x04
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	91 05       	cpc	r25, r1
    138e:	49 f1       	breq	.+82     	; 0x13e2 <DIO_VidSetPinValue+0x188>
    1390:	2c 81       	ldd	r18, Y+4	; 0x04
    1392:	3d 81       	ldd	r19, Y+5	; 0x05
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	2c f4       	brge	.+10     	; 0x13a4 <DIO_VidSetPinValue+0x14a>
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	61 f0       	breq	.+24     	; 0x13ba <DIO_VidSetPinValue+0x160>
    13a2:	5a c0       	rjmp	.+180    	; 0x1458 <DIO_VidSetPinValue+0x1fe>
    13a4:	2c 81       	ldd	r18, Y+4	; 0x04
    13a6:	3d 81       	ldd	r19, Y+5	; 0x05
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	71 f1       	breq	.+92     	; 0x140a <DIO_VidSetPinValue+0x1b0>
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	91 05       	cpc	r25, r1
    13b6:	e9 f1       	breq	.+122    	; 0x1432 <DIO_VidSetPinValue+0x1d8>
    13b8:	4f c0       	rjmp	.+158    	; 0x1458 <DIO_VidSetPinValue+0x1fe>
	    		    {
	    		    	case DIO_PORTA:
	    		    		SET_BIT( PORTA , Copy_U8Pin);
    13ba:	ab e3       	ldi	r26, 0x3B	; 59
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	eb e3       	ldi	r30, 0x3B	; 59
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_VidSetPinValue+0x17e>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_VidSetPinValue+0x17a>
    13dc:	84 2b       	or	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	3b c0       	rjmp	.+118    	; 0x1458 <DIO_VidSetPinValue+0x1fe>
	    		    		break;
	    		    	case DIO_PORTB:
	    		    		SET_BIT( PORTB , Copy_U8Pin);
    13e2:	a8 e3       	ldi	r26, 0x38	; 56
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e8 e3       	ldi	r30, 0x38	; 56
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_VidSetPinValue+0x1a6>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_VidSetPinValue+0x1a2>
    1404:	84 2b       	or	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	27 c0       	rjmp	.+78     	; 0x1458 <DIO_VidSetPinValue+0x1fe>
	    		    		break;
	    		    	case DIO_PORTC:
	    		    		SET_BIT( PORTC , Copy_U8Pin);
    140a:	a5 e3       	ldi	r26, 0x35	; 53
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e3       	ldi	r30, 0x35	; 53
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_VidSetPinValue+0x1ce>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_VidSetPinValue+0x1ca>
    142c:	84 2b       	or	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	13 c0       	rjmp	.+38     	; 0x1458 <DIO_VidSetPinValue+0x1fe>
	    		    	    break;
	    		    	case DIO_PORTD:
	    		    		SET_BIT( PORTD , Copy_U8Pin);
    1432:	a2 e3       	ldi	r26, 0x32	; 50
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e2 e3       	ldi	r30, 0x32	; 50
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_VidSetPinValue+0x1f6>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_VidSetPinValue+0x1f2>
    1454:	84 2b       	or	r24, r20
    1456:	8c 93       	st	X, r24
	    		    	    break;
	    		    }
	    	        break;
	}

}
    1458:	29 96       	adiw	r28, 0x09	; 9
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <DIO_VidSetPortDirection>:


 //function to set port direction
void DIO_VidSetPortDirection(u8 Copy_U8Port , u8 Copy_U8Direction)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <DIO_VidSetPortDirection+0x6>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <DIO_VidSetPortDirection+0x8>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3c 83       	std	Y+4, r19	; 0x04
    1482:	2b 83       	std	Y+3, r18	; 0x03
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	91 05       	cpc	r25, r1
    148c:	d1 f0       	breq	.+52     	; 0x14c2 <DIO_VidSetPortDirection+0x58>
    148e:	2b 81       	ldd	r18, Y+3	; 0x03
    1490:	3c 81       	ldd	r19, Y+4	; 0x04
    1492:	22 30       	cpi	r18, 0x02	; 2
    1494:	31 05       	cpc	r19, r1
    1496:	2c f4       	brge	.+10     	; 0x14a2 <DIO_VidSetPortDirection+0x38>
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	61 f0       	breq	.+24     	; 0x14b8 <DIO_VidSetPortDirection+0x4e>
    14a0:	1e c0       	rjmp	.+60     	; 0x14de <DIO_VidSetPortDirection+0x74>
    14a2:	2b 81       	ldd	r18, Y+3	; 0x03
    14a4:	3c 81       	ldd	r19, Y+4	; 0x04
    14a6:	22 30       	cpi	r18, 0x02	; 2
    14a8:	31 05       	cpc	r19, r1
    14aa:	81 f0       	breq	.+32     	; 0x14cc <DIO_VidSetPortDirection+0x62>
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	83 30       	cpi	r24, 0x03	; 3
    14b2:	91 05       	cpc	r25, r1
    14b4:	81 f0       	breq	.+32     	; 0x14d6 <DIO_VidSetPortDirection+0x6c>
    14b6:	13 c0       	rjmp	.+38     	; 0x14de <DIO_VidSetPortDirection+0x74>
		    {
		    	case DIO_PORTA:
		    		DDRA= Copy_U8Direction;
    14b8:	ea e3       	ldi	r30, 0x3A	; 58
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	80 83       	st	Z, r24
    14c0:	0e c0       	rjmp	.+28     	; 0x14de <DIO_VidSetPortDirection+0x74>
		    		break;
		    	case DIO_PORTB:
		    		DDRB= Copy_U8Direction;
    14c2:	e7 e3       	ldi	r30, 0x37	; 55
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 83       	st	Z, r24
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <DIO_VidSetPortDirection+0x74>
		    		break;
		    	case DIO_PORTC:
		    		DDRC= Copy_U8Direction;
    14cc:	e4 e3       	ldi	r30, 0x34	; 52
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	80 83       	st	Z, r24
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <DIO_VidSetPortDirection+0x74>
		    	    break;
		    	case DIO_PORTD:
		    		DDRD= Copy_U8Direction;
    14d6:	e1 e3       	ldi	r30, 0x31	; 49
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	80 83       	st	Z, r24
		    	    break;
		    }

}
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <DIO_VidSetPortValue>:
//functio to set the port value
void DIO_VidSetPortValue(u8 Copy_U8Port , u8 Copy_U8Value)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO_VidSetPortValue+0x6>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <DIO_VidSetPortValue+0x8>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	3c 83       	std	Y+4, r19	; 0x04
    1504:	2b 83       	std	Y+3, r18	; 0x03
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	91 05       	cpc	r25, r1
    150e:	d1 f0       	breq	.+52     	; 0x1544 <DIO_VidSetPortValue+0x58>
    1510:	2b 81       	ldd	r18, Y+3	; 0x03
    1512:	3c 81       	ldd	r19, Y+4	; 0x04
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	2c f4       	brge	.+10     	; 0x1524 <DIO_VidSetPortValue+0x38>
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	61 f0       	breq	.+24     	; 0x153a <DIO_VidSetPortValue+0x4e>
    1522:	1e c0       	rjmp	.+60     	; 0x1560 <DIO_VidSetPortValue+0x74>
    1524:	2b 81       	ldd	r18, Y+3	; 0x03
    1526:	3c 81       	ldd	r19, Y+4	; 0x04
    1528:	22 30       	cpi	r18, 0x02	; 2
    152a:	31 05       	cpc	r19, r1
    152c:	81 f0       	breq	.+32     	; 0x154e <DIO_VidSetPortValue+0x62>
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	91 05       	cpc	r25, r1
    1536:	81 f0       	breq	.+32     	; 0x1558 <DIO_VidSetPortValue+0x6c>
    1538:	13 c0       	rjmp	.+38     	; 0x1560 <DIO_VidSetPortValue+0x74>
		    {
		    	case DIO_PORTA:
		    		PORTA= Copy_U8Value;
    153a:	eb e3       	ldi	r30, 0x3B	; 59
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	80 83       	st	Z, r24
    1542:	0e c0       	rjmp	.+28     	; 0x1560 <DIO_VidSetPortValue+0x74>
		    		break;
		    	case DIO_PORTB:
		    		PORTB= Copy_U8Value;
    1544:	e8 e3       	ldi	r30, 0x38	; 56
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	80 83       	st	Z, r24
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <DIO_VidSetPortValue+0x74>
		    		break;
		    	case DIO_PORTC:
		    		PORTC= Copy_U8Value;
    154e:	e5 e3       	ldi	r30, 0x35	; 53
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	80 83       	st	Z, r24
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <DIO_VidSetPortValue+0x74>
		    	    break;
		    	case DIO_PORTD:
		    		PORTD= Copy_U8Value;
    1558:	e2 e3       	ldi	r30, 0x32	; 50
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	80 83       	st	Z, r24
		    	    break;
		    }

}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <DIO_VidTogglePinValue>:
//function to toggle the pin
void DIO_VidTogglePinValue(u8 Copy_U8Port , u8 Copy_U8Pin)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	00 d0       	rcall	.+0      	; 0x1574 <DIO_VidTogglePinValue+0x6>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <DIO_VidTogglePinValue+0x8>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3c 83       	std	Y+4, r19	; 0x04
    1586:	2b 83       	std	Y+3, r18	; 0x03
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	91 05       	cpc	r25, r1
    1590:	49 f1       	breq	.+82     	; 0x15e4 <DIO_VidTogglePinValue+0x76>
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	2c f4       	brge	.+10     	; 0x15a6 <DIO_VidTogglePinValue+0x38>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	61 f0       	breq	.+24     	; 0x15bc <DIO_VidTogglePinValue+0x4e>
    15a4:	5a c0       	rjmp	.+180    	; 0x165a <DIO_VidTogglePinValue+0xec>
    15a6:	2b 81       	ldd	r18, Y+3	; 0x03
    15a8:	3c 81       	ldd	r19, Y+4	; 0x04
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	71 f1       	breq	.+92     	; 0x160c <DIO_VidTogglePinValue+0x9e>
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	91 05       	cpc	r25, r1
    15b8:	e9 f1       	breq	.+122    	; 0x1634 <DIO_VidTogglePinValue+0xc6>
    15ba:	4f c0       	rjmp	.+158    	; 0x165a <DIO_VidTogglePinValue+0xec>
		    {
		    	case DIO_PORTA:
		    		TOGGLE_BIT(PORTA , Copy_U8Pin);
    15bc:	ab e3       	ldi	r26, 0x3B	; 59
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	eb e3       	ldi	r30, 0x3B	; 59
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_VidTogglePinValue+0x6c>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_VidTogglePinValue+0x68>
    15de:	84 27       	eor	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	3b c0       	rjmp	.+118    	; 0x165a <DIO_VidTogglePinValue+0xec>
		    		break;
		    	case DIO_PORTB:
		    		TOGGLE_BIT(PORTB , Copy_U8Pin);
    15e4:	a8 e3       	ldi	r26, 0x38	; 56
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e8 e3       	ldi	r30, 0x38	; 56
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <DIO_VidTogglePinValue+0x94>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <DIO_VidTogglePinValue+0x90>
    1606:	84 27       	eor	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	27 c0       	rjmp	.+78     	; 0x165a <DIO_VidTogglePinValue+0xec>
		    		break;
		    	case DIO_PORTC:
		    		TOGGLE_BIT(PORTC , Copy_U8Pin);
    160c:	a5 e3       	ldi	r26, 0x35	; 53
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e5 e3       	ldi	r30, 0x35	; 53
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_VidTogglePinValue+0xbc>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_VidTogglePinValue+0xb8>
    162e:	84 27       	eor	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	13 c0       	rjmp	.+38     	; 0x165a <DIO_VidTogglePinValue+0xec>
		    	    break;
		    	case DIO_PORTD:
		    		TOGGLE_BIT(PORTD , Copy_U8Pin);
    1634:	a2 e3       	ldi	r26, 0x32	; 50
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e2 e3       	ldi	r30, 0x32	; 50
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_VidTogglePinValue+0xe4>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_VidTogglePinValue+0xe0>
    1656:	84 27       	eor	r24, r20
    1658:	8c 93       	st	X, r24
		    	    break;
		    }

}
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <DIO_U8Get_PinValue>:

u8 DIO_U8Get_PinValue(u8 Copy_U8Port , u8 Copy_U8Pin)
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	00 d0       	rcall	.+0      	; 0x166e <DIO_U8Get_PinValue+0x6>
    166e:	00 d0       	rcall	.+0      	; 0x1670 <DIO_U8Get_PinValue+0x8>
    1670:	0f 92       	push	r0
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	8a 83       	std	Y+2, r24	; 0x02
    1678:	6b 83       	std	Y+3, r22	; 0x03
	u8 read;
	switch(Copy_U8Port)
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3d 83       	std	Y+5, r19	; 0x05
    1682:	2c 83       	std	Y+4, r18	; 0x04
    1684:	4c 81       	ldd	r20, Y+4	; 0x04
    1686:	5d 81       	ldd	r21, Y+5	; 0x05
    1688:	41 30       	cpi	r20, 0x01	; 1
    168a:	51 05       	cpc	r21, r1
    168c:	41 f1       	breq	.+80     	; 0x16de <DIO_U8Get_PinValue+0x76>
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	9d 81       	ldd	r25, Y+5	; 0x05
    1692:	82 30       	cpi	r24, 0x02	; 2
    1694:	91 05       	cpc	r25, r1
    1696:	34 f4       	brge	.+12     	; 0x16a4 <DIO_U8Get_PinValue+0x3c>
    1698:	2c 81       	ldd	r18, Y+4	; 0x04
    169a:	3d 81       	ldd	r19, Y+5	; 0x05
    169c:	21 15       	cp	r18, r1
    169e:	31 05       	cpc	r19, r1
    16a0:	61 f0       	breq	.+24     	; 0x16ba <DIO_U8Get_PinValue+0x52>
    16a2:	52 c0       	rjmp	.+164    	; 0x1748 <DIO_U8Get_PinValue+0xe0>
    16a4:	4c 81       	ldd	r20, Y+4	; 0x04
    16a6:	5d 81       	ldd	r21, Y+5	; 0x05
    16a8:	42 30       	cpi	r20, 0x02	; 2
    16aa:	51 05       	cpc	r21, r1
    16ac:	51 f1       	breq	.+84     	; 0x1702 <DIO_U8Get_PinValue+0x9a>
    16ae:	8c 81       	ldd	r24, Y+4	; 0x04
    16b0:	9d 81       	ldd	r25, Y+5	; 0x05
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	91 05       	cpc	r25, r1
    16b6:	b9 f1       	breq	.+110    	; 0x1726 <DIO_U8Get_PinValue+0xbe>
    16b8:	47 c0       	rjmp	.+142    	; 0x1748 <DIO_U8Get_PinValue+0xe0>
			    {
			    	case DIO_PORTA:
			    		read =GET_BIT(PINA , Copy_U8Pin);
    16ba:	e9 e3       	ldi	r30, 0x39	; 57
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a9 01       	movw	r20, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DIO_U8Get_PinValue+0x6a>
    16ce:	55 95       	asr	r21
    16d0:	47 95       	ror	r20
    16d2:	8a 95       	dec	r24
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <DIO_U8Get_PinValue+0x66>
    16d6:	ca 01       	movw	r24, r20
    16d8:	81 70       	andi	r24, 0x01	; 1
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	35 c0       	rjmp	.+106    	; 0x1748 <DIO_U8Get_PinValue+0xe0>
			    		break;
			    	case DIO_PORTB:
			    		read=GET_BIT(PINB , Copy_U8Pin);
    16de:	e6 e3       	ldi	r30, 0x36	; 54
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	88 2f       	mov	r24, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	a9 01       	movw	r20, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_U8Get_PinValue+0x8e>
    16f2:	55 95       	asr	r21
    16f4:	47 95       	ror	r20
    16f6:	8a 95       	dec	r24
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_U8Get_PinValue+0x8a>
    16fa:	ca 01       	movw	r24, r20
    16fc:	81 70       	andi	r24, 0x01	; 1
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	23 c0       	rjmp	.+70     	; 0x1748 <DIO_U8Get_PinValue+0xe0>
			    		break;
			    	case DIO_PORTC:
			    		read=GET_BIT(PINC , Copy_U8Pin);
    1702:	e3 e3       	ldi	r30, 0x33	; 51
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a9 01       	movw	r20, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_U8Get_PinValue+0xb2>
    1716:	55 95       	asr	r21
    1718:	47 95       	ror	r20
    171a:	8a 95       	dec	r24
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_U8Get_PinValue+0xae>
    171e:	ca 01       	movw	r24, r20
    1720:	81 70       	andi	r24, 0x01	; 1
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	11 c0       	rjmp	.+34     	; 0x1748 <DIO_U8Get_PinValue+0xe0>
			    	    break;
			    	case DIO_PORTD:
			    		read=GET_BIT(PIND , Copy_U8Pin);
    1726:	e0 e3       	ldi	r30, 0x30	; 48
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a9 01       	movw	r20, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <DIO_U8Get_PinValue+0xd6>
    173a:	55 95       	asr	r21
    173c:	47 95       	ror	r20
    173e:	8a 95       	dec	r24
    1740:	e2 f7       	brpl	.-8      	; 0x173a <DIO_U8Get_PinValue+0xd2>
    1742:	ca 01       	movw	r24, r20
    1744:	81 70       	andi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01
			    	    break;
			    }
	return read;
    1748:	89 81       	ldd	r24, Y+1	; 0x01
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <IR_init>:
#include "Dc_Motors.h"
#include"avr/delay.h"
#include"LCD.h"

void IR_init()
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62

	DIO_VidSetPinDirection(IR1_PORT,IR1_PIN,DIO_INPUT);
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	63 e0       	ldi	r22, 0x03	; 3
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(IR1_PORT,IR1_PIN,DIO_HIGH);
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	63 e0       	ldi	r22, 0x03	; 3
    1770:	41 e0       	ldi	r20, 0x01	; 1
    1772:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>

	DIO_VidSetPinDirection(IR2_PORT,IR2_PIN,DIO_INPUT);
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	64 e0       	ldi	r22, 0x04	; 4
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(IR2_PORT,IR2_PIN,DIO_HIGH);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	64 e0       	ldi	r22, 0x04	; 4
    1784:	41 e0       	ldi	r20, 0x01	; 1
    1786:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>

}
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <IR1_read>:

u8 IR1_read()
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	0f 92       	push	r0
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
	u8 read;
	read=DIO_U8Get_PinValue(IR1_PORT,IR1_PIN);
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	63 e0       	ldi	r22, 0x03	; 3
    179e:	0e 94 34 0b 	call	0x1668	; 0x1668 <DIO_U8Get_PinValue>
    17a2:	89 83       	std	Y+1, r24	; 0x01
	return read;
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <IR2_read>:

u8 IR2_read()
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
	u8 read;
	read=DIO_U8Get_PinValue(IR2_PORT,IR2_PIN);
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	64 e0       	ldi	r22, 0x04	; 4
    17bc:	0e 94 34 0b 	call	0x1668	; 0x1668 <DIO_U8Get_PinValue>
    17c0:	89 83       	std	Y+1, r24	; 0x01
	return read;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <IR_MakeDecision>:

void IR_MakeDecision()
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	6e 97       	sbiw	r28, 0x1e	; 30
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
	u8 left = IR1_read();
    17e0:	0e 94 c8 0b 	call	0x1790	; 0x1790 <IR1_read>
    17e4:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 right = IR2_read();
    17e6:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <IR2_read>
    17ea:	8d 8f       	std	Y+29, r24	; 0x1d
	//let 0 is black(line) , 1 is white
	if(left ==1 && right ==1) // 2 ir see white so go forward
    17ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	69 f4       	brne	.+26     	; 0x180c <IR_MakeDecision+0x40>
    17f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	51 f4       	brne	.+20     	; 0x180c <IR_MakeDecision+0x40>
	{
		LCD_SEND_COMMAND(0x01);
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
		LCD_VidSendStrig("move forword");
    17fe:	80 e6       	ldi	r24, 0x60	; 96
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_VidSendStrig>
		DC_MOTOR_MoveForward();
    1806:	0e 94 22 07 	call	0xe44	; 0xe44 <DC_MOTOR_MoveForward>
    180a:	0e c1       	rjmp	.+540    	; 0x1a28 <IR_MakeDecision+0x25c>

	}
	else if(left ==1 && right ==0) // the right ir see black(line) so car must move forward right
    180c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	09 f0       	breq	.+2      	; 0x1814 <IR_MakeDecision+0x48>
    1812:	82 c0       	rjmp	.+260    	; 0x1918 <IR_MakeDecision+0x14c>
    1814:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1816:	88 23       	and	r24, r24
    1818:	09 f0       	breq	.+2      	; 0x181c <IR_MakeDecision+0x50>
    181a:	7e c0       	rjmp	.+252    	; 0x1918 <IR_MakeDecision+0x14c>
	{
		DC_MOTOR_MoveForwardRight();
    181c:	0e 94 6c 07 	call	0xed8	; 0xed8 <DC_MOTOR_MoveForwardRight>
		LCD_SEND_COMMAND(0x01);
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
		LCD_VidSendStrig("move forword Right");
    1826:	8d e6       	ldi	r24, 0x6D	; 109
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_VidSendStrig>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a8 ec       	ldi	r26, 0xC8	; 200
    1834:	b2 e4       	ldi	r27, 0x42	; 66
    1836:	89 8f       	std	Y+25, r24	; 0x19
    1838:	9a 8f       	std	Y+26, r25	; 0x1a
    183a:	ab 8f       	std	Y+27, r26	; 0x1b
    183c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183e:	69 8d       	ldd	r22, Y+25	; 0x19
    1840:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1842:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1844:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4a ef       	ldi	r20, 0xFA	; 250
    184c:	54 e4       	ldi	r21, 0x44	; 68
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	8d 8b       	std	Y+21, r24	; 0x15
    1858:	9e 8b       	std	Y+22, r25	; 0x16
    185a:	af 8b       	std	Y+23, r26	; 0x17
    185c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    185e:	6d 89       	ldd	r22, Y+21	; 0x15
    1860:	7e 89       	ldd	r23, Y+22	; 0x16
    1862:	8f 89       	ldd	r24, Y+23	; 0x17
    1864:	98 8d       	ldd	r25, Y+24	; 0x18
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	5f e3       	ldi	r21, 0x3F	; 63
    186e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1872:	88 23       	and	r24, r24
    1874:	2c f4       	brge	.+10     	; 0x1880 <IR_MakeDecision+0xb4>
		__ticks = 1;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	9c 8b       	std	Y+20, r25	; 0x14
    187c:	8b 8b       	std	Y+19, r24	; 0x13
    187e:	3f c0       	rjmp	.+126    	; 0x18fe <IR_MakeDecision+0x132>
	else if (__tmp > 65535)
    1880:	6d 89       	ldd	r22, Y+21	; 0x15
    1882:	7e 89       	ldd	r23, Y+22	; 0x16
    1884:	8f 89       	ldd	r24, Y+23	; 0x17
    1886:	98 8d       	ldd	r25, Y+24	; 0x18
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	3f ef       	ldi	r19, 0xFF	; 255
    188c:	4f e7       	ldi	r20, 0x7F	; 127
    188e:	57 e4       	ldi	r21, 0x47	; 71
    1890:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1894:	18 16       	cp	r1, r24
    1896:	4c f5       	brge	.+82     	; 0x18ea <IR_MakeDecision+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1898:	69 8d       	ldd	r22, Y+25	; 0x19
    189a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    189c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    189e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e2       	ldi	r20, 0x20	; 32
    18a6:	51 e4       	ldi	r21, 0x41	; 65
    18a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	bc 01       	movw	r22, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9c 8b       	std	Y+20, r25	; 0x14
    18be:	8b 8b       	std	Y+19, r24	; 0x13
    18c0:	0f c0       	rjmp	.+30     	; 0x18e0 <IR_MakeDecision+0x114>
    18c2:	88 ec       	ldi	r24, 0xC8	; 200
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9a 8b       	std	Y+18, r25	; 0x12
    18c8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18ca:	89 89       	ldd	r24, Y+17	; 0x11
    18cc:	9a 89       	ldd	r25, Y+18	; 0x12
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <IR_MakeDecision+0x102>
    18d2:	9a 8b       	std	Y+18, r25	; 0x12
    18d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d6:	8b 89       	ldd	r24, Y+19	; 0x13
    18d8:	9c 89       	ldd	r25, Y+20	; 0x14
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	9c 8b       	std	Y+20, r25	; 0x14
    18de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e0:	8b 89       	ldd	r24, Y+19	; 0x13
    18e2:	9c 89       	ldd	r25, Y+20	; 0x14
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	69 f7       	brne	.-38     	; 0x18c2 <IR_MakeDecision+0xf6>
    18e8:	14 c0       	rjmp	.+40     	; 0x1912 <IR_MakeDecision+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ea:	6d 89       	ldd	r22, Y+21	; 0x15
    18ec:	7e 89       	ldd	r23, Y+22	; 0x16
    18ee:	8f 89       	ldd	r24, Y+23	; 0x17
    18f0:	98 8d       	ldd	r25, Y+24	; 0x18
    18f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9c 8b       	std	Y+20, r25	; 0x14
    18fc:	8b 8b       	std	Y+19, r24	; 0x13
    18fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1900:	9c 89       	ldd	r25, Y+20	; 0x14
    1902:	98 8b       	std	Y+16, r25	; 0x10
    1904:	8f 87       	std	Y+15, r24	; 0x0f
    1906:	8f 85       	ldd	r24, Y+15	; 0x0f
    1908:	98 89       	ldd	r25, Y+16	; 0x10
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <IR_MakeDecision+0x13e>
    190e:	98 8b       	std	Y+16, r25	; 0x10
    1910:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		IR_MakeDecision();
    1912:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <IR_MakeDecision>
    1916:	88 c0       	rjmp	.+272    	; 0x1a28 <IR_MakeDecision+0x25c>


	}
	else if(left ==0 && right ==1) //the left see the line so car move forward left
    1918:	8e 8d       	ldd	r24, Y+30	; 0x1e
    191a:	88 23       	and	r24, r24
    191c:	09 f0       	breq	.+2      	; 0x1920 <IR_MakeDecision+0x154>
    191e:	82 c0       	rjmp	.+260    	; 0x1a24 <IR_MakeDecision+0x258>
    1920:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	09 f0       	breq	.+2      	; 0x1928 <IR_MakeDecision+0x15c>
    1926:	7e c0       	rjmp	.+252    	; 0x1a24 <IR_MakeDecision+0x258>
	{
		DC_MOTOR_MoveForwardLeft();
    1928:	0e 94 91 07 	call	0xf22	; 0xf22 <DC_MOTOR_MoveForwardLeft>
		LCD_SEND_COMMAND(0x01);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
		LCD_VidSendStrig("move forword left");
    1932:	80 e8       	ldi	r24, 0x80	; 128
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_VidSendStrig>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a8 ec       	ldi	r26, 0xC8	; 200
    1940:	b2 e4       	ldi	r27, 0x42	; 66
    1942:	8b 87       	std	Y+11, r24	; 0x0b
    1944:	9c 87       	std	Y+12, r25	; 0x0c
    1946:	ad 87       	std	Y+13, r26	; 0x0d
    1948:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194a:	6b 85       	ldd	r22, Y+11	; 0x0b
    194c:	7c 85       	ldd	r23, Y+12	; 0x0c
    194e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1950:	9e 85       	ldd	r25, Y+14	; 0x0e
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	4a ef       	ldi	r20, 0xFA	; 250
    1958:	54 e4       	ldi	r21, 0x44	; 68
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	8f 83       	std	Y+7, r24	; 0x07
    1964:	98 87       	std	Y+8, r25	; 0x08
    1966:	a9 87       	std	Y+9, r26	; 0x09
    1968:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    196a:	6f 81       	ldd	r22, Y+7	; 0x07
    196c:	78 85       	ldd	r23, Y+8	; 0x08
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f e3       	ldi	r21, 0x3F	; 63
    197a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    197e:	88 23       	and	r24, r24
    1980:	2c f4       	brge	.+10     	; 0x198c <IR_MakeDecision+0x1c0>
		__ticks = 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	3f c0       	rjmp	.+126    	; 0x1a0a <IR_MakeDecision+0x23e>
	else if (__tmp > 65535)
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	3f ef       	ldi	r19, 0xFF	; 255
    1998:	4f e7       	ldi	r20, 0x7F	; 127
    199a:	57 e4       	ldi	r21, 0x47	; 71
    199c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a0:	18 16       	cp	r1, r24
    19a2:	4c f5       	brge	.+82     	; 0x19f6 <IR_MakeDecision+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e2       	ldi	r20, 0x20	; 32
    19b2:	51 e4       	ldi	r21, 0x41	; 65
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	bc 01       	movw	r22, r24
    19be:	cd 01       	movw	r24, r26
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <IR_MakeDecision+0x220>
    19ce:	88 ec       	ldi	r24, 0xC8	; 200
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9c 83       	std	Y+4, r25	; 0x04
    19d4:	8b 83       	std	Y+3, r24	; 0x03
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <IR_MakeDecision+0x20e>
    19de:	9c 83       	std	Y+4, r25	; 0x04
    19e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	9e 83       	std	Y+6, r25	; 0x06
    19ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ec:	8d 81       	ldd	r24, Y+5	; 0x05
    19ee:	9e 81       	ldd	r25, Y+6	; 0x06
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	69 f7       	brne	.-38     	; 0x19ce <IR_MakeDecision+0x202>
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <IR_MakeDecision+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f6:	6f 81       	ldd	r22, Y+7	; 0x07
    19f8:	78 85       	ldd	r23, Y+8	; 0x08
    19fa:	89 85       	ldd	r24, Y+9	; 0x09
    19fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <IR_MakeDecision+0x24a>
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		IR_MakeDecision();
    1a1e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <IR_MakeDecision>
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <IR_MakeDecision+0x25c>
	}
	else
	{
		DC_MOTOR_Stop();
    1a24:	0e 94 00 08 	call	0x1000	; 0x1000 <DC_MOTOR_Stop>
	}

}
    1a28:	6e 96       	adiw	r28, 0x1e	; 30
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <LCD_SEND_COMMAND>:
#include"LCD.h"
void LCD_SEND_COMMAND(u8 Copy_U8LcdCommand)
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	69 97       	sbiw	r28, 0x19	; 25
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	63 e0       	ldi	r22, 0x03	; 3
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    1a5a:	83 e0       	ldi	r24, 0x03	; 3
    1a5c:	62 e0       	ldi	r22, 0x02	; 2
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8LcdCommand);
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	69 8d       	ldd	r22, Y+25	; 0x19
    1a68:	0e 94 76 0a 	call	0x14ec	; 0x14ec <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_HIGH);
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	62 e0       	ldi	r22, 0x02	; 2
    1a70:	41 e0       	ldi	r20, 0x01	; 1
    1a72:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a0 e8       	ldi	r26, 0x80	; 128
    1a7c:	bf e3       	ldi	r27, 0x3F	; 63
    1a7e:	8d 8b       	std	Y+21, r24	; 0x15
    1a80:	9e 8b       	std	Y+22, r25	; 0x16
    1a82:	af 8b       	std	Y+23, r26	; 0x17
    1a84:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a86:	6d 89       	ldd	r22, Y+21	; 0x15
    1a88:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8e:	2b ea       	ldi	r18, 0xAB	; 171
    1a90:	3a ea       	ldi	r19, 0xAA	; 170
    1a92:	4a e2       	ldi	r20, 0x2A	; 42
    1a94:	50 e4       	ldi	r21, 0x40	; 64
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	89 8b       	std	Y+17, r24	; 0x11
    1aa0:	9a 8b       	std	Y+18, r25	; 0x12
    1aa2:	ab 8b       	std	Y+19, r26	; 0x13
    1aa4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1aa6:	69 89       	ldd	r22, Y+17	; 0x11
    1aa8:	7a 89       	ldd	r23, Y+18	; 0x12
    1aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    1aac:	9c 89       	ldd	r25, Y+20	; 0x14
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	1c f4       	brge	.+6      	; 0x1ac4 <LCD_SEND_COMMAND+0x8a>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	88 8b       	std	Y+16, r24	; 0x10
    1ac2:	91 c0       	rjmp	.+290    	; 0x1be6 <LCD_SEND_COMMAND+0x1ac>
	else if (__tmp > 255)
    1ac4:	69 89       	ldd	r22, Y+17	; 0x11
    1ac6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aca:	9c 89       	ldd	r25, Y+20	; 0x14
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	53 e4       	ldi	r21, 0x43	; 67
    1ad4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	0c f0       	brlt	.+2      	; 0x1ade <LCD_SEND_COMMAND+0xa4>
    1adc:	7b c0       	rjmp	.+246    	; 0x1bd4 <LCD_SEND_COMMAND+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1ade:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a e7       	ldi	r20, 0x7A	; 122
    1aec:	54 e4       	ldi	r21, 0x44	; 68
    1aee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8c 87       	std	Y+12, r24	; 0x0c
    1af8:	9d 87       	std	Y+13, r25	; 0x0d
    1afa:	ae 87       	std	Y+14, r26	; 0x0e
    1afc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b00:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b02:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b04:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4a ef       	ldi	r20, 0xFA	; 250
    1b0c:	54 e4       	ldi	r21, 0x44	; 68
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	88 87       	std	Y+8, r24	; 0x08
    1b18:	99 87       	std	Y+9, r25	; 0x09
    1b1a:	aa 87       	std	Y+10, r26	; 0x0a
    1b1c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b1e:	68 85       	ldd	r22, Y+8	; 0x08
    1b20:	79 85       	ldd	r23, Y+9	; 0x09
    1b22:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b24:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <LCD_SEND_COMMAND+0x106>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9f 83       	std	Y+7, r25	; 0x07
    1b3c:	8e 83       	std	Y+6, r24	; 0x06
    1b3e:	3f c0       	rjmp	.+126    	; 0x1bbe <LCD_SEND_COMMAND+0x184>
	else if (__tmp > 65535)
    1b40:	68 85       	ldd	r22, Y+8	; 0x08
    1b42:	79 85       	ldd	r23, Y+9	; 0x09
    1b44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	4c f5       	brge	.+82     	; 0x1baa <LCD_SEND_COMMAND+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b5a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9f 83       	std	Y+7, r25	; 0x07
    1b7e:	8e 83       	std	Y+6, r24	; 0x06
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <LCD_SEND_COMMAND+0x166>
    1b82:	88 ec       	ldi	r24, 0xC8	; 200
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9d 83       	std	Y+5, r25	; 0x05
    1b88:	8c 83       	std	Y+4, r24	; 0x04
    1b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <LCD_SEND_COMMAND+0x154>
    1b92:	9d 83       	std	Y+5, r25	; 0x05
    1b94:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	8e 81       	ldd	r24, Y+6	; 0x06
    1b98:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	9f 83       	std	Y+7, r25	; 0x07
    1b9e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	69 f7       	brne	.-38     	; 0x1b82 <LCD_SEND_COMMAND+0x148>
    1ba8:	24 c0       	rjmp	.+72     	; 0x1bf2 <LCD_SEND_COMMAND+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	68 85       	ldd	r22, Y+8	; 0x08
    1bac:	79 85       	ldd	r23, Y+9	; 0x09
    1bae:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9f 83       	std	Y+7, r25	; 0x07
    1bbc:	8e 83       	std	Y+6, r24	; 0x06
    1bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc2:	9b 83       	std	Y+3, r25	; 0x03
    1bc4:	8a 83       	std	Y+2, r24	; 0x02
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <LCD_SEND_COMMAND+0x190>
    1bce:	9b 83       	std	Y+3, r25	; 0x03
    1bd0:	8a 83       	std	Y+2, r24	; 0x02
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <LCD_SEND_COMMAND+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bd4:	69 89       	ldd	r22, Y+17	; 0x11
    1bd6:	7a 89       	ldd	r23, Y+18	; 0x12
    1bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bda:	9c 89       	ldd	r25, Y+20	; 0x14
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	88 8b       	std	Y+16, r24	; 0x10
    1be6:	88 89       	ldd	r24, Y+16	; 0x10
    1be8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	8a 95       	dec	r24
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_SEND_COMMAND+0x1b2>
    1bf0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	62 e0       	ldi	r22, 0x02	; 2
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	//_delay_us(1);

}
    1bfc:	69 96       	adiw	r28, 0x19	; 25
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <LCD_SEND_Char>:
void LCD_SEND_Char(u8 Copy_U8LcdData) //to send character
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	69 97       	sbiw	r28, 0x19	; 25
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	89 8f       	std	Y+25, r24	; 0x19
	DIO_VidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_HIGH);
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	63 e0       	ldi	r22, 0x03	; 3
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	62 e0       	ldi	r22, 0x02	; 2
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8LcdData);
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_HIGH);
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	62 e0       	ldi	r22, 0x02	; 2
    1c44:	41 e0       	ldi	r20, 0x01	; 1
    1c46:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 e8       	ldi	r26, 0x80	; 128
    1c50:	bf e3       	ldi	r27, 0x3F	; 63
    1c52:	8d 8b       	std	Y+21, r24	; 0x15
    1c54:	9e 8b       	std	Y+22, r25	; 0x16
    1c56:	af 8b       	std	Y+23, r26	; 0x17
    1c58:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c60:	98 8d       	ldd	r25, Y+24	; 0x18
    1c62:	2b ea       	ldi	r18, 0xAB	; 171
    1c64:	3a ea       	ldi	r19, 0xAA	; 170
    1c66:	4a e2       	ldi	r20, 0x2A	; 42
    1c68:	50 e4       	ldi	r21, 0x40	; 64
    1c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	89 8b       	std	Y+17, r24	; 0x11
    1c74:	9a 8b       	std	Y+18, r25	; 0x12
    1c76:	ab 8b       	std	Y+19, r26	; 0x13
    1c78:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c7a:	69 89       	ldd	r22, Y+17	; 0x11
    1c7c:	7a 89       	ldd	r23, Y+18	; 0x12
    1c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c80:	9c 89       	ldd	r25, Y+20	; 0x14
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e8       	ldi	r20, 0x80	; 128
    1c88:	5f e3       	ldi	r21, 0x3F	; 63
    1c8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c8e:	88 23       	and	r24, r24
    1c90:	1c f4       	brge	.+6      	; 0x1c98 <LCD_SEND_Char+0x8a>
		__ticks = 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	88 8b       	std	Y+16, r24	; 0x10
    1c96:	91 c0       	rjmp	.+290    	; 0x1dba <LCD_SEND_Char+0x1ac>
	else if (__tmp > 255)
    1c98:	69 89       	ldd	r22, Y+17	; 0x11
    1c9a:	7a 89       	ldd	r23, Y+18	; 0x12
    1c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4f e7       	ldi	r20, 0x7F	; 127
    1ca6:	53 e4       	ldi	r21, 0x43	; 67
    1ca8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cac:	18 16       	cp	r1, r24
    1cae:	0c f0       	brlt	.+2      	; 0x1cb2 <LCD_SEND_Char+0xa4>
    1cb0:	7b c0       	rjmp	.+246    	; 0x1da8 <LCD_SEND_Char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a e7       	ldi	r20, 0x7A	; 122
    1cc0:	54 e4       	ldi	r21, 0x44	; 68
    1cc2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8c 87       	std	Y+12, r24	; 0x0c
    1ccc:	9d 87       	std	Y+13, r25	; 0x0d
    1cce:	ae 87       	std	Y+14, r26	; 0x0e
    1cd0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cd4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a ef       	ldi	r20, 0xFA	; 250
    1ce0:	54 e4       	ldi	r21, 0x44	; 68
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	88 87       	std	Y+8, r24	; 0x08
    1cec:	99 87       	std	Y+9, r25	; 0x09
    1cee:	aa 87       	std	Y+10, r26	; 0x0a
    1cf0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1cf2:	68 85       	ldd	r22, Y+8	; 0x08
    1cf4:	79 85       	ldd	r23, Y+9	; 0x09
    1cf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cf8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <LCD_SEND_Char+0x106>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9f 83       	std	Y+7, r25	; 0x07
    1d10:	8e 83       	std	Y+6, r24	; 0x06
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <LCD_SEND_Char+0x184>
	else if (__tmp > 65535)
    1d14:	68 85       	ldd	r22, Y+8	; 0x08
    1d16:	79 85       	ldd	r23, Y+9	; 0x09
    1d18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <LCD_SEND_Char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d2e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d30:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d32:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9f 83       	std	Y+7, r25	; 0x07
    1d52:	8e 83       	std	Y+6, r24	; 0x06
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_SEND_Char+0x166>
    1d56:	88 ec       	ldi	r24, 0xC8	; 200
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9d 83       	std	Y+5, r25	; 0x05
    1d5c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d60:	9d 81       	ldd	r25, Y+5	; 0x05
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_SEND_Char+0x154>
    1d66:	9d 83       	std	Y+5, r25	; 0x05
    1d68:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9f 83       	std	Y+7, r25	; 0x07
    1d72:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8e 81       	ldd	r24, Y+6	; 0x06
    1d76:	9f 81       	ldd	r25, Y+7	; 0x07
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_SEND_Char+0x148>
    1d7c:	24 c0       	rjmp	.+72     	; 0x1dc6 <LCD_SEND_Char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	68 85       	ldd	r22, Y+8	; 0x08
    1d80:	79 85       	ldd	r23, Y+9	; 0x09
    1d82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d84:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9f 83       	std	Y+7, r25	; 0x07
    1d90:	8e 83       	std	Y+6, r24	; 0x06
    1d92:	8e 81       	ldd	r24, Y+6	; 0x06
    1d94:	9f 81       	ldd	r25, Y+7	; 0x07
    1d96:	9b 83       	std	Y+3, r25	; 0x03
    1d98:	8a 83       	std	Y+2, r24	; 0x02
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_SEND_Char+0x190>
    1da2:	9b 83       	std	Y+3, r25	; 0x03
    1da4:	8a 83       	std	Y+2, r24	; 0x02
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <LCD_SEND_Char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1da8:	69 89       	ldd	r22, Y+17	; 0x11
    1daa:	7a 89       	ldd	r23, Y+18	; 0x12
    1dac:	8b 89       	ldd	r24, Y+19	; 0x13
    1dae:	9c 89       	ldd	r25, Y+20	; 0x14
    1db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	88 8b       	std	Y+16, r24	; 0x10
    1dba:	88 89       	ldd	r24, Y+16	; 0x10
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	8a 95       	dec	r24
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_SEND_Char+0x1b2>
    1dc4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_VidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_LOW);
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	62 e0       	ldi	r22, 0x02	; 2
    1dca:	40 e0       	ldi	r20, 0x00	; 0
    1dcc:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	//_delay_us(1);

}
    1dd0:	69 96       	adiw	r28, 0x19	; 25
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <LCD_VidInit>:
void LCD_VidInit(void)
{
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	cc 54       	subi	r28, 0x4C	; 76
    1df0:	d0 40       	sbci	r29, 0x00	; 0
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_DATA_PORT,DIO_ALL_OUTPUT);
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	6f ef       	ldi	r22, 0xFF	; 255
    1e00:	0e 94 35 0a 	call	0x146a	; 0x146a <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_OUTPUT);
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	62 e0       	ldi	r22, 0x02	; 2
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1e0e:	83 e0       	ldi	r24, 0x03	; 3
    1e10:	62 e0       	ldi	r22, 0x02	; 2
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1e18:	83 e0       	ldi	r24, 0x03	; 3
    1e1a:	63 e0       	ldi	r22, 0x03	; 3
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_VidSetPinDirection>
    1e22:	fe 01       	movw	r30, r28
    1e24:	e7 5b       	subi	r30, 0xB7	; 183
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	ac e0       	ldi	r26, 0x0C	; 12
    1e2e:	b2 e4       	ldi	r27, 0x42	; 66
    1e30:	80 83       	st	Z, r24
    1e32:	91 83       	std	Z+1, r25	; 0x01
    1e34:	a2 83       	std	Z+2, r26	; 0x02
    1e36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	8e 01       	movw	r16, r28
    1e3a:	0b 5b       	subi	r16, 0xBB	; 187
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e7 5b       	subi	r30, 0xB7	; 183
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	4a ef       	ldi	r20, 0xFA	; 250
    1e52:	54 e4       	ldi	r21, 0x44	; 68
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	80 83       	st	Z, r24
    1e60:	91 83       	std	Z+1, r25	; 0x01
    1e62:	a2 83       	std	Z+2, r26	; 0x02
    1e64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e66:	fe 01       	movw	r30, r28
    1e68:	eb 5b       	subi	r30, 0xBB	; 187
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	44 f4       	brge	.+16     	; 0x1e94 <LCD_VidInit+0xb2>
		__ticks = 1;
    1e84:	fe 01       	movw	r30, r28
    1e86:	ed 5b       	subi	r30, 0xBD	; 189
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	91 83       	std	Z+1, r25	; 0x01
    1e90:	80 83       	st	Z, r24
    1e92:	64 c0       	rjmp	.+200    	; 0x1f5c <LCD_VidInit+0x17a>
	else if (__tmp > 65535)
    1e94:	fe 01       	movw	r30, r28
    1e96:	eb 5b       	subi	r30, 0xBB	; 187
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	60 81       	ld	r22, Z
    1e9c:	71 81       	ldd	r23, Z+1	; 0x01
    1e9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ea0:	93 81       	ldd	r25, Z+3	; 0x03
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	3f ef       	ldi	r19, 0xFF	; 255
    1ea6:	4f e7       	ldi	r20, 0x7F	; 127
    1ea8:	57 e4       	ldi	r21, 0x47	; 71
    1eaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eae:	18 16       	cp	r1, r24
    1eb0:	0c f0       	brlt	.+2      	; 0x1eb4 <LCD_VidInit+0xd2>
    1eb2:	43 c0       	rjmp	.+134    	; 0x1f3a <LCD_VidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e7 5b       	subi	r30, 0xB7	; 183
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	8e 01       	movw	r16, r28
    1ed4:	0d 5b       	subi	r16, 0xBD	; 189
    1ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
    1eea:	1f c0       	rjmp	.+62     	; 0x1f2a <LCD_VidInit+0x148>
    1eec:	fe 01       	movw	r30, r28
    1eee:	ef 5b       	subi	r30, 0xBF	; 191
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	88 ec       	ldi	r24, 0xC8	; 200
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1efa:	fe 01       	movw	r30, r28
    1efc:	ef 5b       	subi	r30, 0xBF	; 191
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 81       	ld	r24, Z
    1f02:	91 81       	ldd	r25, Z+1	; 0x01
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_VidInit+0x122>
    1f08:	fe 01       	movw	r30, r28
    1f0a:	ef 5b       	subi	r30, 0xBF	; 191
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f12:	de 01       	movw	r26, r28
    1f14:	ad 5b       	subi	r26, 0xBD	; 189
    1f16:	bf 4f       	sbci	r27, 0xFF	; 255
    1f18:	fe 01       	movw	r30, r28
    1f1a:	ed 5b       	subi	r30, 0xBD	; 189
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	80 81       	ld	r24, Z
    1f20:	91 81       	ldd	r25, Z+1	; 0x01
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	11 96       	adiw	r26, 0x01	; 1
    1f26:	9c 93       	st	X, r25
    1f28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ed 5b       	subi	r30, 0xBD	; 189
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	80 81       	ld	r24, Z
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	d1 f6       	brne	.-76     	; 0x1eec <LCD_VidInit+0x10a>
    1f38:	24 c0       	rjmp	.+72     	; 0x1f82 <LCD_VidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3a:	8e 01       	movw	r16, r28
    1f3c:	0d 5b       	subi	r16, 0xBD	; 189
    1f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f40:	fe 01       	movw	r30, r28
    1f42:	eb 5b       	subi	r30, 0xBB	; 187
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	60 81       	ld	r22, Z
    1f48:	71 81       	ldd	r23, Z+1	; 0x01
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	93 81       	ldd	r25, Z+3	; 0x03
    1f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	f8 01       	movw	r30, r16
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	80 83       	st	Z, r24
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ed 5b       	subi	r30, 0xBD	; 189
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	fe 01       	movw	r30, r28
    1f68:	ff 96       	adiw	r30, 0x3f	; 63
    1f6a:	91 83       	std	Z+1, r25	; 0x01
    1f6c:	80 83       	st	Z, r24
    1f6e:	fe 01       	movw	r30, r28
    1f70:	ff 96       	adiw	r30, 0x3f	; 63
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <LCD_VidInit+0x194>
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	ff 96       	adiw	r30, 0x3f	; 63
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
	//DELAY MORE THAN 30 MS
	_delay_ms(35);

	LCD_SEND_COMMAND(0b00111000); //0011NFXX ,    N=HOW MANY LINES YOU WANT TO USE(1)  ,   F= FONT SIZE(0=5*7)
    1f82:	88 e3       	ldi	r24, 0x38	; 56
    1f84:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	a8 e4       	ldi	r26, 0x48	; 72
    1f8e:	b2 e4       	ldi	r27, 0x42	; 66
    1f90:	8b af       	std	Y+59, r24	; 0x3b
    1f92:	9c af       	std	Y+60, r25	; 0x3c
    1f94:	ad af       	std	Y+61, r26	; 0x3d
    1f96:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f98:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f9a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fa0:	2b ea       	ldi	r18, 0xAB	; 171
    1fa2:	3a ea       	ldi	r19, 0xAA	; 170
    1fa4:	4a e2       	ldi	r20, 0x2A	; 42
    1fa6:	50 e4       	ldi	r21, 0x40	; 64
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8f ab       	std	Y+55, r24	; 0x37
    1fb2:	98 af       	std	Y+56, r25	; 0x38
    1fb4:	a9 af       	std	Y+57, r26	; 0x39
    1fb6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1fb8:	6f a9       	ldd	r22, Y+55	; 0x37
    1fba:	78 ad       	ldd	r23, Y+56	; 0x38
    1fbc:	89 ad       	ldd	r24, Y+57	; 0x39
    1fbe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e8       	ldi	r20, 0x80	; 128
    1fc6:	5f e3       	ldi	r21, 0x3F	; 63
    1fc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fcc:	88 23       	and	r24, r24
    1fce:	1c f4       	brge	.+6      	; 0x1fd6 <LCD_VidInit+0x1f4>
		__ticks = 1;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	8e ab       	std	Y+54, r24	; 0x36
    1fd4:	91 c0       	rjmp	.+290    	; 0x20f8 <LCD_VidInit+0x316>
	else if (__tmp > 255)
    1fd6:	6f a9       	ldd	r22, Y+55	; 0x37
    1fd8:	78 ad       	ldd	r23, Y+56	; 0x38
    1fda:	89 ad       	ldd	r24, Y+57	; 0x39
    1fdc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	4f e7       	ldi	r20, 0x7F	; 127
    1fe4:	53 e4       	ldi	r21, 0x43	; 67
    1fe6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	0c f0       	brlt	.+2      	; 0x1ff0 <LCD_VidInit+0x20e>
    1fee:	7b c0       	rjmp	.+246    	; 0x20e6 <LCD_VidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1ff0:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ff2:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ff4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ff6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	4a e7       	ldi	r20, 0x7A	; 122
    1ffe:	54 e4       	ldi	r21, 0x44	; 68
    2000:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	8a ab       	std	Y+50, r24	; 0x32
    200a:	9b ab       	std	Y+51, r25	; 0x33
    200c:	ac ab       	std	Y+52, r26	; 0x34
    200e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2010:	6a a9       	ldd	r22, Y+50	; 0x32
    2012:	7b a9       	ldd	r23, Y+51	; 0x33
    2014:	8c a9       	ldd	r24, Y+52	; 0x34
    2016:	9d a9       	ldd	r25, Y+53	; 0x35
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	4a ef       	ldi	r20, 0xFA	; 250
    201e:	54 e4       	ldi	r21, 0x44	; 68
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	8e a7       	std	Y+46, r24	; 0x2e
    202a:	9f a7       	std	Y+47, r25	; 0x2f
    202c:	a8 ab       	std	Y+48, r26	; 0x30
    202e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2030:	6e a5       	ldd	r22, Y+46	; 0x2e
    2032:	7f a5       	ldd	r23, Y+47	; 0x2f
    2034:	88 a9       	ldd	r24, Y+48	; 0x30
    2036:	99 a9       	ldd	r25, Y+49	; 0x31
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e8       	ldi	r20, 0x80	; 128
    203e:	5f e3       	ldi	r21, 0x3F	; 63
    2040:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2044:	88 23       	and	r24, r24
    2046:	2c f4       	brge	.+10     	; 0x2052 <LCD_VidInit+0x270>
		__ticks = 1;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	9d a7       	std	Y+45, r25	; 0x2d
    204e:	8c a7       	std	Y+44, r24	; 0x2c
    2050:	3f c0       	rjmp	.+126    	; 0x20d0 <LCD_VidInit+0x2ee>
	else if (__tmp > 65535)
    2052:	6e a5       	ldd	r22, Y+46	; 0x2e
    2054:	7f a5       	ldd	r23, Y+47	; 0x2f
    2056:	88 a9       	ldd	r24, Y+48	; 0x30
    2058:	99 a9       	ldd	r25, Y+49	; 0x31
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	3f ef       	ldi	r19, 0xFF	; 255
    205e:	4f e7       	ldi	r20, 0x7F	; 127
    2060:	57 e4       	ldi	r21, 0x47	; 71
    2062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2066:	18 16       	cp	r1, r24
    2068:	4c f5       	brge	.+82     	; 0x20bc <LCD_VidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206a:	6a a9       	ldd	r22, Y+50	; 0x32
    206c:	7b a9       	ldd	r23, Y+51	; 0x33
    206e:	8c a9       	ldd	r24, Y+52	; 0x34
    2070:	9d a9       	ldd	r25, Y+53	; 0x35
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e2       	ldi	r20, 0x20	; 32
    2078:	51 e4       	ldi	r21, 0x41	; 65
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9d a7       	std	Y+45, r25	; 0x2d
    2090:	8c a7       	std	Y+44, r24	; 0x2c
    2092:	0f c0       	rjmp	.+30     	; 0x20b2 <LCD_VidInit+0x2d0>
    2094:	88 ec       	ldi	r24, 0xC8	; 200
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	9b a7       	std	Y+43, r25	; 0x2b
    209a:	8a a7       	std	Y+42, r24	; 0x2a
    209c:	8a a5       	ldd	r24, Y+42	; 0x2a
    209e:	9b a5       	ldd	r25, Y+43	; 0x2b
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <LCD_VidInit+0x2be>
    20a4:	9b a7       	std	Y+43, r25	; 0x2b
    20a6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    20aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	9d a7       	std	Y+45, r25	; 0x2d
    20b0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b2:	8c a5       	ldd	r24, Y+44	; 0x2c
    20b4:	9d a5       	ldd	r25, Y+45	; 0x2d
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	69 f7       	brne	.-38     	; 0x2094 <LCD_VidInit+0x2b2>
    20ba:	24 c0       	rjmp	.+72     	; 0x2104 <LCD_VidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20bc:	6e a5       	ldd	r22, Y+46	; 0x2e
    20be:	7f a5       	ldd	r23, Y+47	; 0x2f
    20c0:	88 a9       	ldd	r24, Y+48	; 0x30
    20c2:	99 a9       	ldd	r25, Y+49	; 0x31
    20c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	9d a7       	std	Y+45, r25	; 0x2d
    20ce:	8c a7       	std	Y+44, r24	; 0x2c
    20d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    20d2:	9d a5       	ldd	r25, Y+45	; 0x2d
    20d4:	99 a7       	std	Y+41, r25	; 0x29
    20d6:	88 a7       	std	Y+40, r24	; 0x28
    20d8:	88 a5       	ldd	r24, Y+40	; 0x28
    20da:	99 a5       	ldd	r25, Y+41	; 0x29
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <LCD_VidInit+0x2fa>
    20e0:	99 a7       	std	Y+41, r25	; 0x29
    20e2:	88 a7       	std	Y+40, r24	; 0x28
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <LCD_VidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20e6:	6f a9       	ldd	r22, Y+55	; 0x37
    20e8:	78 ad       	ldd	r23, Y+56	; 0x38
    20ea:	89 ad       	ldd	r24, Y+57	; 0x39
    20ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	8e ab       	std	Y+54, r24	; 0x36
    20f8:	8e a9       	ldd	r24, Y+54	; 0x36
    20fa:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20fc:	8f a1       	ldd	r24, Y+39	; 0x27
    20fe:	8a 95       	dec	r24
    2100:	f1 f7       	brne	.-4      	; 0x20fe <LCD_VidInit+0x31c>
    2102:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50); // DELAY MORE THAN 39 MICRO SEC
	LCD_SEND_COMMAND(0b00001100);  //00001DCB , C = LIKE FLAF WHEN TO STOP(OFF) , B= BLANKING , D= DISPLAY
    2104:	8c e0       	ldi	r24, 0x0C	; 12
    2106:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	a8 e4       	ldi	r26, 0x48	; 72
    2110:	b2 e4       	ldi	r27, 0x42	; 66
    2112:	8b a3       	std	Y+35, r24	; 0x23
    2114:	9c a3       	std	Y+36, r25	; 0x24
    2116:	ad a3       	std	Y+37, r26	; 0x25
    2118:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    211a:	6b a1       	ldd	r22, Y+35	; 0x23
    211c:	7c a1       	ldd	r23, Y+36	; 0x24
    211e:	8d a1       	ldd	r24, Y+37	; 0x25
    2120:	9e a1       	ldd	r25, Y+38	; 0x26
    2122:	2b ea       	ldi	r18, 0xAB	; 171
    2124:	3a ea       	ldi	r19, 0xAA	; 170
    2126:	4a e2       	ldi	r20, 0x2A	; 42
    2128:	50 e4       	ldi	r21, 0x40	; 64
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8f 8f       	std	Y+31, r24	; 0x1f
    2134:	98 a3       	std	Y+32, r25	; 0x20
    2136:	a9 a3       	std	Y+33, r26	; 0x21
    2138:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    213a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    213c:	78 a1       	ldd	r23, Y+32	; 0x20
    213e:	89 a1       	ldd	r24, Y+33	; 0x21
    2140:	9a a1       	ldd	r25, Y+34	; 0x22
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e8       	ldi	r20, 0x80	; 128
    2148:	5f e3       	ldi	r21, 0x3F	; 63
    214a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    214e:	88 23       	and	r24, r24
    2150:	1c f4       	brge	.+6      	; 0x2158 <LCD_VidInit+0x376>
		__ticks = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	8e 8f       	std	Y+30, r24	; 0x1e
    2156:	91 c0       	rjmp	.+290    	; 0x227a <LCD_VidInit+0x498>
	else if (__tmp > 255)
    2158:	6f 8d       	ldd	r22, Y+31	; 0x1f
    215a:	78 a1       	ldd	r23, Y+32	; 0x20
    215c:	89 a1       	ldd	r24, Y+33	; 0x21
    215e:	9a a1       	ldd	r25, Y+34	; 0x22
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	53 e4       	ldi	r21, 0x43	; 67
    2168:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	0c f0       	brlt	.+2      	; 0x2172 <LCD_VidInit+0x390>
    2170:	7b c0       	rjmp	.+246    	; 0x2268 <LCD_VidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    2172:	6b a1       	ldd	r22, Y+35	; 0x23
    2174:	7c a1       	ldd	r23, Y+36	; 0x24
    2176:	8d a1       	ldd	r24, Y+37	; 0x25
    2178:	9e a1       	ldd	r25, Y+38	; 0x26
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	4a e7       	ldi	r20, 0x7A	; 122
    2180:	54 e4       	ldi	r21, 0x44	; 68
    2182:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	8a 8f       	std	Y+26, r24	; 0x1a
    218c:	9b 8f       	std	Y+27, r25	; 0x1b
    218e:	ac 8f       	std	Y+28, r26	; 0x1c
    2190:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2194:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2196:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2198:	9d 8d       	ldd	r25, Y+29	; 0x1d
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a ef       	ldi	r20, 0xFA	; 250
    21a0:	54 e4       	ldi	r21, 0x44	; 68
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	8e 8b       	std	Y+22, r24	; 0x16
    21ac:	9f 8b       	std	Y+23, r25	; 0x17
    21ae:	a8 8f       	std	Y+24, r26	; 0x18
    21b0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    21b2:	6e 89       	ldd	r22, Y+22	; 0x16
    21b4:	7f 89       	ldd	r23, Y+23	; 0x17
    21b6:	88 8d       	ldd	r24, Y+24	; 0x18
    21b8:	99 8d       	ldd	r25, Y+25	; 0x19
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <LCD_VidInit+0x3f2>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9d 8b       	std	Y+21, r25	; 0x15
    21d0:	8c 8b       	std	Y+20, r24	; 0x14
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <LCD_VidInit+0x470>
	else if (__tmp > 65535)
    21d4:	6e 89       	ldd	r22, Y+22	; 0x16
    21d6:	7f 89       	ldd	r23, Y+23	; 0x17
    21d8:	88 8d       	ldd	r24, Y+24	; 0x18
    21da:	99 8d       	ldd	r25, Y+25	; 0x19
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <LCD_VidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21ee:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21f2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9d 8b       	std	Y+21, r25	; 0x15
    2212:	8c 8b       	std	Y+20, r24	; 0x14
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <LCD_VidInit+0x452>
    2216:	88 ec       	ldi	r24, 0xC8	; 200
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9b 8b       	std	Y+19, r25	; 0x13
    221c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    221e:	8a 89       	ldd	r24, Y+18	; 0x12
    2220:	9b 89       	ldd	r25, Y+19	; 0x13
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_VidInit+0x440>
    2226:	9b 8b       	std	Y+19, r25	; 0x13
    2228:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	8c 89       	ldd	r24, Y+20	; 0x14
    222c:	9d 89       	ldd	r25, Y+21	; 0x15
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	9d 8b       	std	Y+21, r25	; 0x15
    2232:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	8c 89       	ldd	r24, Y+20	; 0x14
    2236:	9d 89       	ldd	r25, Y+21	; 0x15
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <LCD_VidInit+0x434>
    223c:	24 c0       	rjmp	.+72     	; 0x2286 <LCD_VidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	6e 89       	ldd	r22, Y+22	; 0x16
    2240:	7f 89       	ldd	r23, Y+23	; 0x17
    2242:	88 8d       	ldd	r24, Y+24	; 0x18
    2244:	99 8d       	ldd	r25, Y+25	; 0x19
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9d 8b       	std	Y+21, r25	; 0x15
    2250:	8c 8b       	std	Y+20, r24	; 0x14
    2252:	8c 89       	ldd	r24, Y+20	; 0x14
    2254:	9d 89       	ldd	r25, Y+21	; 0x15
    2256:	99 8b       	std	Y+17, r25	; 0x11
    2258:	88 8b       	std	Y+16, r24	; 0x10
    225a:	88 89       	ldd	r24, Y+16	; 0x10
    225c:	99 89       	ldd	r25, Y+17	; 0x11
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_VidInit+0x47c>
    2262:	99 8b       	std	Y+17, r25	; 0x11
    2264:	88 8b       	std	Y+16, r24	; 0x10
    2266:	0f c0       	rjmp	.+30     	; 0x2286 <LCD_VidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2268:	6f 8d       	ldd	r22, Y+31	; 0x1f
    226a:	78 a1       	ldd	r23, Y+32	; 0x20
    226c:	89 a1       	ldd	r24, Y+33	; 0x21
    226e:	9a a1       	ldd	r25, Y+34	; 0x22
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	8e 8f       	std	Y+30, r24	; 0x1e
    227a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    227c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    227e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2280:	8a 95       	dec	r24
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_VidInit+0x49e>
    2284:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_SEND_COMMAND(0b00000001);
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a0 e0       	ldi	r26, 0x00	; 0
    2292:	b0 e4       	ldi	r27, 0x40	; 64
    2294:	8b 87       	std	Y+11, r24	; 0x0b
    2296:	9c 87       	std	Y+12, r25	; 0x0c
    2298:	ad 87       	std	Y+13, r26	; 0x0d
    229a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	6b 85       	ldd	r22, Y+11	; 0x0b
    229e:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a ef       	ldi	r20, 0xFA	; 250
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8f 83       	std	Y+7, r24	; 0x07
    22b6:	98 87       	std	Y+8, r25	; 0x08
    22b8:	a9 87       	std	Y+9, r26	; 0x09
    22ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_VidInit+0x4fc>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <LCD_VidInit+0x57a>
	else if (__tmp > 65535)
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <LCD_VidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	0f c0       	rjmp	.+30     	; 0x233e <LCD_VidInit+0x55c>
    2320:	88 ec       	ldi	r24, 0xC8	; 200
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9c 83       	std	Y+4, r25	; 0x04
    2326:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_VidInit+0x54a>
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <LCD_VidInit+0x53e>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <LCD_VidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_VidInit+0x586>
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // delay more than 1.5 ms
	LCD_SEND_COMMAND(0b00000110); //write from left to right
    2370:	86 e0       	ldi	r24, 0x06	; 6
    2372:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>

}
    2376:	c4 5b       	subi	r28, 0xB4	; 180
    2378:	df 4f       	sbci	r29, 0xFF	; 255
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	1f 91       	pop	r17
    238a:	0f 91       	pop	r16
    238c:	08 95       	ret

0000238e <LCD_VidSendStrig>:

void LCD_VidSendStrig(u8 * Copy_Pu8String)
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	00 d0       	rcall	.+0      	; 0x2394 <LCD_VidSendStrig+0x6>
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	9a 83       	std	Y+2, r25	; 0x02
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	0a c0       	rjmp	.+20     	; 0x23b2 <LCD_VidSendStrig+0x24>

	while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
	{
		LCD_SEND_Char(*Copy_Pu8String);
    239e:	e9 81       	ldd	r30, Y+1	; 0x01
    23a0:	fa 81       	ldd	r31, Y+2	; 0x02
    23a2:	80 81       	ld	r24, Z
    23a4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_SEND_Char>
		Copy_Pu8String++;
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	9a 83       	std	Y+2, r25	; 0x02
    23b0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_VidSendStrig(u8 * Copy_Pu8String)
{

	while(*Copy_Pu8String != '\0' ) // \0 is the last element in the arrray
    23b2:	e9 81       	ldd	r30, Y+1	; 0x01
    23b4:	fa 81       	ldd	r31, Y+2	; 0x02
    23b6:	80 81       	ld	r24, Z
    23b8:	88 23       	and	r24, r24
    23ba:	89 f7       	brne	.-30     	; 0x239e <LCD_VidSendStrig+0x10>
	{
		LCD_SEND_Char(*Copy_Pu8String);
		Copy_Pu8String++;

	}
}
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <LCD_VidGoTOLocation>:

void LCD_VidGoTOLocation(u8 Copy_U8RowNumber  , u8 Copy_U8ColNumber)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	62 97       	sbiw	r28, 0x12	; 18
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	de bf       	out	0x3e, r29	; 62
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	8f 87       	std	Y+15, r24	; 0x0f
    23dc:	68 8b       	std	Y+16, r22	; 0x10
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a0 e0       	ldi	r26, 0x00	; 0
    23e4:	b0 e4       	ldi	r27, 0x40	; 64
    23e6:	8b 87       	std	Y+11, r24	; 0x0b
    23e8:	9c 87       	std	Y+12, r25	; 0x0c
    23ea:	ad 87       	std	Y+13, r26	; 0x0d
    23ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	4a ef       	ldi	r20, 0xFA	; 250
    23fc:	54 e4       	ldi	r21, 0x44	; 68
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	8f 83       	std	Y+7, r24	; 0x07
    2408:	98 87       	std	Y+8, r25	; 0x08
    240a:	a9 87       	std	Y+9, r26	; 0x09
    240c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    240e:	6f 81       	ldd	r22, Y+7	; 0x07
    2410:	78 85       	ldd	r23, Y+8	; 0x08
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e8       	ldi	r20, 0x80	; 128
    241c:	5f e3       	ldi	r21, 0x3F	; 63
    241e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2422:	88 23       	and	r24, r24
    2424:	2c f4       	brge	.+10     	; 0x2430 <LCD_VidGoTOLocation+0x6a>
		__ticks = 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	3f c0       	rjmp	.+126    	; 0x24ae <LCD_VidGoTOLocation+0xe8>
	else if (__tmp > 65535)
    2430:	6f 81       	ldd	r22, Y+7	; 0x07
    2432:	78 85       	ldd	r23, Y+8	; 0x08
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	3f ef       	ldi	r19, 0xFF	; 255
    243c:	4f e7       	ldi	r20, 0x7F	; 127
    243e:	57 e4       	ldi	r21, 0x47	; 71
    2440:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2444:	18 16       	cp	r1, r24
    2446:	4c f5       	brge	.+82     	; 0x249a <LCD_VidGoTOLocation+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2448:	6b 85       	ldd	r22, Y+11	; 0x0b
    244a:	7c 85       	ldd	r23, Y+12	; 0x0c
    244c:	8d 85       	ldd	r24, Y+13	; 0x0d
    244e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e2       	ldi	r20, 0x20	; 32
    2456:	51 e4       	ldi	r21, 0x41	; 65
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	8d 83       	std	Y+5, r24	; 0x05
    2470:	0f c0       	rjmp	.+30     	; 0x2490 <LCD_VidGoTOLocation+0xca>
    2472:	88 ec       	ldi	r24, 0xC8	; 200
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9c 83       	std	Y+4, r25	; 0x04
    2478:	8b 83       	std	Y+3, r24	; 0x03
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <LCD_VidGoTOLocation+0xb8>
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2490:	8d 81       	ldd	r24, Y+5	; 0x05
    2492:	9e 81       	ldd	r25, Y+6	; 0x06
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	69 f7       	brne	.-38     	; 0x2472 <LCD_VidGoTOLocation+0xac>
    2498:	14 c0       	rjmp	.+40     	; 0x24c2 <LCD_VidGoTOLocation+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	9a 83       	std	Y+2, r25	; 0x02
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <LCD_VidGoTOLocation+0xf4>
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	switch(Copy_U8RowNumber)
    24c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	3a 8b       	std	Y+18, r19	; 0x12
    24ca:	29 8b       	std	Y+17, r18	; 0x11
    24cc:	89 89       	ldd	r24, Y+17	; 0x11
    24ce:	9a 89       	ldd	r25, Y+18	; 0x12
    24d0:	81 30       	cpi	r24, 0x01	; 1
    24d2:	91 05       	cpc	r25, r1
    24d4:	31 f0       	breq	.+12     	; 0x24e2 <LCD_VidGoTOLocation+0x11c>
    24d6:	29 89       	ldd	r18, Y+17	; 0x11
    24d8:	3a 89       	ldd	r19, Y+18	; 0x12
    24da:	22 30       	cpi	r18, 0x02	; 2
    24dc:	31 05       	cpc	r19, r1
    24de:	31 f0       	breq	.+12     	; 0x24ec <LCD_VidGoTOLocation+0x126>
    24e0:	09 c0       	rjmp	.+18     	; 0x24f4 <LCD_VidGoTOLocation+0x12e>
		{

		    case LCD_RowOne: LCD_SEND_COMMAND(LCD_RowOneStart+ Copy_U8ColNumber);
    24e2:	88 89       	ldd	r24, Y+16	; 0x10
    24e4:	80 58       	subi	r24, 0x80	; 128
    24e6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <LCD_VidGoTOLocation+0x12e>
		                     break;
		    case LCD_RowTwo: LCD_SEND_COMMAND(LCD_RowTwoStart + Copy_U8ColNumber);
    24ec:	88 89       	ldd	r24, Y+16	; 0x10
    24ee:	80 54       	subi	r24, 0x40	; 64
    24f0:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
		                     break;
		}

}
    24f4:	62 96       	adiw	r28, 0x12	; 18
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <LCD_VidSendNumber>:

void LCD_VidSendNumber(u32 Copy_U32Number)
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	2c 97       	sbiw	r28, 0x0c	; 12
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	69 87       	std	Y+9, r22	; 0x09
    251c:	7a 87       	std	Y+10, r23	; 0x0a
    251e:	8b 87       	std	Y+11, r24	; 0x0b
    2520:	9c 87       	std	Y+12, r25	; 0x0c
	/*u8 nums[32];
	itoa(Copy_U32Number, nums , 10);  //convert integer data type to string datatype ,10 (base-DEC)
	LCD_VidSendStrig(nums);*/

	u32 Local_u32Counter=1 , Local_u32Digit=0;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	a0 e0       	ldi	r26, 0x00	; 0
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	8d 83       	std	Y+5, r24	; 0x05
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	af 83       	std	Y+7, r26	; 0x07
    2530:	b8 87       	std	Y+8, r27	; 0x08
    2532:	19 82       	std	Y+1, r1	; 0x01
    2534:	1a 82       	std	Y+2, r1	; 0x02
    2536:	1b 82       	std	Y+3, r1	; 0x03
    2538:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_U32Number == 0)
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2540:	bc 85       	ldd	r27, Y+12	; 0x0c
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	a1 05       	cpc	r26, r1
    2546:	b1 05       	cpc	r27, r1
    2548:	b1 f4       	brne	.+44     	; 0x2576 <LCD_VidSendNumber+0x70>
	{
		LCD_SEND_Char('0');
    254a:	80 e3       	ldi	r24, 0x30	; 48
    254c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_SEND_Char>
    2550:	7a c0       	rjmp	.+244    	; 0x2646 <LCD_VidSendNumber+0x140>
	}
	else
	{
		while (Copy_U32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	9e 81       	ldd	r25, Y+6	; 0x06
    2556:	af 81       	ldd	r26, Y+7	; 0x07
    2558:	b8 85       	ldd	r27, Y+8	; 0x08
    255a:	2a e0       	ldi	r18, 0x0A	; 10
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	50 e0       	ldi	r21, 0x00	; 0
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	0e 94 03 18 	call	0x3006	; 0x3006 <__mulsi3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	8d 83       	std	Y+5, r24	; 0x05
    2570:	9e 83       	std	Y+6, r25	; 0x06
    2572:	af 83       	std	Y+7, r26	; 0x07
    2574:	b8 87       	std	Y+8, r27	; 0x08
	{
		LCD_SEND_Char('0');
	}
	else
	{
		while (Copy_U32Number/Local_u32Counter != 0)
    2576:	89 85       	ldd	r24, Y+9	; 0x09
    2578:	9a 85       	ldd	r25, Y+10	; 0x0a
    257a:	ab 85       	ldd	r26, Y+11	; 0x0b
    257c:	bc 85       	ldd	r27, Y+12	; 0x0c
    257e:	2d 81       	ldd	r18, Y+5	; 0x05
    2580:	3e 81       	ldd	r19, Y+6	; 0x06
    2582:	4f 81       	ldd	r20, Y+7	; 0x07
    2584:	58 85       	ldd	r21, Y+8	; 0x08
    2586:	bc 01       	movw	r22, r24
    2588:	cd 01       	movw	r24, r26
    258a:	0e 94 22 18 	call	0x3044	; 0x3044 <__udivmodsi4>
    258e:	da 01       	movw	r26, r20
    2590:	c9 01       	movw	r24, r18
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	a1 05       	cpc	r26, r1
    2596:	b1 05       	cpc	r27, r1
    2598:	e1 f6       	brne	.-72     	; 0x2552 <LCD_VidSendNumber+0x4c>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	af 81       	ldd	r26, Y+7	; 0x07
    25a0:	b8 85       	ldd	r27, Y+8	; 0x08
    25a2:	2a e0       	ldi	r18, 0x0A	; 10
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 22 18 	call	0x3044	; 0x3044 <__udivmodsi4>
    25b2:	da 01       	movw	r26, r20
    25b4:	c9 01       	movw	r24, r18
    25b6:	8d 83       	std	Y+5, r24	; 0x05
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	af 83       	std	Y+7, r26	; 0x07
    25bc:	b8 87       	std	Y+8, r27	; 0x08
    25be:	3a c0       	rjmp	.+116    	; 0x2634 <LCD_VidSendNumber+0x12e>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_U32Number/Local_u32Counter;
    25c0:	89 85       	ldd	r24, Y+9	; 0x09
    25c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c4:	ab 85       	ldd	r26, Y+11	; 0x0b
    25c6:	bc 85       	ldd	r27, Y+12	; 0x0c
    25c8:	2d 81       	ldd	r18, Y+5	; 0x05
    25ca:	3e 81       	ldd	r19, Y+6	; 0x06
    25cc:	4f 81       	ldd	r20, Y+7	; 0x07
    25ce:	58 85       	ldd	r21, Y+8	; 0x08
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	0e 94 22 18 	call	0x3044	; 0x3044 <__udivmodsi4>
    25d8:	da 01       	movw	r26, r20
    25da:	c9 01       	movw	r24, r18
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	9a 83       	std	Y+2, r25	; 0x02
    25e0:	ab 83       	std	Y+3, r26	; 0x03
    25e2:	bc 83       	std	Y+4, r27	; 0x04

			LCD_SEND_Char(Local_u32Digit + '0');
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	80 5d       	subi	r24, 0xD0	; 208
    25e8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_SEND_Char>

			Copy_U32Number = Copy_U32Number%Local_u32Counter;
    25ec:	89 85       	ldd	r24, Y+9	; 0x09
    25ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f0:	ab 85       	ldd	r26, Y+11	; 0x0b
    25f2:	bc 85       	ldd	r27, Y+12	; 0x0c
    25f4:	2d 81       	ldd	r18, Y+5	; 0x05
    25f6:	3e 81       	ldd	r19, Y+6	; 0x06
    25f8:	4f 81       	ldd	r20, Y+7	; 0x07
    25fa:	58 85       	ldd	r21, Y+8	; 0x08
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 22 18 	call	0x3044	; 0x3044 <__udivmodsi4>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	89 87       	std	Y+9, r24	; 0x09
    260a:	9a 87       	std	Y+10, r25	; 0x0a
    260c:	ab 87       	std	Y+11, r26	; 0x0b
    260e:	bc 87       	std	Y+12, r27	; 0x0c

			Local_u32Counter /= 10;
    2610:	8d 81       	ldd	r24, Y+5	; 0x05
    2612:	9e 81       	ldd	r25, Y+6	; 0x06
    2614:	af 81       	ldd	r26, Y+7	; 0x07
    2616:	b8 85       	ldd	r27, Y+8	; 0x08
    2618:	2a e0       	ldi	r18, 0x0A	; 10
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 22 18 	call	0x3044	; 0x3044 <__udivmodsi4>
    2628:	da 01       	movw	r26, r20
    262a:	c9 01       	movw	r24, r18
    262c:	8d 83       	std	Y+5, r24	; 0x05
    262e:	9e 83       	std	Y+6, r25	; 0x06
    2630:	af 83       	std	Y+7, r26	; 0x07
    2632:	b8 87       	std	Y+8, r27	; 0x08
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	9e 81       	ldd	r25, Y+6	; 0x06
    2638:	af 81       	ldd	r26, Y+7	; 0x07
    263a:	b8 85       	ldd	r27, Y+8	; 0x08
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	a1 05       	cpc	r26, r1
    2640:	b1 05       	cpc	r27, r1
    2642:	09 f0       	breq	.+2      	; 0x2646 <LCD_VidSendNumber+0x140>
    2644:	bd cf       	rjmp	.-134    	; 0x25c0 <LCD_VidSendNumber+0xba>

			Local_u32Counter /= 10;
		}
	}

}
    2646:	2c 96       	adiw	r28, 0x0c	; 12
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <USART_VIDInit>:

#include"UART.h"


void USART_VIDInit()
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	00 d0       	rcall	.+0      	; 0x265e <USART_VIDInit+0x6>
    265e:	0f 92       	push	r0
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_U8UCSRC_VALUE=0b10000000;
    2664:	80 e8       	ldi	r24, 0x80	; 128
    2666:	8b 83       	std	Y+3, r24	; 0x03

	u16 Loc_U16BaudRate=BAUD_RATE;
    2668:	83 e3       	ldi	r24, 0x33	; 51
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01
	//TO SET UP THE BAUD RATE TO 9600 at frequency 8MHz
	UBRRL=(u8)Loc_U16BaudRate;
    2670:	e9 e2       	ldi	r30, 0x29	; 41
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	80 83       	st	Z, r24
	UBRRH=(u8)(Loc_U16BaudRate>>8);
    2678:	e0 e4       	ldi	r30, 0x40	; 64
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	9a 81       	ldd	r25, Y+2	; 0x02
    2680:	89 2f       	mov	r24, r25
    2682:	99 27       	eor	r25, r25
    2684:	80 83       	st	Z, r24

	//1-UCSRA REGISTER
	//normal speed NOT DOUBLE
	CLR_BIT(UCSRA,U2X);
    2686:	ab e2       	ldi	r26, 0x2B	; 43
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	eb e2       	ldi	r30, 0x2B	; 43
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	8d 7f       	andi	r24, 0xFD	; 253
    2692:	8c 93       	st	X, r24
	//DISABLE MULTI PROCESSOR MODE
	CLR_BIT(UCSRA,MPCM);
    2694:	ab e2       	ldi	r26, 0x2B	; 43
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	eb e2       	ldi	r30, 0x2B	; 43
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	8e 7f       	andi	r24, 0xFE	; 254
    26a0:	8c 93       	st	X, r24
	                    //----------------------------
	//2-UCSRB  register
	//WE USE POLLING SYSTEM NOT INTERRUT (IN case of useage interrupt we need to use the GIA)
	//Rx and TX ENABLE
	SET_BIT(UCSRB,RXEN);
    26a2:	aa e2       	ldi	r26, 0x2A	; 42
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	ea e2       	ldi	r30, 0x2A	; 42
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	80 61       	ori	r24, 0x10	; 16
    26ae:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    26b0:	aa e2       	ldi	r26, 0x2A	; 42
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	ea e2       	ldi	r30, 0x2A	; 42
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	88 60       	ori	r24, 0x08	; 8
    26bc:	8c 93       	st	X, r24

	//TO SELECT CHAR SIZE (8 BIT)
	CLR_BIT(UCSRB,UCSZ2);
    26be:	aa e2       	ldi	r26, 0x2A	; 42
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	ea e2       	ldi	r30, 0x2A	; 42
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	8b 7f       	andi	r24, 0xFB	; 251
    26ca:	8c 93       	st	X, r24
	SET_BIT(Loc_U8UCSRC_VALUE,UCSZ0);
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	82 60       	ori	r24, 0x02	; 2
    26d0:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Loc_U8UCSRC_VALUE,UCSZ1);
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	84 60       	ori	r24, 0x04	; 4
    26d6:	8b 83       	std	Y+3, r24	; 0x03
	           //------------------------------
	//3-UCSAC REGISTER VALUE
	//SELECT ASYNCH
	CLR_BIT(Loc_U8UCSRC_VALUE,UMSEL);
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	8f 7b       	andi	r24, 0xBF	; 191
    26dc:	8b 83       	std	Y+3, r24	; 0x03
	//DISABLE PARITY
	CLR_BIT(Loc_U8UCSRC_VALUE,UPM0);
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	8f 7e       	andi	r24, 0xEF	; 239
    26e2:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Loc_U8UCSRC_VALUE,UPM1);
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	8f 7d       	andi	r24, 0xDF	; 223
    26e8:	8b 83       	std	Y+3, r24	; 0x03
	//TWO STOP BITS
	SET_BIT(Loc_U8UCSRC_VALUE,USBS);
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	88 60       	ori	r24, 0x08	; 8
    26ee:	8b 83       	std	Y+3, r24	; 0x03

	//UPDATE UCSRC REGISTER
	UCSRC=Loc_U8UCSRC_VALUE;
    26f0:	e0 e4       	ldi	r30, 0x40	; 64
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	80 83       	st	Z, r24

}
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <USART_VIDSendChar>:

void USART_VIDSendChar(u8 copy_u8char)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	0f 92       	push	r0
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	89 83       	std	Y+1, r24	; 0x01
	//check if the UDR register is ready to send
	while(GET_BIT(UCSRA,UDRE)==0);  //POLLINR waiting for the flag the register is ready
    2710:	eb e2       	ldi	r30, 0x2B	; 43
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	82 95       	swap	r24
    2718:	86 95       	lsr	r24
    271a:	87 70       	andi	r24, 0x07	; 7
    271c:	88 2f       	mov	r24, r24
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	81 70       	andi	r24, 0x01	; 1
    2722:	90 70       	andi	r25, 0x00	; 0
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	a1 f3       	breq	.-24     	; 0x2710 <USART_VIDSendChar+0xc>
	UDR=copy_u8char; //PUT THE 8BITS in the UDR register
    2728:	ec e2       	ldi	r30, 0x2C	; 44
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	80 83       	st	Z, r24

}
    2730:	0f 90       	pop	r0
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <USART_U8RECIEVEChar>:

u8 USART_U8RECIEVEChar()
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	00 d0       	rcall	.+0      	; 0x273e <USART_U8RECIEVEChar+0x6>
    273e:	0f 92       	push	r0
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_U8character;
	u16 counter = 2000;
    2744:	80 ed       	ldi	r24, 0xD0	; 208
    2746:	97 e0       	ldi	r25, 0x07	; 7
    2748:	9a 83       	std	Y+2, r25	; 0x02
    274a:	89 83       	std	Y+1, r24	; 0x01
    274c:	09 c0       	rjmp	.+18     	; 0x2760 <USART_U8RECIEVEChar+0x28>
	//check if the receive operation is complete (once the end bit reaches )
	while(GET_BIT(UCSRA,RXC)==0) //POLLINR waiting for tHE receive OPERATION IS COMPLETE
	{
		if (counter == 0)
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	51 f0       	breq	.+20     	; 0x276a <USART_U8RECIEVEChar+0x32>
			break;
		else
			counter-- ;
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	9a 81       	ldd	r25, Y+2	; 0x02
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	9a 83       	std	Y+2, r25	; 0x02
    275e:	89 83       	std	Y+1, r24	; 0x01
u8 USART_U8RECIEVEChar()
{
	u8 Loc_U8character;
	u16 counter = 2000;
	//check if the receive operation is complete (once the end bit reaches )
	while(GET_BIT(UCSRA,RXC)==0) //POLLINR waiting for tHE receive OPERATION IS COMPLETE
    2760:	eb e2       	ldi	r30, 0x2B	; 43
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	88 23       	and	r24, r24
    2768:	94 f7       	brge	.-28     	; 0x274e <USART_U8RECIEVEChar+0x16>
		if (counter == 0)
			break;
		else
			counter-- ;
	}
	Loc_U8character=UDR;
    276a:	ec e2       	ldi	r30, 0x2C	; 44
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	8b 83       	std	Y+3, r24	; 0x03
	return Loc_U8character;
    2772:	8b 81       	ldd	r24, Y+3	; 0x03

}
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <__vector_9>:
#include "ULTRASONIC.h"

u32 TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
    2780:	1f 92       	push	r1
    2782:	0f 92       	push	r0
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	0f 92       	push	r0
    2788:	11 24       	eor	r1, r1
    278a:	8f 93       	push	r24
    278c:	9f 93       	push	r25
    278e:	af 93       	push	r26
    2790:	bf 93       	push	r27
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
	TimerOverflow++;	/* Increment Timer Overflow count */
    279a:	80 91 de 01 	lds	r24, 0x01DE
    279e:	90 91 df 01 	lds	r25, 0x01DF
    27a2:	a0 91 e0 01 	lds	r26, 0x01E0
    27a6:	b0 91 e1 01 	lds	r27, 0x01E1
    27aa:	01 96       	adiw	r24, 0x01	; 1
    27ac:	a1 1d       	adc	r26, r1
    27ae:	b1 1d       	adc	r27, r1
    27b0:	80 93 de 01 	sts	0x01DE, r24
    27b4:	90 93 df 01 	sts	0x01DF, r25
    27b8:	a0 93 e0 01 	sts	0x01E0, r26
    27bc:	b0 93 e1 01 	sts	0x01E1, r27
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	bf 91       	pop	r27
    27c6:	af 91       	pop	r26
    27c8:	9f 91       	pop	r25
    27ca:	8f 91       	pop	r24
    27cc:	0f 90       	pop	r0
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	0f 90       	pop	r0
    27d2:	1f 90       	pop	r1
    27d4:	18 95       	reti

000027d6 <ULSONIC_VIDInit>:

void ULSONIC_VIDInit()
{
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(DIO_PORTA, DIO_PIN0, DIO_OUTPUT);
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	60 e0       	ldi	r22, 0x00	; 0
    27e2:	41 e0       	ldi	r20, 0x01	; 1
    27e4:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(DIO_PORTD,DIO_PIN6, DIO_OUTPUT);
    27e8:	83 e0       	ldi	r24, 0x03	; 3
    27ea:	66 e0       	ldi	r22, 0x06	; 6
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
	sei();			            /* Enable global interrupt */
    27f2:	78 94       	sei
	SET_BIT(TIMSK, TOIE1);  	/* Enable Timer1 overflow interrupts */
    27f4:	a9 e5       	ldi	r26, 0x59	; 89
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e9 e5       	ldi	r30, 0x59	; 89
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	84 60       	ori	r24, 0x04	; 4
    2800:	8c 93       	st	X, r24
	TCCR1A = 0;		            /* Set all bit to zero Normal operation */
    2802:	ef e4       	ldi	r30, 0x4F	; 79
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	10 82       	st	Z, r1
}
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <ULSONIC_U32GetDistance>:

u32 ULSONIC_U32GetDistance()
{
    280e:	ef 92       	push	r14
    2810:	ff 92       	push	r15
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	a0 97       	sbiw	r28, 0x20	; 32
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
	u32 distance ;
	u32 count;
	/* Give 10us trigger pulse on trig. pin to HC-SR04 */
	SET_BIT(PORTA,TRIG_PIN);
    282a:	ab e3       	ldi	r26, 0x3B	; 59
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	eb e3       	ldi	r30, 0x3B	; 59
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	81 60       	ori	r24, 0x01	; 1
    2836:	8c 93       	st	X, r24
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	a0 e2       	ldi	r26, 0x20	; 32
    283e:	b1 e4       	ldi	r27, 0x41	; 65
    2840:	8d 8b       	std	Y+21, r24	; 0x15
    2842:	9e 8b       	std	Y+22, r25	; 0x16
    2844:	af 8b       	std	Y+23, r26	; 0x17
    2846:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2848:	6d 89       	ldd	r22, Y+21	; 0x15
    284a:	7e 89       	ldd	r23, Y+22	; 0x16
    284c:	8f 89       	ldd	r24, Y+23	; 0x17
    284e:	98 8d       	ldd	r25, Y+24	; 0x18
    2850:	2b ea       	ldi	r18, 0xAB	; 171
    2852:	3a ea       	ldi	r19, 0xAA	; 170
    2854:	4a e2       	ldi	r20, 0x2A	; 42
    2856:	50 e4       	ldi	r21, 0x40	; 64
    2858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	89 8b       	std	Y+17, r24	; 0x11
    2862:	9a 8b       	std	Y+18, r25	; 0x12
    2864:	ab 8b       	std	Y+19, r26	; 0x13
    2866:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2868:	69 89       	ldd	r22, Y+17	; 0x11
    286a:	7a 89       	ldd	r23, Y+18	; 0x12
    286c:	8b 89       	ldd	r24, Y+19	; 0x13
    286e:	9c 89       	ldd	r25, Y+20	; 0x14
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e8       	ldi	r20, 0x80	; 128
    2876:	5f e3       	ldi	r21, 0x3F	; 63
    2878:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    287c:	88 23       	and	r24, r24
    287e:	1c f4       	brge	.+6      	; 0x2886 <ULSONIC_U32GetDistance+0x78>
		__ticks = 1;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	88 8b       	std	Y+16, r24	; 0x10
    2884:	91 c0       	rjmp	.+290    	; 0x29a8 <ULSONIC_U32GetDistance+0x19a>
	else if (__tmp > 255)
    2886:	69 89       	ldd	r22, Y+17	; 0x11
    2888:	7a 89       	ldd	r23, Y+18	; 0x12
    288a:	8b 89       	ldd	r24, Y+19	; 0x13
    288c:	9c 89       	ldd	r25, Y+20	; 0x14
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	53 e4       	ldi	r21, 0x43	; 67
    2896:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	0c f0       	brlt	.+2      	; 0x28a0 <ULSONIC_U32GetDistance+0x92>
    289e:	7b c0       	rjmp	.+246    	; 0x2996 <ULSONIC_U32GetDistance+0x188>
	{
		_delay_ms(__us / 1000.0);
    28a0:	6d 89       	ldd	r22, Y+21	; 0x15
    28a2:	7e 89       	ldd	r23, Y+22	; 0x16
    28a4:	8f 89       	ldd	r24, Y+23	; 0x17
    28a6:	98 8d       	ldd	r25, Y+24	; 0x18
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	4a e7       	ldi	r20, 0x7A	; 122
    28ae:	54 e4       	ldi	r21, 0x44	; 68
    28b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	8c 87       	std	Y+12, r24	; 0x0c
    28ba:	9d 87       	std	Y+13, r25	; 0x0d
    28bc:	ae 87       	std	Y+14, r26	; 0x0e
    28be:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    28c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    28c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    28c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4a ef       	ldi	r20, 0xFA	; 250
    28ce:	54 e4       	ldi	r21, 0x44	; 68
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	88 87       	std	Y+8, r24	; 0x08
    28da:	99 87       	std	Y+9, r25	; 0x09
    28dc:	aa 87       	std	Y+10, r26	; 0x0a
    28de:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28e0:	68 85       	ldd	r22, Y+8	; 0x08
    28e2:	79 85       	ldd	r23, Y+9	; 0x09
    28e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e8       	ldi	r20, 0x80	; 128
    28ee:	5f e3       	ldi	r21, 0x3F	; 63
    28f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f4:	88 23       	and	r24, r24
    28f6:	2c f4       	brge	.+10     	; 0x2902 <ULSONIC_U32GetDistance+0xf4>
		__ticks = 1;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9f 83       	std	Y+7, r25	; 0x07
    28fe:	8e 83       	std	Y+6, r24	; 0x06
    2900:	3f c0       	rjmp	.+126    	; 0x2980 <ULSONIC_U32GetDistance+0x172>
	else if (__tmp > 65535)
    2902:	68 85       	ldd	r22, Y+8	; 0x08
    2904:	79 85       	ldd	r23, Y+9	; 0x09
    2906:	8a 85       	ldd	r24, Y+10	; 0x0a
    2908:	9b 85       	ldd	r25, Y+11	; 0x0b
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	3f ef       	ldi	r19, 0xFF	; 255
    290e:	4f e7       	ldi	r20, 0x7F	; 127
    2910:	57 e4       	ldi	r21, 0x47	; 71
    2912:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2916:	18 16       	cp	r1, r24
    2918:	4c f5       	brge	.+82     	; 0x296c <ULSONIC_U32GetDistance+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291a:	6c 85       	ldd	r22, Y+12	; 0x0c
    291c:	7d 85       	ldd	r23, Y+13	; 0x0d
    291e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2920:	9f 85       	ldd	r25, Y+15	; 0x0f
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e2       	ldi	r20, 0x20	; 32
    2928:	51 e4       	ldi	r21, 0x41	; 65
    292a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	bc 01       	movw	r22, r24
    2934:	cd 01       	movw	r24, r26
    2936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	9f 83       	std	Y+7, r25	; 0x07
    2940:	8e 83       	std	Y+6, r24	; 0x06
    2942:	0f c0       	rjmp	.+30     	; 0x2962 <ULSONIC_U32GetDistance+0x154>
    2944:	88 ec       	ldi	r24, 0xC8	; 200
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9d 83       	std	Y+5, r25	; 0x05
    294a:	8c 83       	std	Y+4, r24	; 0x04
    294c:	8c 81       	ldd	r24, Y+4	; 0x04
    294e:	9d 81       	ldd	r25, Y+5	; 0x05
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <ULSONIC_U32GetDistance+0x142>
    2954:	9d 83       	std	Y+5, r25	; 0x05
    2956:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2958:	8e 81       	ldd	r24, Y+6	; 0x06
    295a:	9f 81       	ldd	r25, Y+7	; 0x07
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	9f 83       	std	Y+7, r25	; 0x07
    2960:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2962:	8e 81       	ldd	r24, Y+6	; 0x06
    2964:	9f 81       	ldd	r25, Y+7	; 0x07
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	69 f7       	brne	.-38     	; 0x2944 <ULSONIC_U32GetDistance+0x136>
    296a:	24 c0       	rjmp	.+72     	; 0x29b4 <ULSONIC_U32GetDistance+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296c:	68 85       	ldd	r22, Y+8	; 0x08
    296e:	79 85       	ldd	r23, Y+9	; 0x09
    2970:	8a 85       	ldd	r24, Y+10	; 0x0a
    2972:	9b 85       	ldd	r25, Y+11	; 0x0b
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9f 83       	std	Y+7, r25	; 0x07
    297e:	8e 83       	std	Y+6, r24	; 0x06
    2980:	8e 81       	ldd	r24, Y+6	; 0x06
    2982:	9f 81       	ldd	r25, Y+7	; 0x07
    2984:	9b 83       	std	Y+3, r25	; 0x03
    2986:	8a 83       	std	Y+2, r24	; 0x02
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	9b 81       	ldd	r25, Y+3	; 0x03
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <ULSONIC_U32GetDistance+0x17e>
    2990:	9b 83       	std	Y+3, r25	; 0x03
    2992:	8a 83       	std	Y+2, r24	; 0x02
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <ULSONIC_U32GetDistance+0x1a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2996:	69 89       	ldd	r22, Y+17	; 0x11
    2998:	7a 89       	ldd	r23, Y+18	; 0x12
    299a:	8b 89       	ldd	r24, Y+19	; 0x13
    299c:	9c 89       	ldd	r25, Y+20	; 0x14
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	88 8b       	std	Y+16, r24	; 0x10
    29a8:	88 89       	ldd	r24, Y+16	; 0x10
    29aa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	8a 95       	dec	r24
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <ULSONIC_U32GetDistance+0x1a0>
    29b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	CLR_BIT(PORTA, TRIG_PIN);
    29b4:	ab e3       	ldi	r26, 0x3B	; 59
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	eb e3       	ldi	r30, 0x3B	; 59
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	8e 7f       	andi	r24, 0xFE	; 254
    29c0:	8c 93       	st	X, r24

	TCNT1 = 0;	/* Clear Timer counter */
    29c2:	ec e4       	ldi	r30, 0x4C	; 76
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	11 82       	std	Z+1, r1	; 0x01
    29c8:	10 82       	st	Z, r1
	SET_BIT(TIFR,ICF1);	/* Clear ICP flag (Input Capture flag) */
    29ca:	a8 e5       	ldi	r26, 0x58	; 88
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e8 e5       	ldi	r30, 0x58	; 88
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	80 62       	ori	r24, 0x20	; 32
    29d6:	8c 93       	st	X, r24
	SET_BIT(TIFR,TOV1);	/* Clear Timer Overflow flag */
    29d8:	a8 e5       	ldi	r26, 0x58	; 88
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e8 e5       	ldi	r30, 0x58	; 88
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	84 60       	ori	r24, 0x04	; 4
    29e4:	8c 93       	st	X, r24
	TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
    29e6:	ee e4       	ldi	r30, 0x4E	; 78
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	81 e4       	ldi	r24, 0x41	; 65
    29ec:	80 83       	st	Z, r24


	/*Calculate width of Echo by Input Capture (ICP) */

	while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
    29ee:	e8 e5       	ldi	r30, 0x58	; 88
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	88 2f       	mov	r24, r24
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	80 72       	andi	r24, 0x20	; 32
    29fa:	90 70       	andi	r25, 0x00	; 0
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	b9 f3       	breq	.-18     	; 0x29ee <ULSONIC_U32GetDistance+0x1e0>
	TCNT1 = 0;	/* Clear Timer counter */
    2a00:	ec e4       	ldi	r30, 0x4C	; 76
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	11 82       	std	Z+1, r1	; 0x01
    2a06:	10 82       	st	Z, r1
	SET_BIT(TIFR,ICF1);	/* Clear ICP flag (Input Capture flag) */
    2a08:	a8 e5       	ldi	r26, 0x58	; 88
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e8 e5       	ldi	r30, 0x58	; 88
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	80 62       	ori	r24, 0x20	; 32
    2a14:	8c 93       	st	X, r24
	SET_BIT(TIFR,TOV1);	/* Clear Timer Overflow flag */
    2a16:	a8 e5       	ldi	r26, 0x58	; 88
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e8 e5       	ldi	r30, 0x58	; 88
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	84 60       	ori	r24, 0x04	; 4
    2a22:	8c 93       	st	X, r24
	TimerOverflow = 0;/* Clear Timer overflow count */
    2a24:	10 92 de 01 	sts	0x01DE, r1
    2a28:	10 92 df 01 	sts	0x01DF, r1
    2a2c:	10 92 e0 01 	sts	0x01E0, r1
    2a30:	10 92 e1 01 	sts	0x01E1, r1
	TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
    2a34:	ee e4       	ldi	r30, 0x4E	; 78
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	80 83       	st	Z, r24

	while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
    2a3c:	e8 e5       	ldi	r30, 0x58	; 88
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	88 2f       	mov	r24, r24
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	80 72       	andi	r24, 0x20	; 32
    2a48:	90 70       	andi	r25, 0x00	; 0
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	b9 f3       	breq	.-18     	; 0x2a3c <ULSONIC_U32GetDistance+0x22e>
	count = ICR1 + (65535 * TimerOverflow);	/* Take count */
    2a4e:	e6 e4       	ldi	r30, 0x46	; 70
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	7c 01       	movw	r14, r24
    2a58:	00 e0       	ldi	r16, 0x00	; 0
    2a5a:	10 e0       	ldi	r17, 0x00	; 0
    2a5c:	80 91 de 01 	lds	r24, 0x01DE
    2a60:	90 91 df 01 	lds	r25, 0x01DF
    2a64:	a0 91 e0 01 	lds	r26, 0x01E0
    2a68:	b0 91 e1 01 	lds	r27, 0x01E1
    2a6c:	2f ef       	ldi	r18, 0xFF	; 255
    2a6e:	3f ef       	ldi	r19, 0xFF	; 255
    2a70:	40 e0       	ldi	r20, 0x00	; 0
    2a72:	50 e0       	ldi	r21, 0x00	; 0
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 03 18 	call	0x3006	; 0x3006 <__mulsi3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	8e 0d       	add	r24, r14
    2a82:	9f 1d       	adc	r25, r15
    2a84:	a0 1f       	adc	r26, r16
    2a86:	b1 1f       	adc	r27, r17
    2a88:	89 8f       	std	Y+25, r24	; 0x19
    2a8a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a8c:	ab 8f       	std	Y+27, r26	; 0x1b
    2a8e:	bc 8f       	std	Y+28, r27	; 0x1c
	/* 8MHz Timer freq, sound speed =343 m/s */
	distance = (double)count / 466.47;
    2a90:	69 8d       	ldd	r22, Y+25	; 0x19
    2a92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a98:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	bc 01       	movw	r22, r24
    2aa2:	cd 01       	movw	r24, r26
    2aa4:	29 e2       	ldi	r18, 0x29	; 41
    2aa6:	3c e3       	ldi	r19, 0x3C	; 60
    2aa8:	49 ee       	ldi	r20, 0xE9	; 233
    2aaa:	53 e4       	ldi	r21, 0x43	; 67
    2aac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	bc 01       	movw	r22, r24
    2ab6:	cd 01       	movw	r24, r26
    2ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ac2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac4:	af 8f       	std	Y+31, r26	; 0x1f
    2ac6:	b8 a3       	std	Y+32, r27	; 0x20
	distance++;
    2ac8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2acc:	af 8d       	ldd	r26, Y+31	; 0x1f
    2ace:	b8 a1       	ldd	r27, Y+32	; 0x20
    2ad0:	01 96       	adiw	r24, 0x01	; 1
    2ad2:	a1 1d       	adc	r26, r1
    2ad4:	b1 1d       	adc	r27, r1
    2ad6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ad8:	9e 8f       	std	Y+30, r25	; 0x1e
    2ada:	af 8f       	std	Y+31, r26	; 0x1f
    2adc:	b8 a3       	std	Y+32, r27	; 0x20
	return distance;
    2ade:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ae0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ae2:	af 8d       	ldd	r26, Y+31	; 0x1f
    2ae4:	b8 a1       	ldd	r27, Y+32	; 0x20

}
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	cd 01       	movw	r24, r26
    2aea:	a0 96       	adiw	r28, 0x20	; 32
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	cd bf       	out	0x3d, r28	; 61
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	08 95       	ret

00002b04 <main>:
#include"LCD.h"
#include"avr/delay.h"
#include"UART.h"

void main(void)
{
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	ee 97       	sbiw	r28, 0x3e	; 62
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
	u8 x=0;
    2b18:	1e ae       	std	Y+62, r1	; 0x3e
	u8 control = 0;
    2b1a:	1d ae       	std	Y+61, r1	; 0x3d
	u32 read ;

	//USART_VIDInit();
	LCD_VidInit();
    2b1c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_VidInit>
	Dc_Motor_Init();
    2b20:	0e 94 17 07 	call	0xe2e	; 0xe2e <Dc_Motor_Init>
	ULSONIC_VIDInit();
    2b24:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <ULSONIC_VIDInit>
	USART_VIDInit();
    2b28:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_VIDInit>
	IR_init();
    2b2c:	0e 94 ad 0b 	call	0x175a	; 0x175a <IR_init>
	/*lED FOR TESTING*/
	//DIO_VidSetPinDirection(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
	//DIO_VidSetPinValue(DIO_PORTA,DIO_PIN3,DIO_LOW);

	/*FOR UART INITILIZATION AS PIN0 INPUT FOR RECIVING & PIN1 FOR TRANSMITTING*/
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT);
    2b30:	83 e0       	ldi	r24, 0x03	; 3
    2b32:	60 e0       	ldi	r22, 0x00	; 0
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);
    2b3a:	83 e0       	ldi	r24, 0x03	; 3
    2b3c:	61 e0       	ldi	r22, 0x01	; 1
    2b3e:	41 e0       	ldi	r20, 0x01	; 1
    2b40:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_VidSetPinDirection>

	while(1)
	{
		//_delay_ms(505);
		/*lCD CLEAR*/
    	LCD_SEND_COMMAND(0x01);
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
		/*READING DISTANCE FROM ULTRASONIC*/
		read =  ULSONIC_U32GetDistance();
    2b4a:	0e 94 07 14 	call	0x280e	; 0x280e <ULSONIC_U32GetDistance>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	89 af       	std	Y+57, r24	; 0x39
    2b54:	9a af       	std	Y+58, r25	; 0x3a
    2b56:	ab af       	std	Y+59, r26	; 0x3b
    2b58:	bc af       	std	Y+60, r27	; 0x3c
	    LCD_VidGoTOLocation(LCD_RowOne,LCD_ColOne);
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	60 e0       	ldi	r22, 0x00	; 0
    2b5e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_VidGoTOLocation>
	    LCD_VidSendStrig("Ultrasonic");
    2b62:	82 e9       	ldi	r24, 0x92	; 146
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_VidSendStrig>
	    LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2b6a:	82 e0       	ldi	r24, 0x02	; 2
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_VidGoTOLocation>
	    LCD_VidSendStrig("dist=");
    2b72:	8d e9       	ldi	r24, 0x9D	; 157
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_VidSendStrig>
	    //_delay_ms(150);
	    LCD_VidSendNumber(read);
    2b7a:	89 ad       	ldd	r24, Y+57	; 0x39
    2b7c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b7e:	ab ad       	ldd	r26, Y+59	; 0x3b
    2b80:	bc ad       	ldd	r27, Y+60	; 0x3c
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 83 12 	call	0x2506	; 0x2506 <LCD_VidSendNumber>
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	a8 e4       	ldi	r26, 0x48	; 72
    2b90:	b3 e4       	ldi	r27, 0x43	; 67
    2b92:	8d ab       	std	Y+53, r24	; 0x35
    2b94:	9e ab       	std	Y+54, r25	; 0x36
    2b96:	af ab       	std	Y+55, r26	; 0x37
    2b98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b9c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b9e:	8f a9       	ldd	r24, Y+55	; 0x37
    2ba0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	4a ef       	ldi	r20, 0xFA	; 250
    2ba8:	54 e4       	ldi	r21, 0x44	; 68
    2baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	89 ab       	std	Y+49, r24	; 0x31
    2bb4:	9a ab       	std	Y+50, r25	; 0x32
    2bb6:	ab ab       	std	Y+51, r26	; 0x33
    2bb8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bba:	69 a9       	ldd	r22, Y+49	; 0x31
    2bbc:	7a a9       	ldd	r23, Y+50	; 0x32
    2bbe:	8b a9       	ldd	r24, Y+51	; 0x33
    2bc0:	9c a9       	ldd	r25, Y+52	; 0x34
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e8       	ldi	r20, 0x80	; 128
    2bc8:	5f e3       	ldi	r21, 0x3F	; 63
    2bca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bce:	88 23       	and	r24, r24
    2bd0:	2c f4       	brge	.+10     	; 0x2bdc <main+0xd8>
		__ticks = 1;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	98 ab       	std	Y+48, r25	; 0x30
    2bd8:	8f a7       	std	Y+47, r24	; 0x2f
    2bda:	3f c0       	rjmp	.+126    	; 0x2c5a <main+0x156>
	else if (__tmp > 65535)
    2bdc:	69 a9       	ldd	r22, Y+49	; 0x31
    2bde:	7a a9       	ldd	r23, Y+50	; 0x32
    2be0:	8b a9       	ldd	r24, Y+51	; 0x33
    2be2:	9c a9       	ldd	r25, Y+52	; 0x34
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	3f ef       	ldi	r19, 0xFF	; 255
    2be8:	4f e7       	ldi	r20, 0x7F	; 127
    2bea:	57 e4       	ldi	r21, 0x47	; 71
    2bec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bf0:	18 16       	cp	r1, r24
    2bf2:	4c f5       	brge	.+82     	; 0x2c46 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf4:	6d a9       	ldd	r22, Y+53	; 0x35
    2bf6:	7e a9       	ldd	r23, Y+54	; 0x36
    2bf8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bfa:	98 ad       	ldd	r25, Y+56	; 0x38
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e2       	ldi	r20, 0x20	; 32
    2c02:	51 e4       	ldi	r21, 0x41	; 65
    2c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	bc 01       	movw	r22, r24
    2c0e:	cd 01       	movw	r24, r26
    2c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	98 ab       	std	Y+48, r25	; 0x30
    2c1a:	8f a7       	std	Y+47, r24	; 0x2f
    2c1c:	0f c0       	rjmp	.+30     	; 0x2c3c <main+0x138>
    2c1e:	88 ec       	ldi	r24, 0xC8	; 200
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9e a7       	std	Y+46, r25	; 0x2e
    2c24:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c26:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c28:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <main+0x126>
    2c2e:	9e a7       	std	Y+46, r25	; 0x2e
    2c30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c32:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c34:	98 a9       	ldd	r25, Y+48	; 0x30
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	98 ab       	std	Y+48, r25	; 0x30
    2c3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	69 f7       	brne	.-38     	; 0x2c1e <main+0x11a>
    2c44:	14 c0       	rjmp	.+40     	; 0x2c6e <main+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c46:	69 a9       	ldd	r22, Y+49	; 0x31
    2c48:	7a a9       	ldd	r23, Y+50	; 0x32
    2c4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	98 ab       	std	Y+48, r25	; 0x30
    2c58:	8f a7       	std	Y+47, r24	; 0x2f
    2c5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c5c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c5e:	9c a7       	std	Y+44, r25	; 0x2c
    2c60:	8b a7       	std	Y+43, r24	; 0x2b
    2c62:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c64:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <main+0x162>
    2c6a:	9c a7       	std	Y+44, r25	; 0x2c
    2c6c:	8b a7       	std	Y+43, r24	; 0x2b
	    _delay_ms(200);
		DIO_VidSetPinDirection(DIO_PORTC,DIO_PIN6, DIO_OUTPUT);
    2c6e:	82 e0       	ldi	r24, 0x02	; 2
    2c70:	66 e0       	ldi	r22, 0x06	; 6
    2c72:	41 e0       	ldi	r20, 0x01	; 1
    2c74:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_VidSetPinDirection>
		DIO_VidSetPinValue(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    2c78:	82 e0       	ldi	r24, 0x02	; 2
    2c7a:	66 e0       	ldi	r22, 0x06	; 6
    2c7c:	41 e0       	ldi	r20, 0x01	; 1
    2c7e:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
    	if(read>=30)
    2c82:	89 ad       	ldd	r24, Y+57	; 0x39
    2c84:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c86:	ab ad       	ldd	r26, Y+59	; 0x3b
    2c88:	bc ad       	ldd	r27, Y+60	; 0x3c
    2c8a:	8e 31       	cpi	r24, 0x1E	; 30
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	a1 05       	cpc	r26, r1
    2c90:	b1 05       	cpc	r27, r1
    2c92:	08 f4       	brcc	.+2      	; 0x2c96 <main+0x192>
    2c94:	9a c1       	rjmp	.+820    	; 0x2fca <main+0x4c6>
    	{

    		x=USART_U8RECIEVEChar();
    2c96:	0e 94 9c 13 	call	0x2738	; 0x2738 <USART_U8RECIEVEChar>
    2c9a:	8e af       	std	Y+62, r24	; 0x3e
    		if (x=='S' || x== 'F')
    2c9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c9e:	83 35       	cpi	r24, 0x53	; 83
    2ca0:	19 f0       	breq	.+6      	; 0x2ca8 <main+0x1a4>
    2ca2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ca4:	86 34       	cpi	r24, 0x46	; 70
    2ca6:	19 f4       	brne	.+6      	; 0x2cae <main+0x1aa>
    		{
    			control = x;
    2ca8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2caa:	8d af       	std	Y+61, r24	; 0x3d
    2cac:	85 c0       	rjmp	.+266    	; 0x2db8 <main+0x2b4>
    		}
    		else{
  			   LCD_SEND_COMMAND(0x01);
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
  			  // DC_MOTOR_Stop();
  			   LCD_VidGoTOLocation(LCD_RowOne,LCD_ColOne);
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_VidGoTOLocation>
  			   LCD_VidSendStrig("please enter ");
    2cbc:	83 ea       	ldi	r24, 0xA3	; 163
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_VidSendStrig>
  			   LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2cc4:	82 e0       	ldi	r24, 0x02	; 2
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_VidGoTOLocation>
  			   LCD_VidSendStrig("valid input");
    2ccc:	81 eb       	ldi	r24, 0xB1	; 177
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_VidSendStrig>
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	a8 ec       	ldi	r26, 0xC8	; 200
    2cda:	b2 e4       	ldi	r27, 0x42	; 66
    2cdc:	8f a3       	std	Y+39, r24	; 0x27
    2cde:	98 a7       	std	Y+40, r25	; 0x28
    2ce0:	a9 a7       	std	Y+41, r26	; 0x29
    2ce2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ce6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ce8:	89 a5       	ldd	r24, Y+41	; 0x29
    2cea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a ef       	ldi	r20, 0xFA	; 250
    2cf2:	54 e4       	ldi	r21, 0x44	; 68
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	8b a3       	std	Y+35, r24	; 0x23
    2cfe:	9c a3       	std	Y+36, r25	; 0x24
    2d00:	ad a3       	std	Y+37, r26	; 0x25
    2d02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d04:	6b a1       	ldd	r22, Y+35	; 0x23
    2d06:	7c a1       	ldd	r23, Y+36	; 0x24
    2d08:	8d a1       	ldd	r24, Y+37	; 0x25
    2d0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d18:	88 23       	and	r24, r24
    2d1a:	2c f4       	brge	.+10     	; 0x2d26 <main+0x222>
		__ticks = 1;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	9a a3       	std	Y+34, r25	; 0x22
    2d22:	89 a3       	std	Y+33, r24	; 0x21
    2d24:	3f c0       	rjmp	.+126    	; 0x2da4 <main+0x2a0>
	else if (__tmp > 65535)
    2d26:	6b a1       	ldd	r22, Y+35	; 0x23
    2d28:	7c a1       	ldd	r23, Y+36	; 0x24
    2d2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	4f e7       	ldi	r20, 0x7F	; 127
    2d34:	57 e4       	ldi	r21, 0x47	; 71
    2d36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d3a:	18 16       	cp	r1, r24
    2d3c:	4c f5       	brge	.+82     	; 0x2d90 <main+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d40:	78 a5       	ldd	r23, Y+40	; 0x28
    2d42:	89 a5       	ldd	r24, Y+41	; 0x29
    2d44:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	9a a3       	std	Y+34, r25	; 0x22
    2d64:	89 a3       	std	Y+33, r24	; 0x21
    2d66:	0f c0       	rjmp	.+30     	; 0x2d86 <main+0x282>
    2d68:	88 ec       	ldi	r24, 0xC8	; 200
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	98 a3       	std	Y+32, r25	; 0x20
    2d6e:	8f 8f       	std	Y+31, r24	; 0x1f
    2d70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d72:	98 a1       	ldd	r25, Y+32	; 0x20
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <main+0x270>
    2d78:	98 a3       	std	Y+32, r25	; 0x20
    2d7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	9a a3       	std	Y+34, r25	; 0x22
    2d84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	89 a1       	ldd	r24, Y+33	; 0x21
    2d88:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <main+0x264>
    2d8e:	14 c0       	rjmp	.+40     	; 0x2db8 <main+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d90:	6b a1       	ldd	r22, Y+35	; 0x23
    2d92:	7c a1       	ldd	r23, Y+36	; 0x24
    2d94:	8d a1       	ldd	r24, Y+37	; 0x25
    2d96:	9e a1       	ldd	r25, Y+38	; 0x26
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	9a a3       	std	Y+34, r25	; 0x22
    2da2:	89 a3       	std	Y+33, r24	; 0x21
    2da4:	89 a1       	ldd	r24, Y+33	; 0x21
    2da6:	9a a1       	ldd	r25, Y+34	; 0x22
    2da8:	9e 8f       	std	Y+30, r25	; 0x1e
    2daa:	8d 8f       	std	Y+29, r24	; 0x1d
    2dac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <main+0x2ac>
    2db4:	9e 8f       	std	Y+30, r25	; 0x1e
    2db6:	8d 8f       	std	Y+29, r24	; 0x1d
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	a8 e4       	ldi	r26, 0x48	; 72
    2dbe:	b3 e4       	ldi	r27, 0x43	; 67
    2dc0:	89 8f       	std	Y+25, r24	; 0x19
    2dc2:	9a 8f       	std	Y+26, r25	; 0x1a
    2dc4:	ab 8f       	std	Y+27, r26	; 0x1b
    2dc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc8:	69 8d       	ldd	r22, Y+25	; 0x19
    2dca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	4a ef       	ldi	r20, 0xFA	; 250
    2dd6:	54 e4       	ldi	r21, 0x44	; 68
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	8d 8b       	std	Y+21, r24	; 0x15
    2de2:	9e 8b       	std	Y+22, r25	; 0x16
    2de4:	af 8b       	std	Y+23, r26	; 0x17
    2de6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2de8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dea:	7e 89       	ldd	r23, Y+22	; 0x16
    2dec:	8f 89       	ldd	r24, Y+23	; 0x17
    2dee:	98 8d       	ldd	r25, Y+24	; 0x18
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	40 e8       	ldi	r20, 0x80	; 128
    2df6:	5f e3       	ldi	r21, 0x3F	; 63
    2df8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dfc:	88 23       	and	r24, r24
    2dfe:	2c f4       	brge	.+10     	; 0x2e0a <main+0x306>
		__ticks = 1;
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	9c 8b       	std	Y+20, r25	; 0x14
    2e06:	8b 8b       	std	Y+19, r24	; 0x13
    2e08:	3f c0       	rjmp	.+126    	; 0x2e88 <main+0x384>
	else if (__tmp > 65535)
    2e0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e10:	98 8d       	ldd	r25, Y+24	; 0x18
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	57 e4       	ldi	r21, 0x47	; 71
    2e1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	4c f5       	brge	.+82     	; 0x2e74 <main+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e22:	69 8d       	ldd	r22, Y+25	; 0x19
    2e24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e2       	ldi	r20, 0x20	; 32
    2e30:	51 e4       	ldi	r21, 0x41	; 65
    2e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9c 8b       	std	Y+20, r25	; 0x14
    2e48:	8b 8b       	std	Y+19, r24	; 0x13
    2e4a:	0f c0       	rjmp	.+30     	; 0x2e6a <main+0x366>
    2e4c:	88 ec       	ldi	r24, 0xC8	; 200
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	9a 8b       	std	Y+18, r25	; 0x12
    2e52:	89 8b       	std	Y+17, r24	; 0x11
    2e54:	89 89       	ldd	r24, Y+17	; 0x11
    2e56:	9a 89       	ldd	r25, Y+18	; 0x12
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <main+0x354>
    2e5c:	9a 8b       	std	Y+18, r25	; 0x12
    2e5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e60:	8b 89       	ldd	r24, Y+19	; 0x13
    2e62:	9c 89       	ldd	r25, Y+20	; 0x14
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	9c 8b       	std	Y+20, r25	; 0x14
    2e68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	69 f7       	brne	.-38     	; 0x2e4c <main+0x348>
    2e72:	14 c0       	rjmp	.+40     	; 0x2e9c <main+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e74:	6d 89       	ldd	r22, Y+21	; 0x15
    2e76:	7e 89       	ldd	r23, Y+22	; 0x16
    2e78:	8f 89       	ldd	r24, Y+23	; 0x17
    2e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9c 8b       	std	Y+20, r25	; 0x14
    2e86:	8b 8b       	std	Y+19, r24	; 0x13
    2e88:	8b 89       	ldd	r24, Y+19	; 0x13
    2e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e8c:	98 8b       	std	Y+16, r25	; 0x10
    2e8e:	8f 87       	std	Y+15, r24	; 0x0f
    2e90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e92:	98 89       	ldd	r25, Y+16	; 0x10
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <main+0x390>
    2e98:	98 8b       	std	Y+16, r25	; 0x10
    2e9a:	8f 87       	std	Y+15, r24	; 0x0f
  			   _delay_ms(100);
    		}
    		_delay_ms(200);
    		if(control=='F')
    2e9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e9e:	86 34       	cpi	r24, 0x46	; 70
    2ea0:	59 f4       	brne	.+22     	; 0x2eb8 <main+0x3b4>
    		{
    			LCD_SEND_COMMAND(0x01);
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
    			DIO_VidSetPinValue(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    2ea8:	82 e0       	ldi	r24, 0x02	; 2
    2eaa:	66 e0       	ldi	r22, 0x06	; 6
    2eac:	41 e0       	ldi	r20, 0x01	; 1
    2eae:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
    			IR_MakeDecision();
    2eb2:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <IR_MakeDecision>
    2eb6:	46 ce       	rjmp	.-884    	; 0x2b44 <main+0x40>
    			//DC_MOTOR_MoveForward();
    			//LCD_VidGoTOLocation(LCD_RowOne,LCD_ColOne);
    			//LCD_VidSendStrig("move forword");

    		}
    		else if (control== 'S')
    2eb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eba:	83 35       	cpi	r24, 0x53	; 83
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <main+0x3bc>
    2ebe:	42 ce       	rjmp	.-892    	; 0x2b44 <main+0x40>
    		{
			   LCD_SEND_COMMAND(0x01);
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
			   DC_MOTOR_Stop();
    2ec6:	0e 94 00 08 	call	0x1000	; 0x1000 <DC_MOTOR_Stop>
			   DIO_VidSetPinValue(DIO_PORTC, DIO_PIN6, DIO_LOW);
    2eca:	82 e0       	ldi	r24, 0x02	; 2
    2ecc:	66 e0       	ldi	r22, 0x06	; 6
    2ece:	40 e0       	ldi	r20, 0x00	; 0
    2ed0:	0e 94 2d 09 	call	0x125a	; 0x125a <DIO_VidSetPinValue>
			   LCD_VidGoTOLocation(LCD_RowOne,LCD_ColOne);
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	60 e0       	ldi	r22, 0x00	; 0
    2ed8:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_VidGoTOLocation>
			   LCD_VidSendStrig("Car Stopped ");
    2edc:	8d eb       	ldi	r24, 0xBD	; 189
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_VidSendStrig>
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	aa e7       	ldi	r26, 0x7A	; 122
    2eea:	b4 e4       	ldi	r27, 0x44	; 68
    2eec:	8b 87       	std	Y+11, r24	; 0x0b
    2eee:	9c 87       	std	Y+12, r25	; 0x0c
    2ef0:	ad 87       	std	Y+13, r26	; 0x0d
    2ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a ef       	ldi	r20, 0xFA	; 250
    2f02:	54 e4       	ldi	r21, 0x44	; 68
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8f 83       	std	Y+7, r24	; 0x07
    2f0e:	98 87       	std	Y+8, r25	; 0x08
    2f10:	a9 87       	std	Y+9, r26	; 0x09
    2f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f14:	6f 81       	ldd	r22, Y+7	; 0x07
    2f16:	78 85       	ldd	r23, Y+8	; 0x08
    2f18:	89 85       	ldd	r24, Y+9	; 0x09
    2f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e8       	ldi	r20, 0x80	; 128
    2f22:	5f e3       	ldi	r21, 0x3F	; 63
    2f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f28:	88 23       	and	r24, r24
    2f2a:	2c f4       	brge	.+10     	; 0x2f36 <main+0x432>
		__ticks = 1;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
    2f34:	3f c0       	rjmp	.+126    	; 0x2fb4 <main+0x4b0>
	else if (__tmp > 65535)
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	3f ef       	ldi	r19, 0xFF	; 255
    2f42:	4f e7       	ldi	r20, 0x7F	; 127
    2f44:	57 e4       	ldi	r21, 0x47	; 71
    2f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f4a:	18 16       	cp	r1, r24
    2f4c:	4c f5       	brge	.+82     	; 0x2fa0 <main+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e2       	ldi	r20, 0x20	; 32
    2f5c:	51 e4       	ldi	r21, 0x41	; 65
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	9e 83       	std	Y+6, r25	; 0x06
    2f74:	8d 83       	std	Y+5, r24	; 0x05
    2f76:	0f c0       	rjmp	.+30     	; 0x2f96 <main+0x492>
    2f78:	88 ec       	ldi	r24, 0xC8	; 200
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9c 83       	std	Y+4, r25	; 0x04
    2f7e:	8b 83       	std	Y+3, r24	; 0x03
    2f80:	8b 81       	ldd	r24, Y+3	; 0x03
    2f82:	9c 81       	ldd	r25, Y+4	; 0x04
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <main+0x480>
    2f88:	9c 83       	std	Y+4, r25	; 0x04
    2f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f96:	8d 81       	ldd	r24, Y+5	; 0x05
    2f98:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	69 f7       	brne	.-38     	; 0x2f78 <main+0x474>
    2f9e:	d2 cd       	rjmp	.-1116   	; 0x2b44 <main+0x40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa2:	78 85       	ldd	r23, Y+8	; 0x08
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9e 83       	std	Y+6, r25	; 0x06
    2fb2:	8d 83       	std	Y+5, r24	; 0x05
    2fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb8:	9a 83       	std	Y+2, r25	; 0x02
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <main+0x4bc>
    2fc4:	9a 83       	std	Y+2, r25	; 0x02
    2fc6:	89 83       	std	Y+1, r24	; 0x01
    2fc8:	bd cd       	rjmp	.-1158   	; 0x2b44 <main+0x40>
    	}
    	else
    		{


    	       LCD_SEND_COMMAND(0x01);
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <LCD_SEND_COMMAND>
    		   DC_MOTOR_Stop();
    2fd0:	0e 94 00 08 	call	0x1000	; 0x1000 <DC_MOTOR_Stop>
    		   LCD_VidGoTOLocation(LCD_RowOne,LCD_ColOne);
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	60 e0       	ldi	r22, 0x00	; 0
    2fd8:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_VidGoTOLocation>
    		   LCD_VidSendStrig("cannot move");
    2fdc:	8a ec       	ldi	r24, 0xCA	; 202
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_VidSendStrig>
    		   LCD_VidGoTOLocation(LCD_RowTwo,LCD_ColOne);
    2fe4:	82 e0       	ldi	r24, 0x02	; 2
    2fe6:	60 e0       	ldi	r22, 0x00	; 0
    2fe8:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_VidGoTOLocation>
    		   LCD_VidSendStrig("dist=");
    2fec:	8d e9       	ldi	r24, 0x9D	; 157
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	0e 94 c7 11 	call	0x238e	; 0x238e <LCD_VidSendStrig>
    		   LCD_VidSendNumber(read);
    2ff4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ff6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ff8:	ab ad       	ldd	r26, Y+59	; 0x3b
    2ffa:	bc ad       	ldd	r27, Y+60	; 0x3c
    2ffc:	bc 01       	movw	r22, r24
    2ffe:	cd 01       	movw	r24, r26
    3000:	0e 94 83 12 	call	0x2506	; 0x2506 <LCD_VidSendNumber>
    3004:	9f cd       	rjmp	.-1218   	; 0x2b44 <main+0x40>

00003006 <__mulsi3>:
    3006:	62 9f       	mul	r22, r18
    3008:	d0 01       	movw	r26, r0
    300a:	73 9f       	mul	r23, r19
    300c:	f0 01       	movw	r30, r0
    300e:	82 9f       	mul	r24, r18
    3010:	e0 0d       	add	r30, r0
    3012:	f1 1d       	adc	r31, r1
    3014:	64 9f       	mul	r22, r20
    3016:	e0 0d       	add	r30, r0
    3018:	f1 1d       	adc	r31, r1
    301a:	92 9f       	mul	r25, r18
    301c:	f0 0d       	add	r31, r0
    301e:	83 9f       	mul	r24, r19
    3020:	f0 0d       	add	r31, r0
    3022:	74 9f       	mul	r23, r20
    3024:	f0 0d       	add	r31, r0
    3026:	65 9f       	mul	r22, r21
    3028:	f0 0d       	add	r31, r0
    302a:	99 27       	eor	r25, r25
    302c:	72 9f       	mul	r23, r18
    302e:	b0 0d       	add	r27, r0
    3030:	e1 1d       	adc	r30, r1
    3032:	f9 1f       	adc	r31, r25
    3034:	63 9f       	mul	r22, r19
    3036:	b0 0d       	add	r27, r0
    3038:	e1 1d       	adc	r30, r1
    303a:	f9 1f       	adc	r31, r25
    303c:	bd 01       	movw	r22, r26
    303e:	cf 01       	movw	r24, r30
    3040:	11 24       	eor	r1, r1
    3042:	08 95       	ret

00003044 <__udivmodsi4>:
    3044:	a1 e2       	ldi	r26, 0x21	; 33
    3046:	1a 2e       	mov	r1, r26
    3048:	aa 1b       	sub	r26, r26
    304a:	bb 1b       	sub	r27, r27
    304c:	fd 01       	movw	r30, r26
    304e:	0d c0       	rjmp	.+26     	; 0x306a <__udivmodsi4_ep>

00003050 <__udivmodsi4_loop>:
    3050:	aa 1f       	adc	r26, r26
    3052:	bb 1f       	adc	r27, r27
    3054:	ee 1f       	adc	r30, r30
    3056:	ff 1f       	adc	r31, r31
    3058:	a2 17       	cp	r26, r18
    305a:	b3 07       	cpc	r27, r19
    305c:	e4 07       	cpc	r30, r20
    305e:	f5 07       	cpc	r31, r21
    3060:	20 f0       	brcs	.+8      	; 0x306a <__udivmodsi4_ep>
    3062:	a2 1b       	sub	r26, r18
    3064:	b3 0b       	sbc	r27, r19
    3066:	e4 0b       	sbc	r30, r20
    3068:	f5 0b       	sbc	r31, r21

0000306a <__udivmodsi4_ep>:
    306a:	66 1f       	adc	r22, r22
    306c:	77 1f       	adc	r23, r23
    306e:	88 1f       	adc	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	1a 94       	dec	r1
    3074:	69 f7       	brne	.-38     	; 0x3050 <__udivmodsi4_loop>
    3076:	60 95       	com	r22
    3078:	70 95       	com	r23
    307a:	80 95       	com	r24
    307c:	90 95       	com	r25
    307e:	9b 01       	movw	r18, r22
    3080:	ac 01       	movw	r20, r24
    3082:	bd 01       	movw	r22, r26
    3084:	cf 01       	movw	r24, r30
    3086:	08 95       	ret

00003088 <__prologue_saves__>:
    3088:	2f 92       	push	r2
    308a:	3f 92       	push	r3
    308c:	4f 92       	push	r4
    308e:	5f 92       	push	r5
    3090:	6f 92       	push	r6
    3092:	7f 92       	push	r7
    3094:	8f 92       	push	r8
    3096:	9f 92       	push	r9
    3098:	af 92       	push	r10
    309a:	bf 92       	push	r11
    309c:	cf 92       	push	r12
    309e:	df 92       	push	r13
    30a0:	ef 92       	push	r14
    30a2:	ff 92       	push	r15
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	ca 1b       	sub	r28, r26
    30b2:	db 0b       	sbc	r29, r27
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	cd bf       	out	0x3d, r28	; 61
    30be:	09 94       	ijmp

000030c0 <__epilogue_restores__>:
    30c0:	2a 88       	ldd	r2, Y+18	; 0x12
    30c2:	39 88       	ldd	r3, Y+17	; 0x11
    30c4:	48 88       	ldd	r4, Y+16	; 0x10
    30c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    30c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    30ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    30cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    30ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    30d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    30d2:	b9 84       	ldd	r11, Y+9	; 0x09
    30d4:	c8 84       	ldd	r12, Y+8	; 0x08
    30d6:	df 80       	ldd	r13, Y+7	; 0x07
    30d8:	ee 80       	ldd	r14, Y+6	; 0x06
    30da:	fd 80       	ldd	r15, Y+5	; 0x05
    30dc:	0c 81       	ldd	r16, Y+4	; 0x04
    30de:	1b 81       	ldd	r17, Y+3	; 0x03
    30e0:	aa 81       	ldd	r26, Y+2	; 0x02
    30e2:	b9 81       	ldd	r27, Y+1	; 0x01
    30e4:	ce 0f       	add	r28, r30
    30e6:	d1 1d       	adc	r29, r1
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	ed 01       	movw	r28, r26
    30f4:	08 95       	ret

000030f6 <_exit>:
    30f6:	f8 94       	cli

000030f8 <__stop_program>:
    30f8:	ff cf       	rjmp	.-2      	; 0x30f8 <__stop_program>
